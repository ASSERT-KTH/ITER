bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  orphaned  case	53	None	replace
2	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  orphaned  case	53	None	replace
3	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	83	None	replace
4	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	83	None	replace
5	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	83	None	replace
6	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	83	None	replace
7	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	83	None	replace
8	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  not  a  statement	83	None	replace
9	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserve);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  not  a  statement	2	None	replace
10	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  not  a  statement	2	None	replace
13	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	69	None	replace
14	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  fileOverview);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	69	None	replace
15	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	69	None	replace
16	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	69	None	replace
17	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  LICENSE);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	69	None	replace
18	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	69	None	replace
19	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  buffer);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	4	None	replace
20	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	27	None	replace
25	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.FIELD_NAME,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.FIELD_NAME,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.FIELD_NAME,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LINE,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LINE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LINE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".length(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".length(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".length(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
30	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
31	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	14	None	replace
32	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	14	None	replace
33	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	65	None	replace
35	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  this);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	65	None	replace
36	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  null);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	65	None	replace
37	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	65	None	replace
38	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
39	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
40	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
41	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
42	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
43	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	97	None	replace
44	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	97	None	replace
45	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  paramDescription);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  paramDescription);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  paramDescription);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	97	None	replace
46	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	79	None	replace
47	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	79	None	replace
48	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	79	None	replace
49	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservVE(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservVE(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservVE(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	79	None	replace
50	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	13	None	replace
51	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
53	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
54	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
55	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
56	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
57	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
58	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
59	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ".getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ".getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	75	None	replace
60	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence "  +  getLineno(),  stream.getCharno());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence "  +  getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence "  +  getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	75	None	replace
61	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  	59	None	replace
62	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  	59	None	replace
63	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  	59	None	replace
64	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  document);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  document);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  document);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  	59	None	replace
65	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  line);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  	59	None	replace
66	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
67	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  LICENSE,  WhitespaceOption.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  LICENSE,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  LICENSE,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
68	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
69	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
70	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
71	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_PRESERVE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_PRESERVE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
72	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
73	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
74	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
75	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  null);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
76	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
77	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	80	None	replace
78	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  fileOverview);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	80	None	replace
79	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	80	None	replace
80	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview,  LICENSE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	80	None	replace
81	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  Preserve.LICENSE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  Preserve.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  Preserve.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	12	None	replace
83	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	12	None	replace
84	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	48	None	replace
85	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	48	None	replace
86	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  token);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  token);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	48	None	replace
87	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	48	None	replace
88	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
89	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  preserveInfo.string);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
90	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
91	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
92	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
93	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preserve.LICENSE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preserve.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preserve.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
94	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
95	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  PreserveOption.LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  PreserveOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  PreserveOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
96	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  null);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
97	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  PreserveOption.PRESERVE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  PreserveOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  PreserveOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
98	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	72	None	replace
99	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	72	None	replace
100	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	72	None	replace
101	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.FIELD_NAME,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.FIELD_NAME,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.FIELD_NAME,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	72	None	replace
102	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  this);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	6	None	replace
105	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  parser);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  parser);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  parser);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	6	None	replace
106	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	61	None	replace
107	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.SINGLE_LINE,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.SINGLE_LINE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.SINGLE_LINE,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	61	None	replace
108	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  buffer);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
109	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
110	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
111	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
112	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE,  buffer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
113	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
114	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
115	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  buffer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
116	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
117	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  buffer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  buffer);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
118	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
119	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	84	None	replace
120	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	84	None	replace
121	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	84	None	replace
122	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	41	None	replace
123	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	41	None	replace
124	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	41	None	replace
125	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	41	None	replace
126	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	41	None	replace
127	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	21	None	replace
128	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	21	None	replace
129	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.FIELD_NAME,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.FIELD_NAME,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.FIELD_NAME,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	21	None	replace
130	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	51	None	replace
131	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	51	None	replace
132	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	51	None	replace
133	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.CENTER,  true);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.CENTER,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.CENTER,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	51	None	replace
134	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	51	None	replace
135	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	55	None	replace
136	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	55	None	replace
137	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
138	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
139	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
140	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
141	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
142	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserveInfo);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	106	None	replace
143	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  line);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	106	None	replace
144	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	76	None	replace
145	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	76	None	replace
146	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	76	None	replace
147	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverviewJSDocInfo(fileOverview,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverviewJSDocInfo(fileOverview,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverviewJSDocInfo(fileOverview,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	47	None	replace
148	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineno,  WhitespaceOption.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineno,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineno,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	47	None	replace
149	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverview,  WhitespaceOption.PRESERVE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverview,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverview,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	47	None	replace
150	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	47	None	replace
151	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
152	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.label ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.label ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.label ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
153	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	31	None	replace
154	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	31	None	replace
155	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  0);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  0);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	31	None	replace
156	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	87	None	replace
157	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	87	None	replace
158	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	105	None	replace
159	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	105	None	replace
160	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	3	None	replace
161	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	3	None	replace
162	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservVE(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservVE(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservVE(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	3	None	replace
163	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	3	None	replace
164	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	3	None	replace
165	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.literal, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
166	[BUG]  [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserError( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
167	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.literal. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
168	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
169	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	28	None	replace
170	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	28	None	replace
171	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  DECLARATION);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  DECLARATION);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  DECLARATION);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	28	None	replace
172	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVETextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVETextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVETextualBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	78	None	replace
173	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERveTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERveTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERveTextualBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	78	None	replace
174	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	17	None	replace
175	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	17	None	replace
176	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.FIELD_NAME,  true);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.FIELD_NAME,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.FIELD_NAME,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	17	None	replace
177	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	93	None	replace
178	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	93	None	replace
179	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  preserveInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	93	None	replace
180	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	86	None	replace
181	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	86	None	replace
182	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Preserve.PRESERVE,  LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Preserve.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Preserve.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	63	None	replace
183	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  LICENSE,  WhitespaceOption.PRESERVE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  LICENSE,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  LICENSE,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	63	None	replace
184	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	63	None	replace
185	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
186	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespace);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespace);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespace);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
187	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
188	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRIVATE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRIVATE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRIVATE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
189	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  null,  fileOverviewJSDocInfo);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
190	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  LICENSE,  WhitespaceOption.PRESERVE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  LICENSE,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  LICENSE,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	19	None	replace
191	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	19	None	replace
192	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEPRECATED_TOKEN);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEPRECATED_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEPRECATED_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	19	None	replace
193	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Preserve.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Preserve.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Preserve.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
194	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
195	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserve(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
196	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
197	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Preconditions.LICENSE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Preconditions.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Preconditions.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
198	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  true);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
199	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	45	None	replace
200	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  null);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	45	None	replace
201	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  this);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	45	None	replace
202	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	16	None	replace
203	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	16	None	replace
204	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	16	None	replace
205	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(preserve,  WhitespaceOption.LICENSE);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(preserve,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(preserve,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
206	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.LICENSE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
207	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
208	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
209	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  PreserveOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  PreserveOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  PreserveOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
210	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.LITERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.LITERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.LITERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
211	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.whitespace   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
212	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ".getLineno(),  stream.getCharno());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ".getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.whitespace   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
213	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.whitespace   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
214	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.jsdoc.fileoverview.whitespace   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
215	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".toString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line ".toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
216	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
217	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".length(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".length(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line ".length(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
218	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
219	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	89	None	replace
220	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	89	None	replace
221	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	89	None	replace
222	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserveInfo.string);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	89	None	replace
223	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  line);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    unreadToken);    	non-compiled	[CE]  	32	None	replace
224	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    unreadToken);    	non-compiled	[CE]  	32	None	replace
225	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  prefix);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  prefix);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  prefix);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    unreadToken);    	non-compiled	[CE]  	32	None	replace
226	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	11	None	replace
227	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	11	None	replace
228	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	11	None	replace
229	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	11	None	replace
230	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  null);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	29	None	replace
231	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	18	None	replace
232	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  buffer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	18	None	replace
233	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	18	None	replace
234	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	18	None	replace
235	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  fileOverviewJSDocInfo,  buffer);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  fileOverviewJSDocInfo,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  fileOverviewJSDocInfo,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	18	None	replace
236	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Preserve.LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Preserve.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Preserve.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
237	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Preconditions.LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Preconditions.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Preconditions.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
238	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.LICENSE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
239	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
240	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  LICENSE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
241	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  preserve);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
242	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
243	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  token);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  token);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
244	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
245	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	64	None	replace
246	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
247	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserve   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	33	None	replace
248	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserve   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	33	None	replace
249	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  null);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
250	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  parser);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  parser);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  parser);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
251	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  this);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
252	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.pre ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.pre ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.pre ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.pre   "),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	101	None	replace
253	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.prefix "),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.prefix "),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.prefix "),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.pre   "),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	101	None	replace
254	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.prefix ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.prefix ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.prefix ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.pre   "),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	101	None	replace
255	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.pre-generator ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.pre-generator ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.pre-generator ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.pre   "),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	101	None	replace
256	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.prefix ", "fileoverview.pre "),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.prefix ", "fileoverview.pre "),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.prefix ", "fileoverview.pre "),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.pre   "),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	101	None	replace
257	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  buffer);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	49	None	replace
258	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  buffer);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	49	None	replace
259	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
260	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
261	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  buffer);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	49	None	replace
262	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  buffer);  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	49	None	replace
263	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  true);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
264	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  not  a  statement	26	None	replace
265	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	26	None	replace
266	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  not  a  statement	7	None	replace
267	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  	7	None	replace
268	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  preserve);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  preserve);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  not  a  statement	7	None	replace
269	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  PreserveInfo.PRESERVE);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  PreserveInfo.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  PreserveInfo.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  not  a  statement	7	None	replace
270	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  true);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  not  a  statement	30	None	replace
271	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	30	None	replace
272	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  not  a  statement	52	None	replace
273	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  Preserve.LICENSE);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  Preserve.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  Preserve.LICENSE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  not  a  statement	52	None	replace
274	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  null);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  not  a  statement	57	None	replace
275	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	57	None	replace
276	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  null);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  not  a  statement	57	None	replace
277	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.LICENSE);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  not  a  statement	77	None	replace
278	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  not  a  statement	77	None	replace
279	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  not  a  statement	90	None	replace
280	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserveInfo);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  not  a  statement	90	None	replace
281	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Document.PRESERVE,  preserveInfo);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Document.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Document.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  not  a  statement	90	None	replace
282	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE,  preserveInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	90	None	replace
283	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	92	None	replace
284	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	92	None	replace
285	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	92	None	replace
286	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	46	None	replace
287	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	46	None	replace
288	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	46	None	replace
289	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	46	None	replace
290	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  fileOverview);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	46	None	replace
291	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	46	None	replace
292	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	70	None	replace
293	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	70	None	replace
294	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  Preserve.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  	8	None	replace
295	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  	8	None	replace
296	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  Preserve.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  	8	None	replace
297	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  Preserve.PRESERVE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserve(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserve(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  	8	None	replace
298	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  SINGLE_LINE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  SINGLE_LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  SINGLE_LINE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LINE);    	non-compiled	[CE]  	88	None	replace
299	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.LINE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.LINE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LINE);    	non-compiled	[CE]  	88	None	replace
300	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.SINGLE_LINE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.SINGLE_LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.SINGLE_LINE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LINE);    	non-compiled	[CE]  	88	None	replace
301	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LINE);    	non-compiled	[CE]  	88	None	replace
302	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.extra ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.extra ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.extra ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
303	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.internal ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.internal ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.internal ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
304	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
305	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
306	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
307	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preserve.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preserve.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preserve.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
308	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	104	None	replace
309	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	104	None	replace
310	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	104	None	replace
311	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence. ",  stream.getLineno(),  stream.getCharno());  break;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence. ",  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence. ",  stream.getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  	102	None	replace
312	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".length(),  stream.getLineno(),  stream.getCharno());  break;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".length(),  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".length(),  stream.getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  	102	None	replace
313	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ",  stream.getLineno(),  stream.getCharno());  break;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ",  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence, ",  stream.getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  	102	None	replace
314	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	68	None	replace
315	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	68	None	replace
316	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	68	None	replace
317	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	68	None	replace
318	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  LICENSE,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	44	None	replace
319	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	44	None	replace
320	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	44	None	replace
321	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	43	None	replace
322	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  true);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
323	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.FIELD_NAME,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.FIELD_NAME,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.FIELD_NAME,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	43	None	replace
324	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LINE,  true);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LINE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LINE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
325	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  buffer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  fileOverviewJSDocInfo,  buffer);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
326	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
327	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  buffer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
328	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Preserve.PRESERVE,  buffer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Preserve.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Preserve.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
329	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	62	None	replace
330	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	54	None	replace
331	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false,  true);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	54	None	replace
332	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	22	None	replace
333	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TYPE);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TYPE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TYPE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  not  a  statement	22	None	replace
334	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	22	None	replace
335	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  not  a  statement	22	None	replace
336	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	82	None	replace
337	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	82	None	replace
338	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Document.PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
339	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Document.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
340	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractParser(token,  Document.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractParser(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractParser(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
341	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	10	None	replace
342	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	10	None	replace
343	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	10	None	replace
344	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	10	None	replace
345	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TYPE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TYPE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  DEFAULT_TYPE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	10	None	replace
346	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	94	None	replace
347	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	94	None	replace
348	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  not  a  statement	94	None	replace
349	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	94	None	replace
350	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	5	None	replace
351	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	5	None	replace
352	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Document.PRESERVE,  preserveInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Document.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Document.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	96	None	replace
353	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  null);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	20	None	replace
354	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  null);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  not  a  statement	20	None	replace
355	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  WhitespaceOption.PRESERVE);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	20	None	replace
356	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  parser);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  parser);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  parser);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	20	None	replace
357	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
358	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
359	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  LICENSE);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  not  a  statement	98	None	replace
360	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  fileOverview);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
361	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.DEFAULT);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.DEFAULT);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.DEFAULT);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
362	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.DEFAULT);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.DEFAULT);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.DEFAULT);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
363	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	60	None	replace
364	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  fileOverview);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  fileOverview);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  not  a  statement	60	None	replace
365	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
366	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  LICENSE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Preserve.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
367	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  LICENSE,  WhitespaceOption.PRESERVE);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  LICENSE,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  LICENSE,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
368	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
369	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  DEFAULT_TOKEN);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
370	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
371	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
372	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  false);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
373	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  null);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  null);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
374	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  fileLevelJsDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  fileLevelJsDocBuilder);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  fileLevelJsDocBuilder);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
375	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  fileOverviewJSDocInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(lineOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	67	None	replace
376	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  fileOverviewJSDocInfo.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  fileOverviewJSDocInfo.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  fileOverviewJSDocInfo.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(lineOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	67	None	replace
377	[BUG]  [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserError( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserved   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
378	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ", "fileOverview,  stream.getLineno(),  stream.getCharno());  [CE]  unclosed  string  literal  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ", "fileOverview,  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ", "fileOverview,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserved   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  unclosed  string  literal	73	None	replace
379	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserved   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
380	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	99	None	replace
381	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	99	None	replace
382	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	99	None	replace
383	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  preserveInfo.string);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  fileOverviewJSDocInfo,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	99	None	replace
384	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(line,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	99	None	replace
385	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	108	None	replace
386	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservve(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	108	None	replace
387	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  preserveInfo.string);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	108	None	replace
388	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  FileLevelJsDocBuilder.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	71	None	replace
389	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	71	None	replace
390	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  not  a  statement	71	None	replace
391	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileLevelJsDocBuilder);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileLevelJsDocBuilder);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileLevelJsDocBuilder);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  not  a  statement	71	None	replace
392	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  not  a  statement	71	None	replace
393	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE,  fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  Preserve.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  not  a  statement	71	None	replace
394	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  not  a  statement	109	None	replace
395	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Document.PRESERVE,  preserveInfo);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Document.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Document.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  not  a  statement	109	None	replace
396	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  true);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
397	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.LICENSE,  true);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  not  a  statement	51	None	replace
398	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserveInfo.string);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	108	None	replace
399	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	108	None	replace
400	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  not  a  statement	108	None	replace
401	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  sourceLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  sourceLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  sourceLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserved   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	73	None	replace
402	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(preserve,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(preserve,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(preserve,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  not  a  statement	44	None	replace
403	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  not  a  statement	44	None	replace
404	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	20	None	replace
405	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  this);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	20	None	replace
406	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
407	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  buffer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	24	None	replace
408	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	26	None	replace
409	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserveInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	109	None	replace
410	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  paramDescription);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  paramDescription);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  paramDescription);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	109	None	replace
411	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  line);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  orphaned  case	109	None	replace
412	[BUG]  [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserError( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	75	None	replace
413	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getlineno(),  stream.getCharno());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getlineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getlineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	75	None	replace
414	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Predicates.LICENSE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Predicates.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Predicates.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
415	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preconditions.LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preconditions.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Preconditions.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
416	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LICENSE,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LICENSE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LICENSE,  false);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	54	None	replace
417	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preview ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preview ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.pre   "),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	101	None	replace
418	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LINE,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LINE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LINE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	17	None	replace
419	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview  +  1);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview  +  1);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  orphaned  case	69	None	replace
420	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	103	None	replace
421	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo.string);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
422	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LINE,  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LINE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LINE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	79	None	replace
423	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
424	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
425	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  whitespaceOption.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  whitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
426	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	56	None	replace
427	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	56	None	replace
428	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	5	None	replace
429	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescriptionInfo);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescriptionInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescriptionInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  orphaned  case	93	None	replace
430	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  orphaned  case	93	None	replace
431	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.LICENSE);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  orphaned  case	15	None	replace
432	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Predicates.LICENSE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Predicates.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Predicates.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  orphaned  case	15	None	replace
433	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	65	None	replace
434	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
435	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  orphaned  case	42	None	replace
436	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEFAULT_NAME);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	19	None	replace
437	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  null,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  null,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  null,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	6	None	replace
438	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	6	None	replace
439	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	71	None	replace
440	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(line,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	71	None	replace
441	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
442	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
443	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescription);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescription);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescription);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	58	None	replace
444	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
445	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
446	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
447	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
448	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.string ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.string ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.string ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
449	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.property ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.property ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.property ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
450	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.string ", "fileoverview.precedence.   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.string ", "fileoverview.precedence.   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.string ", "fileoverview.precedence.   ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
451	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	72	None	replace
452	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.LICENSE);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	84	None	replace
453	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview  +  1);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	80	None	replace
454	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	83	None	replace
455	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  orphaned  case	30	None	replace
456	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescription);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescription);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  paramDescription);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  orphaned  case	41	None	replace
457	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.original ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.original ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.original ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
458	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
459	[BUG]  [BUGGY]  parser.addParser( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParser( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParser( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
460	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
461	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
462	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
463	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	107	None	replace
464	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	89	None	replace
465	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  Document.PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreviousPrinter(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
466	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrecedingRc(token,  Document.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrecedingRc(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrecedingRc(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
467	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  sourceName);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  sourceName);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  sourceName);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    unreadToken);    	non-compiled	[CE]  	32	None	replace
468	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	86	None	replace
469	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	61	None	replace
470	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ", "fileoverview.lineno ",  stream.getCharno());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ", "fileoverview.lineno ",  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ", "fileoverview.lineno ",  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserve   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
471	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	92	None	replace
472	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  null,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	92	None	replace
473	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  this);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	57	None	replace
474	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	57	None	replace
475	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
476	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Predicates.NEW_TOKEN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Predicates.NEW_TOKEN);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Predicates.NEW_TOKEN);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
477	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
478	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
479	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  line);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	62	None	replace
480	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(buffer,  WhitespaceOption.PRESERVE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(buffer,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(buffer,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
481	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
482	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
483	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
484	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  paramDescription);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  paramDescription);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  paramDescription);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	106	None	replace
485	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRIVATE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRIVATE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRIVATE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	12	None	replace
486	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
487	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
488	[BUG]  [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.precedence.precedence ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.precedence.precedence ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserError( "msg.jsdoc.fileoverview.precedence.precedence ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
489	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
490	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence ".getLineno(),  stream.getCharno());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence ".getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
491	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LINE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LINE);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
492	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
493	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE  +  1);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	81	None	replace
494	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  WhitespaceOption.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  null,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	45	None	replace
495	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	45	None	replace
496	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
497	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  ParserOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  ParserOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  ParserOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
498	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	55	None	replace
499	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LONG);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LONG);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LONG);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	13	None	replace
500	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LINE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LINE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	13	None	replace
501	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LEFT);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LEFT);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LEFT);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	13	None	replace
502	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getLineno(),  stream.getCharno());  break;  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  orphaned  case	102	None	replace
503	[BUG]  [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  break;  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserError( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserError( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  orphaned  case	102	None	replace
504	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.LICENSE,  parser);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.LICENSE,  parser);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.LICENSE,  parser);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  orphaned  case	59	None	replace
505	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileLevelJsDocBuilder);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileLevelJsDocBuilder);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  orphaned  case	59	None	replace
506	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	48	None	replace
507	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  orphaned  case	48	None	replace
508	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  orphaned  case	18	None	replace
509	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  orphaned  case	18	None	replace
510	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  preserveInfo);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  orphaned  case	90	None	replace
511	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  line);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  orphaned  case	90	None	replace
512	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	47	None	replace
513	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	47	None	replace
514	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  null);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	11	None	replace
515	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
516	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
517	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  orphaned  case	21	None	replace
518	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line-overview ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line-overview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line-overview ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	35	None	replace
519	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  LICENSE);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  orphaned  case	7	None	replace
520	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  preserveInfo);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  orphaned  case	7	None	replace
521	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Preconditions.PRESERVE);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Preconditions.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Preconditions.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    LICENSE);    	non-compiled	[CE]  orphaned  case	7	None	replace
522	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LINE,  false);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LINE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LINE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  orphaned  case	68	None	replace
523	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LINE,  true);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LINE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LINE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  orphaned  case	3	None	replace
524	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  orphaned  case	76	None	replace
525	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservePrinter(token,  Preserve.PRESERVE);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservePrinter(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservePrinter(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  orphaned  case	8	None	replace
526	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservePrettyPrinter(token,  Preserve.PRESERVE);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreservePrettyPrinter(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreservePrettyPrinter(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  orphaned  case	8	None	replace
527	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	99	None	replace
528	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  FileLevelJsDocBuilder.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	99	None	replace
529	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  line);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  line);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  line);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  orphaned  case	96	None	replace
530	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LINE);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LINE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	77	None	replace
531	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	10	None	replace
532	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	10	None	replace
533	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  orphaned  case	98	None	replace
534	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT  +  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT  +  1);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  orphaned  case	98	None	replace
535	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT)+  1;  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT)+  1;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT)+  1;	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  orphaned  case	98	None	replace
536	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  null);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  null);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  orphaned  case	98	None	replace
537	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LINE);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LINE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	82	None	replace
538	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	105	None	replace
539	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	105	None	replace
540	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	63	None	replace
541	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  null,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	63	None	replace
542	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	63	None	replace
543	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  LINE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  LINE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	63	None	replace
544	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  orphaned  case	31	None	replace
545	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
546	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  null);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
547	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  orphaned  case	4	None	replace
548	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverview,  null);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
549	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverviewJSDocInfo,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverviewJSDocInfo,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(fileOverviewJSDocInfo,  null);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    null);    	non-compiled	[CE]  	85	None	replace
550	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	70	None	replace
551	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    false);    	non-compiled	[CE]  	70	None	replace
552	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LICENSE,  true);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	27	None	replace
553	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  buffer);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	94	None	replace
554	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  preserveInfo.string);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
555	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
556	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  token);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE,  token);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
557	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
558	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverviewJSDocInfo,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	66	None	replace
559	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	106	None	replace
560	[BUG]  [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverviewInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	51	None	replace
561	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  PreserveOption.LICENSE);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  PreserveOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  PreserveOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
562	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(lineno,  WhitespaceOption.LICENSE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(lineno,  WhitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(lineno,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
563	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	40	None	replace
564	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  DETERMINATED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  DETERMINATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  DETERMINATED);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	63	None	replace
565	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	63	None	replace
566	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer,  preserve);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	31	None	replace
567	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	48	None	replace
568	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Document.PRESERVE,  preserveInfo.string);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Document.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Document.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	92	None	replace
569	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.default ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.default ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.default ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
570	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getMessage(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getMessage(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getMessage(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	34	None	replace
571	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LINE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LINE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LINE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LINE);    	non-compiled	[CE]  	88	None	replace
572	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Document.PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LINE);    	non-compiled	[CE]  	88	None	replace
573	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
574	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  PreserveInfo.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  PreserveInfo.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE,  PreserveInfo.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	23	None	replace
575	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  document);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  document);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  document);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    unreadToken);    	non-compiled	[CE]  	32	None	replace
576	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	109	None	replace
577	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.expected ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.expected ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.expected ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
578	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  whitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	90	None	replace
579	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(lineno,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(lineno,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(lineno,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	90	None	replace
580	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserveInfo);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	90	None	replace
581	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.previous ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.previous ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.previous ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	75	None	replace
582	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
583	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	49	None	replace
584	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	57	None	replace
585	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    whitespaceOption.PRESERVE);    	non-compiled	[CE]  	84	None	replace
586	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	95	None	replace
587	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPrettyPrinter(token,  Preserve.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPrettyPrinter(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPrettyPrinter(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  	8	None	replace
588	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  Preserve.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  Preserve.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Preserve.PRESERVE);    	non-compiled	[CE]  	8	None	replace
589	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	6	None	replace
590	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Preserve.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
591	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	56	None	replace
592	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  whitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	96	None	replace
593	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  paramDescription);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  paramDescription);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  paramDescription);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	96	None	replace
594	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  documentInfo);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  documentInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  documentInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	96	None	replace
595	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  true);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
596	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    PreserveInfo.DEFAULT);    	non-compiled	[CE]  	98	None	replace
597	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	12	None	replace
598	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  PreserveInfo.PRESERVE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  PreserveInfo.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE,  PreserveInfo.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	12	None	replace
599	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLiteralTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLiteralTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLiteralTextualBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	27	None	replace
600	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	11	None	replace
601	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  this);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  this);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  this);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	11	None	replace
602	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_PREFIX);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_PREFIX);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  DEFAULT_PREFIX);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	5	None	replace
603	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  PREFERENCE);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  PREFERENCE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  PREFERENCE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	10	None	replace
604	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserve   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  	39	None	replace
605	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	18	None	replace
606	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
607	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	50	None	replace
608	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Document.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Document.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  Document.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	100	None	replace
609	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	41	None	replace
610	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Document.LICENSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Document.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  Document.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	1	None	replace
611	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	108	None	replace
612	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	108	None	replace
613	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  buffer);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  buffer);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	71	None	replace
614	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	4	None	replace
615	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	44	None	replace
616	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	44	None	replace
617	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE,  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	28	None	replace
618	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE,  PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE,  PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE,  PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	28	None	replace
619	[BUG]  [BUGGY]  ExtractionInfo  archiveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  archiveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  archiveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE,    true);    	non-compiled	[CE]  	9	None	replace
620	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  ParserOption.PRESERVE,  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  ParserOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  ParserOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	104	None	replace
621	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	104	None	replace
622	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Document.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Document.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Document.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	83	None	replace
623	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPrettyPrinter(token,  Document.PRESERVE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractPrettyPrinter(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractPrettyPrinter(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
624	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPrettyPrinter(token,  Document.PRESERVE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPrettyPrinter(token,  Document.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPrettyPrinter(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    Document.PRESERVE);    	non-compiled	[CE]  	91	None	replace
625	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".getString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ".getString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line ".getString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
626	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.jsdoc.fileoverview.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	35	None	replace
627	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview,  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	60	None	replace
628	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	60	None	replace
629	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.default ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.default ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.default ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.preserve   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	33	None	replace
630	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
631	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  preserveInfo.string);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  	103	None	replace
632	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser,  fileOverviewJSDocInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    parser);    	non-compiled	[CE]  	59	None	replace
633	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	22	None	replace
634	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  	22	None	replace
635	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	69	None	replace
636	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  	69	None	replace
637	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.PRESERVE,  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  ParserOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	16	None	replace
638	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Document.PRESERVE,  preserveInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Document.PRESERVE,  preserveInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  Document.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo);    	non-compiled	[CE]  	93	None	replace
639	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    buffer);    	non-compiled	[CE]  	42	None	replace
640	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	25	None	replace
641	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    null);    	non-compiled	[CE]  	45	None	replace
642	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  blockInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
643	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo,  null);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
644	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  Document.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE,    fileOverviewJSDocInfo);    	non-compiled	[CE]  	64	None	replace
645	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Document.LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Document.LICENSE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  Document.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	15	None	replace
646	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getMessage(),  stream.getLineno(),  stream.getCharno());  break;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getMessage(),  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getMessage(),  stream.getLineno(),  stream.getCharno());  break;	  parser.addParserWarning(   "msg.jsdoc.fileoverview.precedence   ",    stream.getLineno(),    stream.getCharno());    break;    	non-compiled	[CE]  	102	None	replace
647	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.PRESERVE,  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.PRESERVE,  preserve);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserve);    	non-compiled	[CE]  	2	None	replace
648	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	99	None	replace
649	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  ParserOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  ParserOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  ParserOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	99	None	replace
650	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno()));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno()));  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno()));	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
651	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getCharno(),  stream.getLineno());  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.jsdoc.fileoverview.literal   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	37	None	replace
652	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  whitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	105	None	replace
653	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  ParserOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	105	None	replace
654	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserveInfo.string);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  ParserOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE,    preserveInfo.string);    	non-compiled	[CE]  orphaned  case	89	None	replace
655	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE,    fileOverview);    	non-compiled	[CE]  orphaned  case	80	None	replace
656	[BUG]  [BUGGY]  ExtractionInfo  fileOverview  =  extractFileOverview(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileOverview  =  extractFileOverview(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileOverview  =  extractFileOverview(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(fileOverview,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	47	None	replace
657	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  whitespace);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  whitespace);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  whitespace);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	19	None	replace
658	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEPRECATED);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  DEPRECATED);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	19	None	replace
659	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  LICENSE,  true);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  LICENSE,  true);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  LICENSE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE,    LICENSE);    	non-compiled	[CE]  orphaned  case	19	None	replace
660	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractHighlineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractHighlineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractHighlineTextualBlock(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	81	None	replace
661	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractFileOverviewJSDocInfo(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(     "msg.jsdoc.fileoverview.extra     ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:      [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractFileOverviewJSDocInfo(token,  WhitespaceOption.PRESERVE);  [BUGGY]      extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractFileOverviewJSDocInfo(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    fileLevelJsDocBuilder    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	81	None	replace
