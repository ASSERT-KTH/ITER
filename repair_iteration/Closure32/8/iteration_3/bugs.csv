bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  builder.append( ":no-line. ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":no-line. ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":no-line. ");	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  builder.append( ":no-line ",  option);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":no-line ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":no-line ",  option);	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  builder.append( ":no-line ").append(option);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":no-line ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":no-line ").append(option);	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  builder.append( ":no-line ",  true);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":no-line ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":no-line ",  true);	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "EOL: ").append(option).append('n');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "EOL: ").append(option).append('n');  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "EOL: ").append(option).append('n');  }	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
6	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "EOL: ").append(option).append('n');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "EOL: ").append(option).append('n');  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "EOL: ").append(option).append('n');  }	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
7	[BUG]  [BUGGY]  builder.append( "#n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "#n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "#n ");	  builder.append(   "#   ");    	non-compiled	[CE]  	19	None	replace
8	[BUG]  [BUGGY]  builder.append( "&# ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&# ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&# ");	  builder.append(   "#   ");    	non-compiled	[CE]  	19	None	replace
9	[BUG]  [BUGGY]  builder.append( "&nbsp; ",  false);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&nbsp; ",  false);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&nbsp; ",  false);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
10	[BUG]  [BUGGY]  builder.append( "&lt; ",  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt; ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt; ",  true);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
11	[BUG]  [BUGGY]  builder.append( "&amp; ",  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&amp; ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&amp; ",  true);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
12	[BUG]  [BUGGY]  builder.append( "&nbsp; ", "&nbsp; ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&nbsp; ", "&nbsp; ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&nbsp; ", "&nbsp; ");	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
13	[BUG]  [BUGGY]  builder.append( "&#39; ",  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39; ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39; ",  true);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
14	[BUG]  [BUGGY]  builder.append( "SEARCHING_ANNOTATION: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SEARCHING_ANNOTATION: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SEARCHING_ANNOTATION: ");	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
15	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
16	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
17	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: "  +  option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION: "  +  option);	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
18	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION: ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
19	[BUG]  [BUGGY]  bucketBuilder.append( "no-line ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "no-line ");	  bucketBuilder.append(   "no   ");    	non-compiled	[CE]  	116	None	replace
20	[BUG]  [BUGGY]  bucketBuilder.append( "no_line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "no_line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "no_line ");	  bucketBuilder.append(   "no   ");    	non-compiled	[CE]  	116	None	replace
21	[BUG]  [BUGGY]  jsdocBuilder.append( "no-line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  jsdocBuilder.append( "no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	jsdocBuilder.append( "no-line ");	  bucketBuilder.append(   "no   ");    	non-compiled	[CE]  	116	None	replace
22	[BUG]  [BUGGY]  bucketBuilder.append( "no_unREAD_TOKEN ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "no_unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "no_unREAD_TOKEN ");	  bucketBuilder.append(   "no   ");    	non-compiled	[CE]  	116	None	replace
23	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getText());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getText());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  builder.append( "n ").equals(option.getText());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").equals(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").equals(option.getText());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  builder.append( "SINGLE: ").equals(option.getText());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ").equals(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ").equals(option.getText());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLineno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLineno());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLineno());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  builder.append( "Single: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Single: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Single: ");	  builder.append(   "SINGLE:   ");    	non-compiled	[CE]  	42	None	replace
28	[BUG]  [BUGGY]  builder.append( "JsDocToken: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "JsDocToken: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "JsDocToken: ");	  builder.append(   "SINGLE:   ");    	non-compiled	[CE]  	42	None	replace
29	[BUG]  [BUGGY]  builder.append( "SINGLE: ").append(option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ").append(option);	  builder.append(   "SINGLE:   ");    	non-compiled	[CE]  	42	None	replace
30	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getValue());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getValue());	  builder.append(   "EOL:   ").equals(option.getValue());    	non-compiled	[CE]  	24	None	replace
31	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getKey());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getKey());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getKey());	  builder.append(   "EOL:   ").equals(option.getValue());    	non-compiled	[CE]  	24	None	replace
32	[BUG]  [BUGGY]  builder.append( "n ").equals(option.getValue());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").equals(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").equals(option.getValue());	  builder.append(   "EOL:   ").equals(option.getValue());    	non-compiled	[CE]  	24	None	replace
33	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getValue()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getValue()));	  builder.append(   "EOL:   ").equals(option.getValue()));    	non-compiled	[CE]  	89	None	replace
34	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLineno()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLineno()));	  builder.append(   "EOL:   ").equals(option.getValue()));    	non-compiled	[CE]  	89	None	replace
35	[BUG]  [BUGGY]  builder.append( "SEARCHING_NEWLINE: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SEARCHING_NEWLINE: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SEARCHING_NEWLINE: ");	  builder.append(   "NEXT:   ");    	non-compiled	[CE]  	103	None	replace
36	[BUG]  [BUGGY]  builder.append( "NEXT: ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT: ").append(option);	  builder.append(   "NEXT:   ");    	non-compiled	[CE]  	103	None	replace
37	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  options;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  options;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  options;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  Option.NEW_IS_ANNOTATION;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  Option.NEW_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  Option.NEW_IS_ANNOTATION;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  Option.NEXT_IS_ANNOTATION;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  Option.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  Option.NEXT_IS_ANNOTATION;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  token;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  token;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  token;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  EOL;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  EOL;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  EOL;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
44	[BUG]  [BUGGY]  builder.append( "&amp; ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&amp; ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&amp; ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
45	[BUG]  [BUGGY]  builder.append( "&#160;n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#160;n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#160;n ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
46	[BUG]  [BUGGY]  builder.append( "&apos; ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&apos; ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&apos; ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
47	[BUG]  [BUGGY]  builder.append( "&#44;n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#44;n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#44;n ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
48	[BUG]  [BUGGY]  builder.append( "&#64;n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#64;n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#64;n ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
49	[BUG]  [BUGGY]  builder.append( ";EOL: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";EOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";EOL: ");	  builder.append(   ",EOL:   ");    	non-compiled	[CE]  	104	None	replace
50	[BUG]  [BUGGY]  builder.append( ",EOL: ").append(option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ",EOL: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ",EOL: ").append(option);	  builder.append(   ",EOL:   ");    	non-compiled	[CE]  	104	None	replace
51	[BUG]  [BUGGY]  builder.append( "[EOL: ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[EOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[EOL: ");	  builder.append(   ",EOL:   ");    	non-compiled	[CE]  	104	None	replace
52	[BUG]  [BUGGY]  builder.append( "; ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "; ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "; ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	26	None	replace
53	[BUG]  [BUGGY]  builder.append( ";eOL: ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";eOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";eOL: ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	26	None	replace
54	[BUG]  [BUGGY]  builder.append( ";no ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";no ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";no ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  builder.append( ";label ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";label ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";label ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	26	None	replace
56	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
57	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
60	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  ignoreStar  =  false;  }	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
61	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  ignoreStar  =  true;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  ignoreStar  =  true;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "] ");  }  else  {  ignoreStar  =  true;  }	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
62	[BUG]  [BUGGY]  builder.append( "NoEOL ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NoEOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NoEOL ");	  builder.append(   "noEOL   ");    	non-compiled	[CE]  	79	None	replace
63	[BUG]  [BUGGY]  builder.append( "None ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "None ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "None ");	  builder.append(   "noEOL   ");    	non-compiled	[CE]  	79	None	replace
64	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "* ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "* ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "* ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
65	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "SINGLE_LINE ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "SINGLE_LINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "SINGLE_LINE ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
66	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "EOL: ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "EOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "EOL: ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
67	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "EOL ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "EOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "EOL ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
68	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "] ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "] ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
69	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "SINGLE_LINE: ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "SINGLE_LINE: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "SINGLE_LINE: ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
70	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
71	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
72	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
73	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  token  =  next();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  token  =  next();  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  token  =  next();  }	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
75	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ": ");  }  else  {  ignoreStar  =  false;  }	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
76	[BUG]  [BUGGY]  builder.append( "SINGLE: ".equals(option.getText()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ".equals(option.getText()));	  builder.append(   "eOL:   ".equals(option.getText()));    	non-compiled	[CE]  	111	None	replace
77	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getKey()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getKey()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getKey()));	  builder.append(   "EOL:   ".equals(option.getValue()));    	non-compiled	[CE]  	21	None	replace
78	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getLineno()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getLineno()));	  builder.append(   "EOL:   ".equals(option.getValue()));    	non-compiled	[CE]  	21	None	replace
79	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getLabel()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getLabel()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getLabel()));	  builder.append(   "EOL:   ".equals(option.getValue()));    	non-compiled	[CE]  	21	None	replace
80	[BUG]  [BUGGY]  builder.append( "EOL ").append(option.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option.getText());	  builder.append(   "EOL       ".equals(option.getText()));    	non-compiled	[CE]  	3	None	replace
81	[BUG]  [BUGGY]  builder.append( "EOLn ".equals(option.getText()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOLn ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOLn ".equals(option.getText()));	  builder.append(   "EOL       ".equals(option.getText()));    	non-compiled	[CE]  	3	None	replace
82	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getLongValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getLongValue());	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
83	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumber()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLineNumber()));	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
84	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getLongValue()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getLongValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getLongValue()));	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
85	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumberValue()));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumberValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLineNumberValue()));	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
86	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getEOLValue()));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getEOLValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getEOLValue()));	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
87	[BUG]  [BUGGY]  builder.append( "[EOL] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[EOL] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[EOL] ");	  builder.append(   "*   ");    	non-compiled	[CE]  	18	None	replace
88	[BUG]  [BUGGY]  builder.append( "u ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "u ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "u ");	  builder.append(   "*   ");    	non-compiled	[CE]  	18	None	replace
89	[BUG]  [BUGGY]  Builder.append( "EOL:  no_UNREAD_TOKEN ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOL:  no_UNREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOL:  no_UNREAD_TOKEN ");	  Builder.append(   "no_UNREAD_TOKEN   ");    	non-compiled	[CE]  	88	None	replace
90	[BUG]  [BUGGY]  Builder.append( "SINGLE_LINE ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "SINGLE_LINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "SINGLE_LINE ");	  Builder.append(   "no_UNREAD_TOKEN   ");    	non-compiled	[CE]  	88	None	replace
91	[BUG]  [BUGGY]  Builder.append( "Single_line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "Single_line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "Single_line ");	  Builder.append(   "no_UNREAD_TOKEN   ");    	non-compiled	[CE]  	88	None	replace
92	[BUG]  [BUGGY]  Builder.append( "no_UNREAD_TOKEN: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no_UNREAD_TOKEN: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no_UNREAD_TOKEN: ");	  Builder.append(   "no_UNREAD_TOKEN   ");    	non-compiled	[CE]  	88	None	replace
93	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  -  1;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  -  1;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
94	[BUG]  [BUGGY]  state  =  State.SEARCHING_EOL;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_EOL;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_EOL;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  builder.append( "* ").append(option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "* ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "* ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
96	[BUG]  [BUGGY]  builder.append( "# ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
97	[BUG]  [BUGGY]  builder.append( "&nbsp;n ").append(option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&nbsp;n ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&nbsp;n ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
98	[BUG]  [BUGGY]  builder.append( "EOL ").append(option);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
99	[BUG]  [BUGGY]  builder.append( "n ".append(option).append( "n ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ".append(option).append( "n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ".append(option).append( "n ");	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
100	[BUG]  [BUGGY]  token  =  next();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  token  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	token  =  next();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
101	[BUG]  [BUGGY]  parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
102	[BUG]  [BUGGY]  parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
103	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getType()  ==  Token.EOL)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  parent  ==  null  ||  parent.getType()  ==  Token.EOL)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	parent  ==  null  ||  parent.getType()  ==  Token.EOL)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
104	[BUG]  [BUGGY]  parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	parent  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
105	[BUG]  [BUGGY]  token  =  next();  continue;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  token  =  next();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	token  =  next();  continue;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
106	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	66	None	replace
107	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  null;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  null;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  null;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	66	None	replace
108	[BUG]  [BUGGY]  builder.append( "&lt; ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt; ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt; ");	  builder.append(   "&lt;n   ");    	non-compiled	[CE]  	53	None	replace
109	[BUG]  [BUGGY]  builder.append( "&lt;no ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;no ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;no ");	  builder.append(   "&lt;n   ");    	non-compiled	[CE]  	53	None	replace
110	[BUG]  [BUGGY]  builder.append( "Single  line: ".equals(option.getSingleLine()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Single  line: ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Single  line: ".equals(option.getSingleLine()));	  builder.append(   "eOL:   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	101	None	replace
111	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getSINGLE_LINE()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getSINGLE_LINE()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getSINGLE_LINE()));	  builder.append(   "eOL:   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	101	None	replace
112	[BUG]  [BUGGY]  Builder.append( "no_line ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no_line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no_line ");	  Builder.append(   "no   ");    	non-compiled	[CE]  	91	None	replace
113	[BUG]  [BUGGY]  Builder.append( "None ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "None ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "None ");	  Builder.append(   "no   ");    	non-compiled	[CE]  	91	None	replace
114	[BUG]  [BUGGY]  Builder.append( "unreachable ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "unreachable ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "unreachable ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
115	[BUG]  [BUGGY]  Builder.append( "reachable ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "reachable ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "reachable ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
116	[BUG]  [BUGGY]  Builder.append( "eOL:  no_unreachable ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL:  no_unreachable ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL:  no_unreachable ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
117	[BUG]  [BUGGY]  Builder.append( "msg.not.unreachable ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.not.unreachable ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.not.unreachable ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
118	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getLineNumber()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getLineNumber()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
119	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getLineno()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getLineno()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
120	[BUG]  [BUGGY]  builder.append( "No-line ".equals(option.getLongValue()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "No-line ".equals(option.getLongValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "No-line ".equals(option.getLongValue()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
121	[BUG]  [BUGGY]  builder.append( "no-line ").append(option.getLongValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ").append(option.getLongValue());	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
122	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getLongValue()  +  1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getLongValue()  +  1));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getLongValue()  +  1));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
123	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getLineNumberValue()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getLineNumberValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getLineNumberValue()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
124	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_NEWLINE;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_NEWLINE;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_NEWLINE;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
125	[BUG]  [BUGGY]  State  state  =  State.NEXT_IS_ANNOTATION;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.NEXT_IS_ANNOTATION;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
126	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  +  1;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION  +  1;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
127	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_EOL;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_EOL;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_EOL;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
128	[BUG]  [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
129	[BUG]  [BUGGY]  While(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
130	[BUG]  [BUGGY]  While(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
131	[BUG]  [BUGGY]  While(state  ==  State.SEARCHING_ANNOTATION)  {  if(!ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state  ==  State.SEARCHING_ANNOTATION)  {  if(!ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state  ==  State.SEARCHING_ANNOTATION)  {  if(!ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
132	[BUG]  [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".);  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
133	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "no   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	110	None	replace
134	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no  line ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no  line ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no  line ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "no   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	110	None	replace
135	[BUG]  [BUGGY]  Builder.append( "EOL: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOL: ");	  Builder.append(   "n   ");    	non-compiled	[CE]  	14	None	replace
136	[BUG]  [BUGGY]  Builder.append( "SINGLE_LINE: ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "SINGLE_LINE: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "SINGLE_LINE: ");	  Builder.append(   "n   ");    	non-compiled	[CE]  	14	None	replace
137	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  continue;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION;  continue;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	96	None	replace
138	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  continue;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION;  continue;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	96	None	replace
139	[BUG]  [BUGGY]  builder.append( "[null] ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[null] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[null] ");	  builder.append(   ":null   ");    	non-compiled	[CE]  	86	None	replace
140	[BUG]  [BUGGY]  builder.append( "EOL:null ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:null ");	  builder.append(   ":null   ");    	non-compiled	[CE]  	86	None	replace
141	[BUG]  [BUGGY]  bucketBuilder.append( "EOL ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "EOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "EOL ");	  bucketBuilder.append(   "n   ");    	non-compiled	[CE]  	115	None	replace
142	[BUG]  [BUGGY]  jsdocBuilder.append( "n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  jsdocBuilder.append( "n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	jsdocBuilder.append( "n ");	  bucketBuilder.append(   "n   ");    	non-compiled	[CE]  	115	None	replace
143	[BUG]  [BUGGY]  jsdocBuilder.append( "null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  jsdocBuilder.append( "null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	jsdocBuilder.append( "null ");	  bucketBuilder.append(   "n   ");    	non-compiled	[CE]  	115	None	replace
144	[BUG]  [BUGGY]  bucketBuilder.append( "# ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "# ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "# ");	  bucketBuilder.append(   "n   ");    	non-compiled	[CE]  	115	None	replace
145	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "not-line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "not-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "not-line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
146	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "no-line: ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "no-line: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "no-line: ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
147	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "#-line ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "#-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "#-line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
148	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "NO-LINE ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "NO-LINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "NO-LINE ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
149	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "no-line  line ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "no-line  line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "no-line  line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
150	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "#line ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "#line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "#line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
151	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getStringValue()));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getStringValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getStringValue()));	  builder.append(   "eOL:   ".equals(option.getLongValue()));    	non-compiled	[CE]  	118	None	replace
152	[BUG]  [BUGGY]  builder.append( "eOL: ".equals(option.getEOLValue()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ".equals(option.getEOLValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ".equals(option.getEOLValue()));	  builder.append(   "eOL:   ".equals(option.getLongValue()));    	non-compiled	[CE]  	118	None	replace
153	[BUG]  [BUGGY]  Builder  builder  =  new  JsDocTokenBuilder();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JsDocTokenBuilder();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JsDocTokenBuilder();	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
154	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(token);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(token);	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
155	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(token.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(token.length());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(token.length());	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
156	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(16);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(16);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(16);	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
157	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(32);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(32);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(32);	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
158	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(length());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(length());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(length());	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
159	[BUG]  [BUGGY]  builder.append( "&#39; ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39; ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39; ");	  builder.append(   "&#39;n   ");    	non-compiled	[CE]  	56	None	replace
160	[BUG]  [BUGGY]  builder.append( "&#39;eOL ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;eOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;eOL ");	  builder.append(   "&#39;n   ");    	non-compiled	[CE]  	56	None	replace
161	[BUG]  [BUGGY]  builder.append( "&#39;unreadToken ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;unreadToken ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;unreadToken ");	  builder.append(   "&#39;n   ");    	non-compiled	[CE]  	56	None	replace
162	[BUG]  [BUGGY]  builder.append( "&#39;eOL= ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;eOL= ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;eOL= ");	  builder.append(   "&#39;n   ");    	non-compiled	[CE]  	56	None	replace
163	[BUG]  [BUGGY]  builder.append( "&#39;disabled ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;disabled ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;disabled ");	  builder.append(   "&#39;n   ");    	non-compiled	[CE]  	56	None	replace
164	[BUG]  [BUGGY]  builder.append( "&#39;no ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;no ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;no ");	  builder.append(   "&#39;n   ");    	non-compiled	[CE]  	56	None	replace
165	[BUG]  [BUGGY]  builder.append( "EOL: ").append(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(token);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(token);	  builder.append(   "EOL:   ").append(option);    	non-compiled	[CE]  	43	None	replace
166	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option  +  1);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option  +  1);	  builder.append(   "EOL:   ").append(option);    	non-compiled	[CE]  	43	None	replace
167	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getLineNumber()));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getLineNumber()));	  builder.append(   "EOL:   ".equals(option.getLongValue()));    	non-compiled	[CE]  	57	None	replace
168	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getEOLValue()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getEOLValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getEOLValue()));	  builder.append(   "EOL:   ".equals(option.getLongValue()));    	non-compiled	[CE]  	57	None	replace
169	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getText()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getText()));	  builder.append(   "EOL:   ").equals(option.getText()));    	non-compiled	[CE]  	78	None	replace
170	[BUG]  [BUGGY]  builder.append( "n ").equals(option.getText()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").equals(option.getText()));	  builder.append(   "EOL:   ").equals(option.getText()));    	non-compiled	[CE]  	78	None	replace
171	[BUG]  [BUGGY]  builder.append( "EOL ").append(option.getSingleLine());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option.getSingleLine());	  builder.append(   "EOL       ".equals(option.getSingleLine()));    	non-compiled	[CE]  	34	None	replace
172	[BUG]  [BUGGY]  builder.append( "EOLn ".equals(option.getSingleLine()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOLn ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOLn ".equals(option.getSingleLine()));	  builder.append(   "EOL       ".equals(option.getSingleLine()));    	non-compiled	[CE]  	34	None	replace
173	[BUG]  [BUGGY]  builder.append( "&lt;-- ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;-- ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;-- ");	  builder.append(   "&nbsp;--   ");    	non-compiled	[CE]  	73	None	replace
174	[BUG]  [BUGGY]  builder.append( "&amp;-- ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&amp;-- ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&amp;-- ");	  builder.append(   "&nbsp;--   ");    	non-compiled	[CE]  	73	None	replace
175	[BUG]  [BUGGY]  builder.append( ";-- ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";-- ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";-- ");	  builder.append(   "&nbsp;--   ");    	non-compiled	[CE]  	73	None	replace
176	[BUG]  [BUGGY]  builder.append( "&#39;-- ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;-- ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;-- ");	  builder.append(   "&nbsp;--   ");    	non-compiled	[CE]  	73	None	replace
177	[BUG]  [BUGGY]  builder.append( "&-- ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&-- ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&-- ");	  builder.append(   "&nbsp;--   ");    	non-compiled	[CE]  	73	None	replace
178	[BUG]  [BUGGY]  builder.append( "-- ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "-- ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "-- ");	  builder.append(   "&nbsp;--   ");    	non-compiled	[CE]  	73	None	replace
179	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumber());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumber());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLineNumber());	  builder.append(   "EOL:   ").equals(option.getLongValue());    	non-compiled	[CE]  	60	None	replace
180	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumberValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLineNumberValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLineNumberValue());	  builder.append(   "EOL:   ").equals(option.getLongValue());    	non-compiled	[CE]  	60	None	replace
181	[BUG]  [BUGGY]  Builder  builder.append( "EOL: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "EOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "EOL: ");	  Builder    builder.append(   "EOL   ");    	non-compiled	[CE]  	46	None	replace
182	[BUG]  [BUGGY]  Builder  builder.append( "SINGLE_LINE ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "SINGLE_LINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "SINGLE_LINE ");	  Builder    builder.append(   "EOL   ");    	non-compiled	[CE]  	46	None	replace
183	[BUG]  [BUGGY]  Builder  builder.append( "EOLn ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "EOLn ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "EOLn ");	  Builder    builder.append(   "EOL   ");    	non-compiled	[CE]  	46	None	replace
184	[BUG]  [BUGGY]  tate  =  State.SEARCHING_NEWLINE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_NEWLINE;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_NEWLINE;	  tate    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	72	None	replace
185	[BUG]  [BUGGY]  builder.append( "EOL  =   " ".equals(option));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   " ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   " ".equals(option));	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
186	[BUG]  [BUGGY]  builder.append( "EOL  =! ".equals(option));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =! ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =! ".equals(option));	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
187	[BUG]  [BUGGY]  builder.append( "EOL  =? ".equals(option));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =? ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =? ".equals(option));	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
188	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option)&&  option!=  WhitespaceOption.SINGLE_LINE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option)&&  option!=  WhitespaceOption.SINGLE_LINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option)&&  option!=  WhitespaceOption.SINGLE_LINE);	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
189	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option)+ ";n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option)+ ";n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option)+ ";n ");	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
190	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "null   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	47	None	replace
191	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "[null] ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "[null] ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "[null] ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "null   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	47	None	replace
192	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getKey()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getKey()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getKey()));	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
193	[BUG]  [BUGGY]  builder.append( "# ").append(option.getValue());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ").append(option.getValue());	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
194	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getLineno()));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getLineno()));	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
195	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getValue()  +  1));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getValue()  +  1));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getValue()  +  1));	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
196	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getLongValue()));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getLongValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getLongValue()));	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
197	[BUG]  [BUGGY]  Builder.append( "unREAD_TOKEN ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "unREAD_TOKEN ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
198	[BUG]  [BUGGY]  Builder.append( "EOL:  no_unREAD_TOKEN ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOL:  no_unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOL:  no_unREAD_TOKEN ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
199	[BUG]  [BUGGY]  Builder.append( "no_unREAD_TOKEN: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no_unREAD_TOKEN: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no_unREAD_TOKEN: ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
200	[BUG]  [BUGGY]  builder.append( "No-line ".equals(option.getText()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "No-line ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "No-line ".equals(option.getText()));	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
201	[BUG]  [BUGGY]  builder.append( "no-line ").append(option.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ").append(option.getText());	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
202	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getSingleLine()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getSingleLine()));	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
203	[BUG]  [BUGGY]  Builder  builder.append( "] ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "] ");	  Builder    builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
204	[BUG]  [BUGGY]  Builder  builder.append( "* ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "* ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "* ");	  Builder    builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
205	[BUG]  [BUGGY]  Builder  builder.append( "# ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "# ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "# ");	  Builder    builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
206	[BUG]  [BUGGY]  builder.append( "Single  line: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Single  line: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Single  line: ");	  builder.append(   "EOL:   ");    	non-compiled	[CE]  	7	None	replace
207	[BUG]  [BUGGY]  builder.append( "EOL  =   " ".equals(option.getText()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   " ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   " ".equals(option.getText()));	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
208	[BUG]  [BUGGY]  builder.append( "EOL  =  ' ").equals(option.getText());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' ").equals(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' ").equals(option.getText());	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
209	[BUG]  [BUGGY]  builder.append( "EOL  =? ".equals(option.getText()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =? ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =? ".equals(option.getText()));	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
210	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getText()  +  1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getText()  +  1));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getText()  +  1));	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
211	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getText()  +   "));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getText()  +   "));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getText()  +   "));	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
212	[BUG]  [BUGGY]  Builder.append( "EOLn ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOLn ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOLn ");	  Builder.append(   "EOL   ");    	non-compiled	[CE]  	45	None	replace
213	[BUG]  [BUGGY]  builder.append( "&amp;' ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&amp;' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&amp;' ");	  builder.append(   "&nbsp;'   ");    	non-compiled	[CE]  	74	None	replace
214	[BUG]  [BUGGY]  builder.append( "&lt;' ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;' ");	  builder.append(   "&nbsp;'   ");    	non-compiled	[CE]  	74	None	replace
215	[BUG]  [BUGGY]  builder.append( "&#39;' ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;' ");	  builder.append(   "&nbsp;'   ");    	non-compiled	[CE]  	74	None	replace
216	[BUG]  [BUGGY]  builder.append( "&apos;' ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&apos;' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&apos;' ");	  builder.append(   "&nbsp;'   ");    	non-compiled	[CE]  	74	None	replace
217	[BUG]  [BUGGY]  builder.append( "&' ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&' ");	  builder.append(   "&nbsp;'   ");    	non-compiled	[CE]  	74	None	replace
218	[BUG]  [BUGGY]  builder.append( "EOL  =  ' ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' ");	  builder.append(   "EOL    =   ");    	non-compiled	[CE]  	109	None	replace
219	[BUG]  [BUGGY]  builder.append( "EOL  =  true ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  true ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  true ");	  builder.append(   "EOL    =   ");    	non-compiled	[CE]  	109	None	replace
220	[BUG]  [BUGGY]  builder.append( "EOL  =   " ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   " ");	  builder.append(   "EOL    =   ");    	non-compiled	[CE]  	109	None	replace
221	[BUG]  [BUGGY]  builder.append( "EOL  =? ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =? ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =? ");	  builder.append(   "EOL    =   ");    	non-compiled	[CE]  	109	None	replace
222	[BUG]  [BUGGY]  TokenBuffer  token  =  nextTokenBuffer();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  TokenBuffer  token  =  nextTokenBuffer();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	TokenBuffer  token  =  nextTokenBuffer();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
223	[BUG]  [BUGGY]  TokenBuffer  token  =  nextTokenBuffer();  continue;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  TokenBuffer  token  =  nextTokenBuffer();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	TokenBuffer  token  =  nextTokenBuffer();  continue;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
224	[BUG]  [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  token  =  next();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  token  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate.SEARCHING_ANNOTATION  =  true;  token  =  next();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
225	[BUG]  [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate.SEARCHING_ANNOTATION  =  true;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
226	[BUG]  [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  token  =  next();  continue;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  token  =  next();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate.SEARCHING_ANNOTATION  =  true;  token  =  next();  continue;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
227	[BUG]  [BUGGY]  builder.append( "EOL ").append(option.getValue());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option.getValue());	  builder.append(   "EOL       ".equals(option.getValue()));    	non-compiled	[CE]  	23	None	replace
228	[BUG]  [BUGGY]  builder.append( "EOLn ".equals(option.getValue()));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOLn ".equals(option.getValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOLn ".equals(option.getValue()));	  builder.append(   "EOL       ".equals(option.getValue()));    	non-compiled	[CE]  	23	None	replace
229	[BUG]  [BUGGY]  builder.append( "NEW ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW ");	  builder.append(   "null   ");    	non-compiled	[CE]  	95	None	replace
230	[BUG]  [BUGGY]  builder.append( "# ").append(option.getText());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ").append(option.getText());	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
231	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getSingleLine()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getSingleLine()));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
232	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getText()  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getText()  +  1));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getText()  +  1));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
233	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getText()  +   ") ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getText()  +   ") ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getText()  +   ") ");	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
234	[BUG]  [BUGGY]  builder.append( "# ",  token.equals(option.getText()));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ",  token.equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ",  token.equals(option.getText()));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
235	[BUG]  [BUGGY]  builder.append( "NEWLINE ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEWLINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEWLINE ");	  builder.append(   "eOL   ");    	non-compiled	[CE]  	70	None	replace
236	[BUG]  [BUGGY]  builder.append( "&lt;] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
237	[BUG]  [BUGGY]  builder.append( "&amp;] ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&amp;] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&amp;] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
238	[BUG]  [BUGGY]  builder.append( "&#39;] ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#39;] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#39;] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
239	[BUG]  [BUGGY]  builder.append( "&apos;] ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&apos;] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&apos;] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
240	[BUG]  [BUGGY]  builder.append( "&quot;] ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&quot;] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&quot;] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
241	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleLine());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleLine());	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
242	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleLine()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleLine()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
243	[BUG]  [BUGGY]  builder.append( "Single  line: ").equals(option.getSingleLine()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Single  line: ").equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Single  line: ").equals(option.getSingleLine()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
244	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleCharno()));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleCharno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleCharno()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
245	[BUG]  [BUGGY]  builder.append( "n ").equals(option.getSingleLine()));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").equals(option.getSingleLine()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
246	[BUG]  [BUGGY]  builder.append( "EOL  =   " ".equals(option.getSingleLine()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   " ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   " ".equals(option.getSingleLine()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
247	[BUG]  [BUGGY]  builder.append( "EOL  =? ".equals(option.getSingleLine()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =? ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =? ".equals(option.getSingleLine()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
248	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getLabel()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getLabel()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getLabel()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
249	[BUG]  [BUGGY]  builder.append( "EOL  =  ' ").equals(option.getSingleLine());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' ").equals(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' ").equals(option.getSingleLine());	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
250	[BUG]  [BUGGY]  builder.append( "EOL  =! ".equals(option.getSingleLine()));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =! ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =! ".equals(option.getSingleLine()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
251	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getEOL()));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getEOL()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getEOL()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
252	[BUG]  [BUGGY]  builder.append( "EOL: "  +  option.getText());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: "  +  option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: "  +  option.getText());	  builder.append(   "EOL:   ".equals(option.getText()));    	non-compiled	[CE]  	1	None	replace
253	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no-line ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no-line ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no-line ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "no-line   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	48	None	replace
254	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no-line. ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no-line. ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no-line. ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "no-line   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	48	None	replace
255	[BUG]  [BUGGY]  builder.append( "no_unREAD_TOKEN ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no_unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no_unREAD_TOKEN ");	  builder.append(   "no   ");    	non-compiled	[CE]  	92	None	replace
256	[BUG]  [BUGGY]  builder.append( "no_line ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no_line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no_line ");	  builder.append(   "no   ");    	non-compiled	[CE]  	92	None	replace
257	[BUG]  [BUGGY]  builder.append( "no_unreachable ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no_unreachable ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no_unreachable ");	  builder.append(   "no   ");    	non-compiled	[CE]  	92	None	replace
258	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION ");  }	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
259	[BUG]  [BUGGY]  builder.append( "SEARCHING_ANNOTATION ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SEARCHING_ANNOTATION ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SEARCHING_ANNOTATION ");	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
260	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "NEXT_IS_ANNOTATION ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
261	[BUG]  [BUGGY]  State.SEARCHING_NEWLINE  =  token;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_NEWLINE  =  token;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_NEWLINE  =  token;	  state    =    State.SEARCHING_NEWLINE;    	non-compiled	[CE]  	10	None	replace
262	[BUG]  [BUGGY]  State.SEARCHING_NEWLINE  =  true;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_NEWLINE  =  true;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_NEWLINE  =  true;	  state    =    State.SEARCHING_NEWLINE;    	non-compiled	[CE]  	10	None	replace
263	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleCharno());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleCharno());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
264	[BUG]  [BUGGY]  builder.append( "Single  line: ").equals(option.getSingleLine());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Single  line: ").equals(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Single  line: ").equals(option.getSingleLine());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
265	[BUG]  [BUGGY]  builder.append( "n ").equals(option.getSingleLine());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").equals(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").equals(option.getSingleLine());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
266	[BUG]  [BUGGY]  builder.append( "EOL: ").appends(option.getSingleLine());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").appends(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").appends(option.getSingleLine());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
267	[BUG]  [BUGGY]  Builder.append( "Null ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "Null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "Null ");	  Builder.append(   "null   ");    	non-compiled	[CE]  	27	None	replace
268	[BUG]  [BUGGY]  Builder.append( "] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "] ");	  Builder.append(   "null   ");    	non-compiled	[CE]  	27	None	replace
269	[BUG]  [BUGGY]  Builder.append( "null ",  option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "null ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "null ",  option);	  Builder.append(   "null   ");    	non-compiled	[CE]  	27	None	replace
270	[BUG]  [BUGGY]  Builder.append( "NEWLINE ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "NEWLINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "NEWLINE ");	  Builder.append(   "null   ");    	non-compiled	[CE]  	27	None	replace
271	[BUG]  [BUGGY]  builder.append( "# ").append(option.getLongValue());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ").append(option.getLongValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
272	[BUG]  [BUGGY]  builder.append( "EOL ").append(option.getLongValue());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option.getLongValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
273	[BUG]  [BUGGY]  builder.append( "null ").append(option.getLongValue());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "null ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "null ").append(option.getLongValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
274	[BUG]  [BUGGY]  builder.append( "n ").append(option.getIntValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").append(option.getIntValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").append(option.getIntValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
275	[BUG]  [BUGGY]  Builder.append( "msg.no.line ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.no.line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.no.line ");	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
276	[BUG]  [BUGGY]  Builder.append( "msg.no-line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.no-line ");	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
277	[BUG]  [BUGGY]  Builder.append( "no-line: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no-line: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no-line: ");	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
278	[BUG]  [BUGGY]  Builder.append( "None-line ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "None-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "None-line ");	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
279	[BUG]  [BUGGY]  builder.append( "EOL  =   " ".equals(option.getValue()));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   " ".equals(option.getValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   " ".equals(option.getValue()));	  builder.append(   "EOL    =   ".equals(option.getValue()));    	non-compiled	[CE]  	25	None	replace
280	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getLineno()));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getLineno()));	  builder.append(   "EOL    =   ".equals(option.getValue()));    	non-compiled	[CE]  	25	None	replace
281	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getValue()  +  1));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getValue()  +  1));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getValue()  +  1));	  builder.append(   "EOL    =   ".equals(option.getValue()));    	non-compiled	[CE]  	25	None	replace
282	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getKey()));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getKey()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getKey()));	  builder.append(   "EOL    =   ".equals(option.getValue()));    	non-compiled	[CE]  	25	None	replace
283	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getLineNumber()));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getLineNumber()));	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
284	[BUG]  [BUGGY]  builder.append( "EOL  =   " ".equals(option.getLongValue()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   " ".equals(option.getLongValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   " ".equals(option.getLongValue()));	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
285	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getEOLValue()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getEOLValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getEOLValue()));	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
286	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getLongValue()  +  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getLongValue()  +  1));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getLongValue()  +  1));	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
287	[BUG]  [BUGGY]  builder.append( "* ").append(option.getSingleLine());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "* ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "* ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
288	[BUG]  [BUGGY]  builder.append( "# ").append(option.getSingleLine());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
289	[BUG]  [BUGGY]  builder.append( "] ").append(option.getSingleLine());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
290	[BUG]  [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
291	[BUG]  [BUGGY]  ||  state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  ||  state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	||  state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
292	[BUG]  [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  if(ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  if(ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state!=  State.SEARCHING_ANNOTATION)  {  if(ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
293	[BUG]  [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  if(!ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  if(!ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state!=  State.SEARCHING_ANNOTATION)  {  if(!ignoredStar)  {  throw  new  IllegalArgumentException( " ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
294	[BUG]  [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".);  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
295	[BUG]  [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".equals(option));  }  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".equals(option));  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ".equals(option));  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
296	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
297	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
298	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
299	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  null;  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  null;  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  null;  throw  new  IllegalArgumentException( " ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
300	[BUG]  [BUGGY]  state  =  State.SEARCHING_NEWLINE;  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_NEWLINE;  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_NEWLINE;  throw  new  IllegalArgumentException( " ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
301	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "# ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "# ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "# ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "#   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	49	None	replace
302	[BUG]  [BUGGY]  builder.append( "[ ").append(option.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ").append(option.getText());	  builder.append(   "[   ".equals(option.getText()));    	non-compiled	[CE]  	113	None	replace
303	[BUG]  [BUGGY]  builder.append( "][ ".equals(option.getText()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "][ ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "][ ".equals(option.getText()));	  builder.append(   "[   ".equals(option.getText()));    	non-compiled	[CE]  	113	None	replace
304	[BUG]  [BUGGY]  builder.append( "[ ".equals(option.getSingleLine()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ".equals(option.getSingleLine()));	  builder.append(   "[   ".equals(option.getText()));    	non-compiled	[CE]  	113	None	replace
305	[BUG]  [BUGGY]  builder.append( "[ ".equals(option.getLineno()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ".equals(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ".equals(option.getLineno()));	  builder.append(   "[   ".equals(option.getText()));    	non-compiled	[CE]  	113	None	replace
306	[BUG]  [BUGGY]  builder.append( "EOL ".equals(option.getLineNumber()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ".equals(option.getLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ".equals(option.getLineNumber()));	  builder.append(   "EOL       ".equals(option.getLongValue()));    	non-compiled	[CE]  	59	None	replace
307	[BUG]  [BUGGY]  builder.append( ": ").append(option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ").append(option);	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
308	[BUG]  [BUGGY]  builder.append( ":n ".equals(option));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":n ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":n ".equals(option));	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
309	[BUG]  [BUGGY]  builder.append( ": ".equals(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ".equals(token));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ".equals(token));	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
310	[BUG]  [BUGGY]  builder.append( ": "  +  option);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": "  +  option);	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
311	[BUG]  [BUGGY]  Builder  builder.append( "None ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "None ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "None ");	  Builder    builder.append(   "noEOL   ");    	non-compiled	[CE]  	69	None	replace
312	[BUG]  [BUGGY]  Builder  builder.append( "eOL ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "eOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "eOL ");	  Builder    builder.append(   "noEOL   ");    	non-compiled	[CE]  	69	None	replace
313	[BUG]  [BUGGY]  builder.append( "SINGLE: ".equals(option));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ".equals(option));	  builder.append(   "EOL:   ".equals(option));    	non-compiled	[CE]  	37	None	replace
314	[BUG]  [BUGGY]  builder.append( "EOL: "  +  option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: "  +  option);	  builder.append(   "EOL:   ".equals(option));    	non-compiled	[CE]  	37	None	replace
315	[BUG]  [BUGGY]  Builder.append( "unreadToken ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "unreadToken ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "unreadToken ");	  Builder.append(   "no_unreadToken   ");    	non-compiled	[CE]  	51	None	replace
316	[BUG]  [BUGGY]  Builder.append( "msg.unread.token ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.unread.token ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.unread.token ");	  Builder.append(   "no_unreadToken   ");    	non-compiled	[CE]  	51	None	replace
317	[BUG]  [BUGGY]  Builder.append( "msg.no.unread.token ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.no.unread.token ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.no.unread.token ");	  Builder.append(   "no_unreadToken   ");    	non-compiled	[CE]  	51	None	replace
318	[BUG]  [BUGGY]  Builder.append( "msg.unread.line ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.unread.line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.unread.line ");	  Builder.append(   "no_unreadToken   ");    	non-compiled	[CE]  	51	None	replace
319	[BUG]  [BUGGY]  builder.append( "NEWLINE: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEWLINE: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEWLINE: ");	  builder.append(   "eOL:   ");    	non-compiled	[CE]  	102	None	replace
320	[BUG]  [BUGGY]  builder.append( "] ").append(option.getText());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] ").append(option.getText());	  builder.append(   "n   ").append(option.getText());    	non-compiled	[CE]  	2	None	replace
321	[BUG]  [BUGGY]  builder.append( "&lt; ").append(option.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt; ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt; ").append(option.getText());	  builder.append(   "n   ").append(option.getText());    	non-compiled	[CE]  	2	None	replace
322	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  new  State();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  new  State();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  new  State();	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
323	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option));	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
324	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option).append('[');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option).append('[');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option).append('[');	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
325	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option).append('_');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option).append('_');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option).append('_');	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
326	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option).append('  ');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option).append('  ');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option).append('  ');	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
327	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option).append('-');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option).append('-');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option).append('-');	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
328	[BUG]  [BUGGY]  Builder  builder.append( "no-line ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "no-line ");	  Builder    builder.append(   "no   ");    	non-compiled	[CE]  	93	None	replace
329	[BUG]  [BUGGY]  Builder  builder.append( "no_line ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "no_line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "no_line ");	  Builder    builder.append(   "no   ");    	non-compiled	[CE]  	93	None	replace
330	[BUG]  [BUGGY]  builder.append( "NEW: ".equals(option));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ".equals(option));	  builder.append(   "eOL:   ".equals(option));    	non-compiled	[CE]  	97	None	replace
331	[BUG]  [BUGGY]  builder.append( "None-line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "None-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "None-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
332	[BUG]  [BUGGY]  builder.append( "msg.no.line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "msg.no.line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "msg.no.line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
333	[BUG]  [BUGGY]  builder.append( "No-line ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "No-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "No-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
334	[BUG]  [BUGGY]  builder.append( "msg.no-line ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "msg.no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "msg.no-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
335	[BUG]  [BUGGY]  builder.append( "no-line: ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line: ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
336	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
337	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
338	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
339	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
340	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ":] ");  }  else  {  ignoreStar  =  false;  }	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
341	[BUG]  [BUGGY]  builder.append( "# ").append(option).append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
342	[BUG]  [BUGGY]  builder.append( "EOL   ").append(option).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL   ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL   ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
343	[BUG]  [BUGGY]  builder.append( "&lt; ").append(option).append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt; ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt; ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
344	[BUG]  [BUGGY]  builder.append( "&nbsp;n ").append(option).append('n');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&nbsp;n ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&nbsp;n ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
345	[BUG]  [BUGGY]  mockBuilder.append( "null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockBuilder.append( "null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockBuilder.append( "null ");	  bucketBuilder.append(   "null   ");    	non-compiled	[CE]  	117	None	replace
346	[BUG]  [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(option  ==  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
347	[BUG]  [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
348	[BUG]  [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
349	[BUG]  [BUGGY]  allowSingleLine(option)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleLine(option)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleLine(option)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
350	[BUG]  [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
351	[BUG]  [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
352	[BUG]  [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(!ignoreStar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(!ignoreStar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	While(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(!ignoreStar)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
353	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  true;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  true;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  true;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
354	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
355	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
356	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
357	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE);	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
358	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  ||  state!=  SEARCHING_NEWLINE;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  ||  state!=  SEARCHING_NEWLINE;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  ||  state!=  SEARCHING_NEWLINE;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
359	[BUG]  [BUGGY]  builder.append( "SINGLE_LINE: "  +  option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE_LINE: "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE_LINE: "  +  option);	  builder.append(   "SINGLE_LINE:   ");    	non-compiled	[CE]  	32	None	replace
360	[BUG]  [BUGGY]  builder.append( "Single_line: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Single_line: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Single_line: ");	  builder.append(   "SINGLE_LINE:   ");    	non-compiled	[CE]  	32	None	replace
361	[BUG]  [BUGGY]  builder.append( "SINGLE_LINE: ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE_LINE: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE_LINE: ").append(option);	  builder.append(   "SINGLE_LINE:   ");    	non-compiled	[CE]  	32	None	replace
362	[BUG]  [BUGGY]  builder.append( "* ").append(option.getValue());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "* ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "* ").append(option.getValue());	  builder.append(   "n   ").append(option.getValue());    	non-compiled	[CE]  	22	None	replace
363	[BUG]  [BUGGY]  builder.append( "] ").append(option.getValue());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] ").append(option.getValue());	  builder.append(   "n   ").append(option.getValue());    	non-compiled	[CE]  	22	None	replace
364	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  next();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  next();	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	80	None	replace
365	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  next();  continue;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  next();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  next();  continue;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	80	None	replace
366	[BUG]  [BUGGY]  builder.append( "[SINGLE_LINE] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[SINGLE_LINE] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[SINGLE_LINE] ");	  builder.append(   "SINGLE_LINE   ");    	non-compiled	[CE]  	31	None	replace
367	[BUG]  [BUGGY]  builder.append( "EOL:  SINGLE_LINE ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  SINGLE_LINE ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  SINGLE_LINE ");	  builder.append(   "SINGLE_LINE   ");    	non-compiled	[CE]  	31	None	replace
368	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getExpression()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getExpression()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getExpression()));	  builder.append(   "EOL:   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	33	None	replace
369	[BUG]  [BUGGY]  builder.append( "EOL: "  +  option.getSingleLine());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: "  +  option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: "  +  option.getSingleLine());	  builder.append(   "EOL:   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	33	None	replace
370	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder(option);	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
371	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(token);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder(token);	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
372	[BUG]  [BUGGY]  Builder  builder  =  new  JsDocInfoBuilder();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JsDocInfoBuilder();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JsDocInfoBuilder();	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
373	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(strategy);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(strategy);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder(strategy);	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
374	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(lineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(lineno);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder(lineno);	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
375	[BUG]  [BUGGY]  Builder  builder.append( "[null] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "[null] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "[null] ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
376	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option);	  builder.append(   "EOL       ".equals(option));    	non-compiled	[CE]  	38	None	replace
377	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "n ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
378	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "Null ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "Null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "Null ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
379	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "# ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "# ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "# ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
380	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "] ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "] ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
381	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "EOL ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "EOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "EOL ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
382	[BUG]  [BUGGY]  Builder  builder.append( "no_unREAD_TOKEN ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "no_unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "no_unREAD_TOKEN ");	  Builder    builder.append(   "no   ");    	non-compiled	[CE]  	93	None	replace
383	[BUG]  [BUGGY]  builder.append( "EOL  =   "  +  option);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   "  +  option);	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
384	[BUG]  [BUGGY]  bucketBuilder.append( "eOL ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "eOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "eOL ");	  bucketBuilder.append(   "no   ");    	non-compiled	[CE]  	116	None	replace
385	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  continue;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION;  continue;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    continue;    }    	non-compiled	[CE]  	64	None	replace
386	[BUG]  [BUGGY]  builder.append( "EOL:  NEXT_IS_ANNOTATION ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  NEXT_IS_ANNOTATION ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  NEXT_IS_ANNOTATION ");	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
387	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION "  +  option);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION "  +  option);	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
388	[BUG]  [BUGGY]  builder.append( "EOL  NEXT_IS_ANNOTATION ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  NEXT_IS_ANNOTATION ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  NEXT_IS_ANNOTATION ");	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
389	[BUG]  [BUGGY]  builder.append( "EOL ").append(option.getSingleLine()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option.getSingleLine()));	  builder.append(   "EOL       ".equals(option.getSingleLine()));    	non-compiled	[CE]  	34	None	replace
390	[BUG]  [BUGGY]  builder.append( "EOL ".equals(option.getLabel()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ".equals(option.getLabel()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ".equals(option.getLabel()));	  builder.append(   "EOL       ".equals(option.getSingleLine()));    	non-compiled	[CE]  	34	None	replace
391	[BUG]  [BUGGY]  Builder.append( "no_unreachable ",  option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no_unreachable ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no_unreachable ",  option);	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
392	[BUG]  [BUGGY]  Builder.append( "no_unreachable-line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no_unreachable-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no_unreachable-line ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
393	[BUG]  [BUGGY]  Builder.append( "eOL ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL ");	  Builder.append(   "no   ");    	non-compiled	[CE]  	91	None	replace
394	[BUG]  [BUGGY]  builder.append( ";null ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";null ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	26	None	replace
395	[BUG]  [BUGGY]  builder.append( ";] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ";] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ";] ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	26	None	replace
396	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  token  =  next();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  token  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION;  token  =  next();	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	80	None	replace
397	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getKey());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getKey());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getKey());	  builder.append(   "EOL:   ").equals(option.getValue());    	non-compiled	[CE]  	24	None	replace
398	[BUG]  [BUGGY]  builder.append( "[] ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[] ");	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
399	[BUG]  [BUGGY]  builder.append( "n:] ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n:] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n:] ");	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
400	[BUG]  [BUGGY]  builder.append( ":] ").append(option);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":] ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":] ").append(option);	  builder.append(   ":]   ");    	non-compiled	[CE]  	87	None	replace
401	[BUG]  [BUGGY]  builder.append( "nSINGLE_LINE: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "nSINGLE_LINE: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "nSINGLE_LINE: ");	  builder.append(   "SINGLE_LINE:   ");    	non-compiled	[CE]  	32	None	replace
402	[BUG]  [BUGGY]  Builder.append( "eOL:  null ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL:  null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL:  null ");	  Builder.append(   "null   ");    	non-compiled	[CE]  	27	None	replace
403	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLabel()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLabel()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLabel()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
404	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getExpression()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getExpression()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getExpression()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
405	[BUG]  [BUGGY]  Builder  builder.append( "NoEOL ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "NoEOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "NoEOL ");	  Builder    builder.append(   "noEOL   ");    	non-compiled	[CE]  	69	None	replace
406	[BUG]  [BUGGY]  builder.append( "] ").append(option.getLongValue());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] ").append(option.getLongValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
407	[BUG]  [BUGGY]  builder.append( "eOL: ").append(option.getLongValue());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ").append(option.getLongValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
408	[BUG]  [BUGGY]  builder.append( "EOL  =  ' "  +  option.getText()  + "' ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' "  +  option.getText()  + "' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' "  +  option.getText()  + "' ");	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
409	[BUG]  [BUGGY]  safeToken  =  next();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  safeToken  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	safeToken  =  next();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
410	[BUG]  [BUGGY]  MutableState.checkNotNull(token);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  MutableState.checkNotNull(token);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	MutableState.checkNotNull(token);	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
411	[BUG]  [BUGGY]  MutableState.assertEquals(token,  Option.SINGLE_LINE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  MutableState.assertEquals(token,  Option.SINGLE_LINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	MutableState.assertEquals(token,  Option.SINGLE_LINE);	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
412	[BUG]  [BUGGY]  MutableState.assertEquals(token,  option);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  MutableState.assertEquals(token,  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	MutableState.assertEquals(token,  option);	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
413	[BUG]  [BUGGY]  MutableState.assertEquals(0,  option.getValue());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  MutableState.assertEquals(0,  option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	MutableState.assertEquals(0,  option.getValue());	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
414	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getSingleValue()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getSingleValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getSingleValue()));	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
415	[BUG]  [BUGGY]  builder.append( "EOL  =  false ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  false ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  false ");	  builder.append(   "EOL    =   ");    	non-compiled	[CE]  	109	None	replace
416	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getLabel());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getLabel());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getLabel());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
417	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getSINGLE_LINE());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getSINGLE_LINE());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getSINGLE_LINE());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
418	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getExpression());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getExpression());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getExpression());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
419	[BUG]  [BUGGY]  builder.append( "NEW: ".equals(option.getSingleLine()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ".equals(option.getSingleLine()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ".equals(option.getSingleLine()));	  builder.append(   "eOL:   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	101	None	replace
420	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  DEFAULT_IS_ANNOTATION;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  DEFAULT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  DEFAULT_IS_ANNOTATION;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
421	[BUG]  [BUGGY]  builder.append( "nEOL: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "nEOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "nEOL: ");	  builder.append(   ",EOL:   ");    	non-compiled	[CE]  	104	None	replace
422	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getExpression()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getExpression()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getExpression()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
423	[BUG]  [BUGGY]  builder.append( "EOL  =  ' "  +  option.getSingleLine()  + "' ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' "  +  option.getSingleLine()  + "' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' "  +  option.getSingleLine()  + "' ");	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
424	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getString()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getString()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getString()));	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
425	[BUG]  [BUGGY]  builder.append( "# "  +  option.getValue());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# "  +  option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# "  +  option.getValue());	  builder.append(   "#   ".equals(option.getValue()));    	non-compiled	[CE]  	100	None	replace
426	[BUG]  [BUGGY]  builder.append( "None-line ".equals(option.getText()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "None-line ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "None-line ".equals(option.getText()));	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
427	[BUG]  [BUGGY]  builder.append( "EOL:  no-line ".equals(option.getText()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  no-line ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  no-line ".equals(option.getText()));	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
428	[BUG]  [BUGGY]  builder.append( "eOL-line ".equals(option.getText()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL-line ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL-line ".equals(option.getText()));	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
429	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getLongText()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getLongText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getLongText()));	  builder.append(   "no-line   ".equals(option.getText()));    	non-compiled	[CE]  	112	None	replace
430	[BUG]  [BUGGY]  builder.append( "SINGLE: ").equals(option));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ").equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ").equals(option));	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
431	[BUG]  [BUGGY]  builder.append( "EOL: ").appends(option));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").appends(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").appends(option));	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
432	[BUG]  [BUGGY]  builder.append( "NEW: ".equals(option.getText()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ".equals(option.getText()));	  builder.append(   "eOL:   ".equals(option.getText()));    	non-compiled	[CE]  	111	None	replace
433	[BUG]  [BUGGY]  builder.append(':');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append(':');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append(':');	  builder.append(   ":   ");    	non-compiled	[CE]  	6	None	replace
434	[BUG]  [BUGGY]  builder.append( "ERROR: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "ERROR: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "ERROR: ");	  builder.append(   "EOL:   ");    	non-compiled	[CE]  	7	None	replace
435	[BUG]  [BUGGY]  state.SEARCHING_ANNOTATION  =  true;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state.SEARCHING_ANNOTATION  =  true;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state.SEARCHING_ANNOTATION  =  true;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
436	[BUG]  [BUGGY]  builder.append( "&amp;eOL ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&amp;eOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&amp;eOL ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
437	[BUG]  [BUGGY]  builder.append( "NEW: ".equals(option.getLongValue()));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ".equals(option.getLongValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ".equals(option.getLongValue()));	  builder.append(   "eOL:   ".equals(option.getLongValue()));    	non-compiled	[CE]  	118	None	replace
438	[BUG]  [BUGGY]  Builder  builder.append( "NEXT_IS_ANNOTATION ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "NEXT_IS_ANNOTATION ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "NEXT_IS_ANNOTATION ");	  Builder    builder.append(   "EOL   ");    	non-compiled	[CE]  	46	None	replace
439	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  +  1;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  +  1;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
440	[BUG]  [BUGGY]  state  =  State.NEXT_IS_ANNOTATION;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
441	[BUG]  [BUGGY]  Builder  builder.append( "NEW ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "NEW ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "NEW ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
442	[BUG]  [BUGGY]  Builder.append( "eOL:  unreadToken ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL:  unreadToken ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL:  unreadToken ");	  Builder.append(   "no_unreadToken   ");    	non-compiled	[CE]  	51	None	replace
443	[BUG]  [BUGGY]  Builder.append( "UnreadToken ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "UnreadToken ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "UnreadToken ");	  Builder.append(   "no_unreadToken   ");    	non-compiled	[CE]  	51	None	replace
444	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  new  State.SEARCHING_ANNOTATION;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  new  State.SEARCHING_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  new  State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
445	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  state.getSEARCHING_ANNOTATION();	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
446	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION: ").append(option);	  builder.append(   "EOL:   ").append(option);    	non-compiled	[CE]  	43	None	replace
447	[BUG]  [BUGGY]  bucketBuilder.append( "] ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "] ");	  bucketBuilder.append(   "null   ");    	non-compiled	[CE]  	117	None	replace
448	[BUG]  [BUGGY]  Builder.append( "EOL  [ ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOL  [ ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOL  [ ");	  Builder.append(   "EOL   ");    	non-compiled	[CE]  	45	None	replace
449	[BUG]  [BUGGY]  Builder.append( "EOL:  n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOL:  n ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOL:  n ");	  Builder.append(   "EOL   ");    	non-compiled	[CE]  	45	None	replace
450	[BUG]  [BUGGY]  tate.SEARCHING_ANNOTATION  =  false;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate.SEARCHING_ANNOTATION  =  false;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate.SEARCHING_ANNOTATION  =  false;	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
451	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION ").append(option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
452	[BUG]  [BUGGY]  builder.append( "] ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
453	[BUG]  [BUGGY]  builder.append( "EOL ").append(option.getLongValue()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option.getLongValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option.getLongValue()));	  builder.append(   "EOL       ".equals(option.getLongValue()));    	non-compiled	[CE]  	59	None	replace
454	[BUG]  [BUGGY]  Builder.append( "NEXT_IS_ANNOTATION ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "NEXT_IS_ANNOTATION ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "NEXT_IS_ANNOTATION ");	  Builder.append(   "noEOL   ");    	non-compiled	[CE]  	28	None	replace
455	[BUG]  [BUGGY]  Builder.append( "eOL:  no-line ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL:  no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL:  no-line ");	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
456	[BUG]  [BUGGY]  Builder.append( "misplace-line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "misplace-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "misplace-line ");	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
457	[BUG]  [BUGGY]  builder.append( "EOL ".equals(option.getKey()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ".equals(option.getKey()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ".equals(option.getKey()));	  builder.append(   "EOL       ".equals(option.getValue()));    	non-compiled	[CE]  	23	None	replace
458	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getNoLineNumber()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getNoLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getNoLineNumber()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
459	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(128);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(128);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(128);	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
460	[BUG]  [BUGGY]  builder.append( "eOL:  no-line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL:  no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL:  no-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
461	[BUG]  [BUGGY]  builder.append( "no-line  line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line  line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line  line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
462	[BUG]  [BUGGY]  builder.append( "not-line ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "not-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "not-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
463	[BUG]  [BUGGY]  builder.append( ": ").append(option).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ").append(option).append('n');	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
464	[BUG]  [BUGGY]  builder.append( ": ").append(option));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ").append(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ").append(option));	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
465	[BUG]  [BUGGY]  Builder.append( "# ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "# ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "# ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "#   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	49	None	replace
466	[BUG]  [BUGGY]  builder.append( "#n ".equals(option.getText()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "#n ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "#n ".equals(option.getText()));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
467	[BUG]  [BUGGY]  builder.append( "&# ".equals(option.getText()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&# ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&# ".equals(option.getText()));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
468	[BUG]  [BUGGY]  builder.append( "# "  +  option.getText());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# "  +  option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# "  +  option.getText());	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
469	[BUG]  [BUGGY]  builder.append( "[ ").append(option.getText()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ").append(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ").append(option.getText()));	  builder.append(   "[   ".equals(option.getText()));    	non-compiled	[CE]  	113	None	replace
470	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION ").append(option).append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
471	[BUG]  [BUGGY]  builder.append( "] ").append(option).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
472	[BUG]  [BUGGY]  builder.append( "EOL:  n ").append(option).append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  n ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  n ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
473	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "eOL ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "eOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "eOL ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
474	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "NEW ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "NEW ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "NEW ");	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
475	[BUG]  [BUGGY]  builder.append( "n ", "&nbsp; ",  true);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ", "&nbsp; ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ", "&nbsp; ",  true);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
476	[BUG]  [BUGGY]  builder.append( "EOL  =  ' "  +  option.getValue()  + "' ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' "  +  option.getValue()  + "' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' "  +  option.getValue()  + "' ");	  builder.append(   "EOL    =   ".equals(option.getValue()));    	non-compiled	[CE]  	25	None	replace
477	[BUG]  [BUGGY]  builder.append( ":none-line ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":none-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":none-line ");	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
478	[BUG]  [BUGGY]  builder.append( ":no-line ",  TRIM);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":no-line ",  TRIM);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":no-line ",  TRIM);	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
479	[BUG]  [BUGGY]  builder.append( ":no-line ",  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":no-line ",  false);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":no-line ",  false);	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
480	[BUG]  [BUGGY]  builder.append( "&lt;no-line ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;no-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;no-line ");	  builder.append(   "&lt;n   ");    	non-compiled	[CE]  	53	None	replace
481	[BUG]  [BUGGY]  builder.append( "&lt;null ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;null ");	  builder.append(   "&lt;n   ");    	non-compiled	[CE]  	53	None	replace
482	[BUG]  [BUGGY]  builder.append( "&lt;no, ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&lt;no, ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&lt;no, ");	  builder.append(   "&lt;n   ");    	non-compiled	[CE]  	53	None	replace
483	[BUG]  [BUGGY]  TokenBuffer  token  =  next();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  TokenBuffer  token  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	TokenBuffer  token  =  next();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
484	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getSingleValue());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getSingleValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getSingleValue());	  builder.append(   "EOL:   ").equals(option.getLongValue());    	non-compiled	[CE]  	60	None	replace
485	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getSingLEValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getSingLEValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getSingLEValue());	  builder.append(   "EOL:   ").equals(option.getLongValue());    	non-compiled	[CE]  	60	None	replace
486	[BUG]  [BUGGY]  builder.append( "nSINGLE: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "nSINGLE: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "nSINGLE: ");	  builder.append(   "SINGLE:   ");    	non-compiled	[CE]  	42	None	replace
487	[BUG]  [BUGGY]  builder.append( "SINGLE: ").equals(option.getText()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ").equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ").equals(option.getText()));	  builder.append(   "EOL:   ").equals(option.getText()));    	non-compiled	[CE]  	78	None	replace
488	[BUG]  [BUGGY]  builder.append( "eOL ").append(option.getText());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL ").append(option.getText());	  builder.append(   "n   ").append(option.getText());    	non-compiled	[CE]  	2	None	replace
489	[BUG]  [BUGGY]  builder.append( "eOL: ").append(option.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ").append(option.getText());	  builder.append(   "n   ").append(option.getText());    	non-compiled	[CE]  	2	None	replace
490	[BUG]  [BUGGY]  builder.append( "EOL  = ").append(option.getText());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  = ").append(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  = ").append(option.getText());	  builder.append(   "n   ").append(option.getText());    	non-compiled	[CE]  	2	None	replace
491	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "None-line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "None-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "None-line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
492	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "no-line. ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "no-line. ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "no-line. ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
493	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "mocking-line ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "mocking-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "mocking-line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
494	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "null ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "null ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "null ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "null   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	47	None	replace
495	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(lineNumber);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(lineNumber);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder(lineNumber);	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
496	[BUG]  [BUGGY]  builder.append( "EOL  =  ' "  +  option.getLongValue()  + "' ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' "  +  option.getLongValue()  + "' ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' "  +  option.getLongValue()  + "' ");	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
497	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getSingleValue()));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getSingleValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getSingleValue()));	  builder.append(   "EOL:   ".equals(option.getLongValue()));    	non-compiled	[CE]  	57	None	replace
498	[BUG]  [BUGGY]  builder.append(']');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append(']');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append(']');	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
499	[BUG]  [BUGGY]  builder.append( "] "  +  option);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "] "  +  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "] "  +  option);	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
500	[BUG]  [BUGGY]  builder.append( "EOL: ").equals(option.getKey()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").equals(option.getKey()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").equals(option.getKey()));	  builder.append(   "EOL:   ").equals(option.getValue()));    	non-compiled	[CE]  	89	None	replace
501	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
502	[BUG]  [BUGGY]  builder.append( "eOL: ").append(option.getValue());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ").append(option.getValue());	  builder.append(   "n   ").append(option.getValue());    	non-compiled	[CE]  	22	None	replace
503	[BUG]  [BUGGY]  builder.append( "n ").append(option.getKey());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "n ").append(option.getKey());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ").append(option.getKey());	  builder.append(   "n   ").append(option.getValue());    	non-compiled	[CE]  	22	None	replace
504	[BUG]  [BUGGY]  builder.append( "EOL ").append(option));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL ").append(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL ").append(option));	  builder.append(   "EOL       ".equals(option));    	non-compiled	[CE]  	38	None	replace
505	[BUG]  [BUGGY]  allowSingleLineno(option)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleLineno(option)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleLineno(option)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
506	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUncheckedException( " ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  aughtExceptionHandler.throwAsUncheckedException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	aughtExceptionHandler.throwAsUncheckedException( " ");	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
507	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	aughtExceptionHandler.throwInternal();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
508	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSingleArgumentException( " ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  aughtExceptionHandler.throwAsSingleArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	aughtExceptionHandler.throwAsSingleArgumentException( " ");	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
509	[BUG]  [BUGGY]  allowSingleLineno(option)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleLineno(option)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleLineno(option)  {  throw  new  IllegalArgumentException( " ".);  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
510	[BUG]  [BUGGY]  builder.append( "nNEXT_IS_ANNOTATION: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "nNEXT_IS_ANNOTATION: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "nNEXT_IS_ANNOTATION: ");	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
511	[BUG]  [BUGGY]  builder.append( "EOL:  NEXT_IS_ANNOTATION: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  NEXT_IS_ANNOTATION: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  NEXT_IS_ANNOTATION: ");	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
512	[BUG]  [BUGGY]  builder.append( "EOL:  n ").equals(option.getText());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  n ").equals(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  n ").equals(option.getText());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
513	[BUG]  [BUGGY]  builder.append( "NEW: ").equals(option.getText());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ").equals(option.getText());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ").equals(option.getText());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
514	[BUG]  [BUGGY]  builder.append( "NEW: ".equals(option.getValue()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ".equals(option.getValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ".equals(option.getValue()));	  builder.append(   "eOL:   ".equals(option.getValue()));    	non-compiled	[CE]  	99	None	replace
515	[BUG]  [BUGGY]  builder.append( "&#160;] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#160;] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#160;] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
516	[BUG]  [BUGGY]  Builder.append( "eOL:  no_unREAD_TOKEN ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL:  no_unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL:  no_unREAD_TOKEN ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
517	[BUG]  [BUGGY]  Builder.append( "eOL: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "eOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "eOL: ");	  Builder.append(   "n   ");    	non-compiled	[CE]  	14	None	replace
518	[BUG]  [BUGGY]  bucketBuilder.append( "EOL: ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "EOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "EOL: ");	  bucketBuilder.append(   "n   ");    	non-compiled	[CE]  	115	None	replace
519	[BUG]  [BUGGY]  builder.append( "SINGLE: ").append(option).append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "SINGLE: ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "SINGLE: ").append(option).append('n');	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
520	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION:   ").append(option).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION:   ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION:   ").append(option).append('n');	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
521	[BUG]  [BUGGY]  builder.append( "nEOL:   ").append(option).append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "nEOL:   ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "nEOL:   ").append(option).append('n');	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
522	[BUG]  [BUGGY]  builder.append( "eOL: ").append(option.getSingleLine());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
523	[BUG]  [BUGGY]  builder.append( "EOL:  n   ").append(option.getSingleLine());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL:  n   ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:  n   ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
524	[BUG]  [BUGGY]  Builder.append( "JsDocToken.UNREAD_TOKEN ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "JsDocToken.UNREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "JsDocToken.UNREAD_TOKEN ");	  Builder.append(   "no_UNREAD_TOKEN   ");    	non-compiled	[CE]  	88	None	replace
525	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('#');  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('#');  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('#');  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "#   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	49	None	replace
526	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ",# ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ",# ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( ",# ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "#   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	49	None	replace
527	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: ").append(line);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: ").append(line);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION: ").append(line);	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
528	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: ").append(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION: ").append(token);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION: ").append(token);	  builder.append(   "NEXT_IS_ANNOTATION:   ");    	non-compiled	[CE]  	41	None	replace
529	[BUG]  [BUGGY]  builder.append( "[ ").append(option.getSingleLine());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
530	[BUG]  [BUGGY]  builder.append( ": ").append(option.getSingleLine());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ").append(option.getSingleLine());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ").append(option.getSingleLine());	  builder.append(   "n   ").append(option.getSingleLine());    	non-compiled	[CE]  	35	None	replace
531	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getLongText()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getLongText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getLongText()));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
532	[BUG]  [BUGGY]  builder.append( "# ".equals(option.getEOL()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "# ".equals(option.getEOL()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "# ".equals(option.getEOL()));	  builder.append(   "#   ".equals(option.getText()));    	non-compiled	[CE]  	5	None	replace
533	[BUG]  [BUGGY]  Builder.append( "NoEOL ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "NoEOL ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "NoEOL ");	  Builder.append(   "noEOL   ");    	non-compiled	[CE]  	28	None	replace
534	[BUG]  [BUGGY]  builder.append( "[ ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ");	  builder.append(   "*   ");    	non-compiled	[CE]  	18	None	replace
535	[BUG]  [BUGGY]  builder.append( "no-line ").append(option).append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
536	[BUG]  [BUGGY]  builder.append( ", ").append(option).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ", ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ", ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
537	[BUG]  [BUGGY]  builder.append( "eOL: ").append(option).append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ").append(option).append('n');	  builder.append(   "n   ").append(option).append('n');    	non-compiled	[CE]  	98	None	replace
538	[BUG]  [BUGGY]  builder.append( "NEXT_IS_ANNOTATION. ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT_IS_ANNOTATION. ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT_IS_ANNOTATION. ");	  builder.append(   "NEXT_IS_ANNOTATION   ");    	non-compiled	[CE]  	71	None	replace
539	[BUG]  [BUGGY]  builder.append( "EOL  =  ' ".equals(option.getText()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  ' ".equals(option.getText()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  ' ".equals(option.getText()));	  builder.append(   "EOL    =   ".equals(option.getText()));    	non-compiled	[CE]  	77	None	replace
540	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.toString());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.toString());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
541	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getLabel());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getLabel());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getLabel());	  builder.append(   "EOL:   ").equals(option.getText());    	non-compiled	[CE]  	4	None	replace
542	[BUG]  [BUGGY]  builder.append( "eOL: ").append(option);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eOL: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eOL: ").append(option);	  builder.append(   "eOL:   ".equals(option));    	non-compiled	[CE]  	97	None	replace
543	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no. ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no. ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no. ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "no   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	110	None	replace
544	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getString()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getString()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getString()));	  builder.append(   "EOL:   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	33	None	replace
545	[BUG]  [BUGGY]  allowSingleField(WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleField(WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleField(WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
546	[BUG]  [BUGGY]  aughtExceptionHandler(token,  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  aughtExceptionHandler(token,  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	aughtExceptionHandler(token,  WhitespaceOption.SINGLE_LINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
547	[BUG]  [BUGGY]  allowSingleLineNumber(option)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleLineNumber(option)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleLineNumber(option)  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
548	[BUG]  [BUGGY]  allowSingleField(WhitespaceOption.SINGLE_LINE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleField(WhitespaceOption.SINGLE_LINE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleField(WhitespaceOption.SINGLE_LINE))  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
549	[BUG]  [BUGGY]  allowSingleField(WhitespaceOption.SINGLE_LINE);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  allowSingleField(WhitespaceOption.SINGLE_LINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	allowSingleField(WhitespaceOption.SINGLE_LINE);	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
550	[BUG]  [BUGGY]  aughtExceptionHandler(token,  WhitespaceOption.SINGLE_LINE);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  aughtExceptionHandler(token,  WhitespaceOption.SINGLE_LINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	aughtExceptionHandler(token,  WhitespaceOption.SINGLE_LINE);	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
551	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getSource()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getSource()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getSource()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
552	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getExternalChar()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getExternalChar()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getExternalChar()));	  builder.append(   "EOL    =   ".equals(option.getSingleLine()));    	non-compiled	[CE]  	83	None	replace
553	[BUG]  [BUGGY]  builder.append( "NEXT: ".equals(option));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEXT: ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEXT: ".equals(option));	  builder.append(   "NEXT:   ");    	non-compiled	[CE]  	103	None	replace
554	[BUG]  [BUGGY]  builder.append( "None: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "None: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "None: ");	  builder.append(   "NEXT:   ");    	non-compiled	[CE]  	103	None	replace
555	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getDoubleValue()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getDoubleValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getDoubleValue()));	  builder.append(   "EOL:   ").equals(option.getLongValue()));    	non-compiled	[CE]  	61	None	replace
556	[BUG]  [BUGGY]  Builder.append( "no-line ",  option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "no-line ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "no-line ",  option);	  Builder.append(   "no-line   ");    	non-compiled	[CE]  	29	None	replace
557	[BUG]  [BUGGY]  builder.append( "&#160;no ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&#160;no ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&#160;no ");	  builder.append(   "&amp;n   ");    	non-compiled	[CE]  	55	None	replace
558	[BUG]  [BUGGY]  builder.append( "Null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "Null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "Null ");	  builder.append(   "null   ");    	non-compiled	[CE]  	95	None	replace
559	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getKey()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getKey()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getKey()));	  builder.append(   "EOL:   ").equals(option.getValue()));    	non-compiled	[CE]  	89	None	replace
560	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getLineno()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getLineno()));	  builder.append(   "EOL:   ").equals(option.getValue()));    	non-compiled	[CE]  	89	None	replace
561	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "Single  line: ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "Single  line: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "Single  line: ");	  Builder    builder    =    new    StringBuilder(   "n   ");    	non-compiled	[CE]  	108	None	replace
562	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  builder.append( "null ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  builder.append( "null ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  builder.append( "null ");  }  else  {  ignoreStar  =  false;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "null   ");    }    else    {    ignoreStar    =    false;    }    	non-compiled	[CE]  	47	None	replace
563	[BUG]  [BUGGY]  Builder.append( "UnREAD_TOKEN ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "UnREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "UnREAD_TOKEN ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
564	[BUG]  [BUGGY]  Builder.append( "msg.no.unREAD_TOKEN ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.no.unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.no.unREAD_TOKEN ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
565	[BUG]  [BUGGY]  Builder.append( "msg.unREAD_TOKEN ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "msg.unREAD_TOKEN ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "msg.unREAD_TOKEN ");	  Builder.append(   "no_unREAD_TOKEN   ");    	non-compiled	[CE]  	50	None	replace
566	[BUG]  [BUGGY]  builder.append( ", ").append(option.getLongValue());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ", ").append(option.getLongValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ", ").append(option.getLongValue());	  builder.append(   "n   ").append(option.getLongValue());    	non-compiled	[CE]  	58	None	replace
567	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  if(state  ==  State.SEARCHING_EOL)  {  token  =  next();  continue;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  if(state  ==  State.SEARCHING_EOL)  {  token  =  next();  continue;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION;  if(state  ==  State.SEARCHING_EOL)  {  token  =  next();  continue;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	80	None	replace
568	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  if(state  ==  State.SEARCHING_START)  {  token  =  next();  continue;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  if(state  ==  State.SEARCHING_START)  {  token  =  next();  continue;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION;  if(state  ==  State.SEARCHING_START)  {  token  =  next();  continue;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	80	None	replace
569	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  if(!ignoreStar)  {  token  =  next();  continue;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  if(!ignoreStar)  {  token  =  next();  continue;  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION;  if(!ignoreStar)  {  token  =  next();  continue;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	80	None	replace
570	[BUG]  [BUGGY]  Builder.append( "ignoreStarted: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "ignoreStarted: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "ignoreStarted: ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
571	[BUG]  [BUGGY]  Builder.append( "ignored ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "ignored ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "ignored ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
572	[BUG]  [BUGGY]  Builder.append( "ignoreStart ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "ignoreStart ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "ignoreStart ");	  Builder.append(   "no_unreachable   ");    	non-compiled	[CE]  	30	None	replace
573	[BUG]  [BUGGY]  builder.append( "NEW: ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ").append(option);	  builder.append(   "EOL:   ").append(option);    	non-compiled	[CE]  	43	None	replace
574	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	throw  new  IllegalArgumentException( " ");	  if(state!=    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
575	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  false;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  false;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  false;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
576	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  null;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  null;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  null;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
577	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  state  :  SEARCHING_NEWLINE;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  state  :  SEARCHING_NEWLINE;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  state  :  SEARCHING_NEWLINE;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
578	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  true  :  false;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  true  :  false;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  true  :  false;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
579	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  state;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  state;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  SEARCHING_NEWLINE  :  state;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
580	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  EOL  :  null;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  EOL  :  null;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION?  EOL  :  null;	  State.SEARCHING_ANNOTATION    =    false;    	non-compiled	[CE]  	15	None	replace
581	[BUG]  [BUGGY]  builder.append( "[ ".equals(option.getLabel()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[ ".equals(option.getLabel()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[ ".equals(option.getLabel()));	  builder.append(   "[   ".equals(option.getText()));    	non-compiled	[CE]  	113	None	replace
582	[BUG]  [BUGGY]  builder.append( "&] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&] ");	  builder.append(   "&nbsp;]   ");    	non-compiled	[CE]  	54	None	replace
583	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
584	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION  ||  state!=  WhitespaceOption.NEXT_IS_ANNOTATION;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
585	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state!=  NEXT_IS_ANNOTATION;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state!=  NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION  ||  state!=  NEXT_IS_ANNOTATION;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
586	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;	  State    state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	13	None	replace
587	[BUG]  [BUGGY]  builder.append( "EOL: ").append(token).append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(token).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(token).append('n');	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
588	[BUG]  [BUGGY]  builder.append( "NEWLINE: ").append(option).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEWLINE: ").append(option).append('n');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEWLINE: ").append(option).append('n');	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
589	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option).append('n',  endLineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option).append('n',  endLineno);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option).append('n',  endLineno);	  builder.append(   "EOL:   ").append(option).append('n');    	non-compiled	[CE]  	85	None	replace
590	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getLabel()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getLabel()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getLabel()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
591	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleLineNumber()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleLineNumber()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleLineNumber()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
592	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleLineno()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleLineno()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleLineno()));	  builder.append(   "EOL:   ").equals(option.getSingleLine()));    	non-compiled	[CE]  	84	None	replace
593	[BUG]  [BUGGY]  builder.append( ": ".equals(option)&&  option!=  WhitespaceOption.SINGLE_LINE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ".equals(option)&&  option!=  WhitespaceOption.SINGLE_LINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ".equals(option)&&  option!=  WhitespaceOption.SINGLE_LINE);	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
594	[BUG]  [BUGGY]  builder.append( ": ").append(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ").append(token);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ").append(token);	  builder.append(   ":   ".equals(option));    	non-compiled	[CE]  	114	None	replace
595	[BUG]  [BUGGY]  builder.append( "NEW: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "NEW: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "NEW: ");	  builder.append(   "eOL:   ");    	non-compiled	[CE]  	102	None	replace
596	[BUG]  [BUGGY]  TokenBuffer  token  =  nextToken();  continue;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  TokenBuffer  token  =  nextToken();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	TokenBuffer  token  =  nextToken();  continue;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    	non-compiled	[CE]  	82	None	replace
597	[BUG]  [BUGGY]  builder.append( "no-line ").append(option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ").append(option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ").append(option);	  builder.append(   "n   ").append(option);    	non-compiled	[CE]  	39	None	replace
598	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State  state  =  State.SEARCHING_ANNOTATION;  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	68	None	replace
599	[BUG]  [BUGGY]  mockingAnnotation( "SEARCHING_ANNOTATION "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingAnnotation( "SEARCHING_ANNOTATION "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingAnnotation( "SEARCHING_ANNOTATION "))  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
600	[BUG]  [BUGGY]  mockingAnnotation( "SEARCHING_ANNOTATION "))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingAnnotation( "SEARCHING_ANNOTATION "))  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingAnnotation( "SEARCHING_ANNOTATION "))  throw  new  IllegalArgumentException( " ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
601	[BUG]  [BUGGY]  mockingAnnotation( "SEARCHING_ANNOTATION ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingAnnotation( "SEARCHING_ANNOTATION ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingAnnotation( "SEARCHING_ANNOTATION ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	62	None	replace
602	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "null ",  option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "null ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "null ",  option);	  mockingJsDocBuilder.append(   "null   ");    	non-compiled	[CE]  	105	None	replace
603	[BUG]  [BUGGY]  builder.append( "[no-line] ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "[no-line] ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "[no-line] ");	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
604	[BUG]  [BUGGY]  builder.append( ":not-line ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ":not-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":not-line ");	  builder.append(   ":no-line   ");    	non-compiled	[CE]  	8	None	replace
605	[BUG]  [BUGGY]  builder.append( "&apos; ",  true);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&apos; ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&apos; ",  true);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
606	[BUG]  [BUGGY]  builder.append( "&nbsp;n ",  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "&nbsp;n ",  true);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&nbsp;n ",  true);	  builder.append(   "&nbsp;   ",    true);    	non-compiled	[CE]  	90	None	replace
607	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option)&&  option!=  WhitespaceOption.SINGLE_BLOCK);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option)&&  option!=  WhitespaceOption.SINGLE_BLOCK);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option)&&  option!=  WhitespaceOption.SINGLE_BLOCK);	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
608	[BUG]  [BUGGY]  builder.append( "EOL  =  [ ".equals(option));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =  [ ".equals(option));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =  [ ".equals(option));	  builder.append(   "EOL    =   ".equals(option));    	non-compiled	[CE]  	75	None	replace
609	[BUG]  [BUGGY]  Builder.append( "EOL  = ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder.append( "EOL  = ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder.append( "EOL  = ");	  Builder.append(   "EOL   ");    	non-compiled	[CE]  	45	None	replace
610	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	parent  =  parent.getParent();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
611	[BUG]  [BUGGY]  bucketToken  =  next();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketToken  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketToken  =  next();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
612	[BUG]  [BUGGY]  bucketToken  =  next();  continue;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketToken  =  next();  continue;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketToken  =  next();  continue;	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
613	[BUG]  [BUGGY]  bucket  =  next();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucket  =  next();  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucket  =  next();	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    token    =    next();    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
614	[BUG]  [BUGGY]  builder.append( "EOL: ".equals(option.getMessage()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ".equals(option.getMessage()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ".equals(option.getMessage()));	  builder.append(   "EOL:   ".equals(option.getText()));    	non-compiled	[CE]  	1	None	replace
615	[BUG]  [BUGGY]  Builder  builder.append( "eOL: ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder.append( "eOL: ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder.append( "eOL: ");	  Builder    builder.append(   "no   ");    	non-compiled	[CE]  	93	None	replace
616	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getDoubleValue()));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getDoubleValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getDoubleValue()));	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
617	[BUG]  [BUGGY]  builder.append( "EOL  =   ".equals(option.getStringValue()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL  =   ".equals(option.getStringValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL  =   ".equals(option.getStringValue()));	  builder.append(   "EOL    =   ".equals(option.getLongValue()));    	non-compiled	[CE]  	76	None	replace
618	[BUG]  [BUGGY]  builder.append( "eo-line ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "eo-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "eo-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
619	[BUG]  [BUGGY]  builder.append( "misplace-line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "misplace-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "misplace-line ");	  builder.append(   "no-line   ");    	non-compiled	[CE]  	20	None	replace
620	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(JsDocToken.START_LINE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder(JsDocToken.START_LINE);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder(JsDocToken.START_LINE);	  Builder    builder    =    new    JSDocInfoBuilder();    	non-compiled	[CE]  	107	None	replace
621	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option).append(')');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option).append(')');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option).append(')');	  builder.append(   "EOL:   ").equals(option));    	non-compiled	[CE]  	40	None	replace
622	[BUG]  [BUGGY]  builder.append( "?> ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "?> ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "?> ");	  builder.append(   "#   ");    	non-compiled	[CE]  	19	None	replace
623	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;	  tate    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	72	None	replace
624	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  tate  =  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	tate  =  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION;	  tate    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	72	None	replace
625	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "no-line ",  option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "no-line ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "no-line ",  option);	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
626	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "NO-line ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  mockingJsDocBuilder.append( "NO-line ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	mockingJsDocBuilder.append( "NO-line ");	  mockingJsDocBuilder.append(   "no-line   ");    	non-compiled	[CE]  	106	None	replace
627	[BUG]  [BUGGY]  builder.append('[');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append('[');  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append('[');	  builder.append(   "]   ");    	non-compiled	[CE]  	17	None	replace
628	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getDoubleValue());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getDoubleValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getDoubleValue());	  builder.append(   "EOL:   ").equals(option.getLongValue());    	non-compiled	[CE]  	60	None	replace
629	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getSingleLineNumber());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getSingleLineNumber());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getSingleLineNumber());	  builder.append(   "EOL:   ").equals(option.getSingleLine());    	non-compiled	[CE]  	36	None	replace
630	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.getLineno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.getLineno());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.getLineno());	  builder.append(   "EOL:   ").equals(option.getValue());    	non-compiled	[CE]  	24	None	replace
631	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  ||  state  ==  WhitespaceOption.NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
632	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  ||  state!=  WhitespaceOption.NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
633	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  &&  option!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  &&  option!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  &&  option!=  WhitespaceOption.NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
634	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
635	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  &&  token!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  &&  token!=  WhitespaceOption.NEXT_IS_ANNOTATION;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	state  =  State.SEARCHING_ANNOTATION  &&  token!=  WhitespaceOption.NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	9	None	replace
636	[BUG]  [BUGGY]  Builder  builder  =  System.getProperty( "line.separator ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  System.getProperty( "line.separator ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  System.getProperty( "line.separator ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
637	[BUG]  [BUGGY]  Builder  builder  =  jsdocBuilder.append( "null ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  jsdocBuilder.append( "null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  jsdocBuilder.append( "null ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
638	[BUG]  [BUGGY]  Builder  builder  =  System.getProperty( "line.separator ", "null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  System.getProperty( "line.separator ", "null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  System.getProperty( "line.separator ", "null ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
639	[BUG]  [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder( "null ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  JSDocInfoBuilder( "null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  JSDocInfoBuilder( "null ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
640	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder( "null ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder( "null ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder( "null ");	  Builder    builder.append(   "null   ");    	non-compiled	[CE]  	44	None	replace
641	[BUG]  [BUGGY]  builder.append( "EOL: ").append(option.toString()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "EOL: ").append(option.toString()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL: ").append(option.toString()));	  builder.append(   "EOL:   ").equals(option.getText()));    	non-compiled	[CE]  	78	None	replace
642	[BUG]  [BUGGY]  Builder  builder  =  new  StringBuilder(64);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  Builder  builder  =  new  StringBuilder(64);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	Builder  builder  =  new  StringBuilder(64);	  Builder    builder    =    new    StringBuilder();    	non-compiled	[CE]  	94	None	replace
643	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getDoubleValue()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getDoubleValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getDoubleValue()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
644	[BUG]  [BUGGY]  builder.append( "no-line ".equals(option.getStringValue()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( "no-line ".equals(option.getStringValue()));  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "no-line ".equals(option.getStringValue()));	  builder.append(   "no-line   ".equals(option.getLongValue()));    	non-compiled	[CE]  	119	None	replace
645	[BUG]  [BUGGY]  builder.append( ": ").append(option.getValue());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  builder.append( ": ").append(option.getValue());  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ": ").append(option.getValue());	  builder.append(   "n   ").append(option.getValue());    	non-compiled	[CE]  	22	None	replace
646	[BUG]  [BUGGY]  bucketBuilder.append( "null ",  option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "null ",  option);  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "null ",  option);	  bucketBuilder.append(   "null   ");    	non-compiled	[CE]  	117	None	replace
647	[BUG]  [BUGGY]  bucketBuilder.append( "NEW ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  bucketBuilder.append( "NEW ");  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	bucketBuilder.append( "NEW ");	  bucketBuilder.append(   "null   ");    	non-compiled	[CE]  	117	None	replace
648	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  Option.NEW;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  Option.NEW;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  Option.NEW;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
649	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  default;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {      [BUGGY]  State.SEARCHING_ANNOTATION  =  default;  [BUGGY]      }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	State.SEARCHING_ANNOTATION  =  default;	  State.SEARCHING_ANNOTATION    =    state;    	non-compiled	[CE]  	12	None	replace
