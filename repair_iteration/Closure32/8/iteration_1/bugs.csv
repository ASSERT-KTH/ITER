bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  builder.append( "n ");  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "n ");  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ");	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
2	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
4	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
5	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]              ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  ignoreStar  =  false;  }  [CE]  [FE]                ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  ignoreStar  =  false;  }  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  ignoreStar  =  false;  }	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
8	[BUG]  [BUGGY]    [CE]  [FE]                  ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]    [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	  	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  builder.append( "&nbsp;n ");  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "&nbsp;n ");  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "&nbsp;n ");	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  builder.append( "rn ");  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "rn ");  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "rn ");	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
11	[BUG]  [BUGGY]  builder.append( "EOLn ");  [CE]  [FE]        ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "EOLn ");  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOLn ");	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
12	[BUG]  [BUGGY]  builder.append( "EOL:n ");  [CE]  [FE]          ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "EOL:n ");  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "EOL:n ");	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
13	[BUG]  [BUGGY]  builder.append( ":n ");  [CE]  [FE]            ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( ":n ");  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( ":n ");	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
14	[BUG]  [BUGGY]  builder.append( "n ".equals(option.getLongValue()));  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "n ".equals(option.getLongValue()));  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ".equals(option.getLongValue()));	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  builder.append( "n ".equals(option.getText()));  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "n ".equals(option.getText()));  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ".equals(option.getText()));	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  builder.append( "n ".equals(option));  [CE]  [FE]        ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "n ".equals(option));  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ".equals(option));	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  builder.append( "n ".equals(option.getSingleLine()));  [CE]  [FE]          ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "n ".equals(option.getSingleLine()));  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ".equals(option.getSingleLine()));	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
18	[BUG]  [BUGGY]  builder.append( "n ".equals(option.getValue()));  [CE]  [FE]            ComparisonFailure  [CONTEXT]  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]  builder.append( "n ".equals(option.getValue()));  [BUGGY]  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	builder.append( "n ".equals(option.getValue()));	builder.append( "\n ");  	non-compiled	[CE]  	15	None	replace
