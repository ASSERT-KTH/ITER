bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(preserve.equals( "* "))  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( "* "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( "* "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
2	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.equals( "   "))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.equals( "   "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.equals( "   "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
3	[BUG]  [BUGGY]  if(preserve.equals( "- "))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( "- "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( "- "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
4	[BUG]  [BUGGY]  if(preserve.equals( "/ "))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( "/ "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( "/ "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
5	[BUG]  [BUGGY]  if(preserve.equals( "_ "))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( "_ "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( "_ "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
6	[BUG]  [BUGGY]  if(preserve.equals( "n "))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( "n "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( "n "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
7	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "n ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( "n ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( "n ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	12	None	replace
8	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "null ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( "null ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( "null ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	12	None	replace
9	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "n ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "n ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "   ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( "   ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( "   ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	12	None	replace
11	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  >  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
12	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
13	[BUG]  [BUGGY]  if(preserve  ==  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  fileLevelJsDocBuilder.length()  >  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
14	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  >=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  >=  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
15	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  <=  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  <=  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
16	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()!=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.length()!=  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
17	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.length()  ==  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
18	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.length()  >=  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.length()  >=  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
19	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
20	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.token!=  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
21	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
22	[BUG]  [BUGGY]  if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
23	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
24	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
25	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  this.fileLevelJsDocBuilder.readLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  this.fileLevelJsDocBuilder.readLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  this.fileLevelJsDocBuilder.readLine();	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
26	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
27	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  parser.readLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  parser.readLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  parser.readLine();	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
28	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine(),  preserve);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine(),  preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine(),  preserve);	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  ';'  expected	43	None	replace
29	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  sourceFile.readLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  sourceFile.readLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  sourceFile.readLine();	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
30	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  -  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  -  1;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  -  1;	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
31	[BUG]  [BUGGY]  if(preserve.length()!=  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()!=  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()!=  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
32	[BUG]  [BUGGY]  if(preserve.length()  >=  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >=  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >=  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
33	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserve.length()  ==  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
34	[BUG]  [BUGGY]  if(preserve.length()  >  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
35	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
36	[BUG]  [BUGGY]  if(preserve  ==  null  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
37	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder  ==  null)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder  ==  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder  ==  null)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
38	[BUG]  [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
39	[BUG]  [BUGGY]  if(remainder!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainder!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainder!=  null  &&  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
40	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append('n');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append('n');	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	14	None	replace
41	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append('n');  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append('n');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append('n');	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  ';'  expected	14	None	replace
42	[BUG]  [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  fileLevelJsDocBuilder.append('n');  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	14	None	replace
43	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('N');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append('N');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append('N');	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	14	None	replace
44	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
45	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
46	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
47	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(true);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(true);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(true);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
48	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(token);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(token);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
49	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getParent();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getParent();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
50	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getNext();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getNext();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getNext();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
51	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevel();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevel();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevel();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
52	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getParent();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getParent();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
53	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.next();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
54	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getDescription();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getDescription();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getDescription();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
55	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserve.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserve.length  >  0)  {	  if(preserve!=    null    &&    preserve.length    >    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
56	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserve.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserve.length  >  0)  {	  if(preserve!=    null    &&    preserve.length    >    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
57	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserve.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserve.length  >  0)  {	  if(preserve!=    null    &&    preserve.length    >    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
58	[BUG]  [BUGGY]  if(remainder!=  null  &&  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainder!=  null  &&  preserve.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainder!=  null  &&  preserve.length  >  0)  {	  if(preserve!=    null    &&    preserve.length    >    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
59	[BUG]  [BUGGY]  if(reserve!=  null  &&  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(reserve!=  null  &&  preserve.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(reserve!=  null  &&  preserve.length  >  0)  {	  if(preserve!=    null    &&    preserve.length    >    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
60	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.length()  <=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.length()  <=  0)  {	  if(preserve!=    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
61	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.isSupported())  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
62	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.isSupported())  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
63	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.isSupported())  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
64	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.isSupported())  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
65	[BUG]  [BUGGY]  if(remainder!=  null  &&  preserveInfo.isSupported())  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainder!=  null  &&  preserveInfo.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainder!=  null  &&  preserveInfo.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
66	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
67	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
68	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder().intValue();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder().intValue();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder().intValue();	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
69	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
70	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(collection);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(collection);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(collection);	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
71	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
72	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
73	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
74	[BUG]  [BUGGY]  if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
75	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
76	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
77	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "label ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( "label ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( "label ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(   "n   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	32	None	replace
78	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.length()!=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.length()!=  0)  {	  if(preserve!=    null    &&    preserveInfo.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
79	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.length()  ==  0)  {	  if(preserve!=    null    &&    preserveInfo.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
80	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.length()  >=  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.length()  >=  0)  {	  if(preserve!=    null    &&    preserveInfo.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
81	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.length  >  0)  {	  if(preserve!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
82	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.length  >  0)  {	  if(preserve!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
83	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.length  >  0)  {	  if(preserve!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
84	[BUG]  [BUGGY]  if(remainder!=  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainder!=  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainder!=  null  &&  preserveInfo.length  >  0)  {	  if(preserve!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
85	[BUG]  [BUGGY]  if(preserve.length()  ==  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
86	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
87	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length())!=  '/')  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length())!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length())!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
88	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
89	[BUG]  [BUGGY]  if(preserve.length()!=  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()!=  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()!=  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
90	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
91	[BUG]  [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  next().token;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  next().token;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  fileLevelJsDocBuilder  =  next().token;	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
92	[BUG]  [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder();	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
93	[BUG]  [BUGGY]  JsDocToken  fileLevelJsDocBuilder  =  next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JsDocToken  fileLevelJsDocBuilder  =  next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JsDocToken  fileLevelJsDocBuilder  =  next();	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
94	[BUG]  [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  preserveInfo.next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  preserveInfo.next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  fileLevelJsDocBuilder  =  preserveInfo.next();	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
95	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserve.length()!=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserve.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserve.length()!=  0)  {	  if(preserve!=    null    &&    preserve.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
96	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
97	[BUG]  [BUGGY]  JSDocToken  next  =  preserveInfo.next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  preserveInfo.next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  preserveInfo.next();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
98	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.next();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
99	[BUG]  [BUGGY]  JSDocToken  next  =  parser.next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  parser.next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  parser.next();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
100	[BUG]  [BUGGY]  JSDocToken  next  =  last();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  last();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  last();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
101	[BUG]  [BUGGY]  JSDocToken  next  =  enumerationInfo.next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  enumerationInfo.next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  enumerationInfo.next();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
102	[BUG]  [BUGGY]  JSDocToken  next  =  parser();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  parser();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  parser();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
103	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.length()  ==  0)  {	  if(preserve!=    null    ||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
104	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserve.length()  ==  0)  {	  if(preserve    ==    null    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
105	[BUG]  [BUGGY]  if(preserve  >=  null  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  ||  preserve.length()  ==  0)  {	  if(preserve    ==    null    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
106	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve);  continue  retry;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(preserve);  continue  retry;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(preserve);  continue  retry;	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
107	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder.append(preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder.append(preserve);	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
108	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(label);  continue  retry;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(label);  continue  retry;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(label);  continue  retry;	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
109	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append('n');  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append('n');  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('n');  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append('n');    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
110	[BUG]  [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('N');  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append('N');  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  fileLevelJsDocBuilder.append('N');  }  else  {  fileLevelJsDocBuilder.append('n');  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append('n');    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
111	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserve.length()  <=  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserve.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserve.length()  <=  0)  {	  if(preserve!=    null    ||    preserve.length()    <=    0)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
112	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(remainder);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(remainder);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(remainder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	10	None	replace
113	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(';');  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(';');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(';');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	10	None	replace
114	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(parse);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(parse);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(parse);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	10	None	replace
115	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve,  preserve);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve,  preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve,  preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	10	None	replace
116	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(reserve);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(reserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(reserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	10	None	replace
117	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.isLicense())  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
118	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.isLicense())  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
119	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.isLicense())  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
120	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.isLicense())  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
121	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isStatement())  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isStatement())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isStatement())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
122	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.length()  >  0)  {	  if(preserve!=    null    &&    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
123	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.token.length()  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.token.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.token.length()  >  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
124	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.token.length()  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.token.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.token.length()  >  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
125	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.token.length()  ==  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.token.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.token.length()  ==  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
126	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token.length()  >  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.token.length()  >  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
127	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserve.token.length()  >  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserve.token.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserve.token.length()  >  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
128	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token.length()  >  0)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.token.length()  >  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
129	[BUG]  [BUGGY]  if(preserve.length()  ==  0  &&  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  &&  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  &&  preserve.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
130	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.length()!=  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.length()!=  0)  {	  if(preserve.length()    ==    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
131	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
132	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
133	[BUG]  [BUGGY]  if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainingRc!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
134	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
135	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
136	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  nextToken();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  nextToken();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  nextToken();	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
137	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  next().getState();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  next().getState();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  next().getState();	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
138	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  nextState();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  nextState();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  nextState();	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
139	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  next().token;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  next().token;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  next().token;	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
140	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  next().state;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  next().state;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  next().state;	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
141	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  nextLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  nextLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  nextLine();	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
142	[BUG]  [BUGGY]  if(preserve.length()  ==  0  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  &&  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
143	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  ==  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(fileLevelJsDocBuilder.length()  ==  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(fileLevelJsDocBuilder.length()  ==  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
144	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
145	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.length()!=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.length()!=  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
146	[BUG]  [BUGGY]  if(preserve.length()!=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()!=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()!=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
147	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  nextToken();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  nextToken();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  nextToken();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
148	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().intValue();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().intValue();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  next().intValue();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
149	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  token();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  token();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  token();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
150	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  next()  -  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  next()  -  1;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  next()  -  1;	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
151	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().token;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().token;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  next().token;	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
152	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  last();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  last();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  last();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
153	[BUG]  [BUGGY]  if(remainder!=  null  ||  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainder!=  null  ||  preserve.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainder!=  null  ||  preserve.length()  >  0)  {	  if(remainder!=    null    &&    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
154	[BUG]  [BUGGY]  if(remainder  ==  null  &&  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(remainder  ==  null  &&  preserve.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(remainder  ==  null  &&  preserve.length()  >  0)  {	  if(remainder!=    null    &&    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
155	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(label);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(label);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(label);	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	9	None	replace
156	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  0)  {	  if(preserve!=    null    ||    preserve.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
157	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( ", ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
158	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ",n ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( ",n ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( ",n ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
159	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( ", ");  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( ", ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( ", ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	13	None	replace
160	[BUG]  [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
161	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(preserve,  preserve);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
162	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(line);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(line);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
163	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(remainder);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(remainder);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(remainder);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
164	[BUG]  [BUGGY]  if(preserve.length()  ==  0  &&  preserve.equals( "   "))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  &&  preserve.equals( "   "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  &&  preserve.equals( "   "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
165	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "* "))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "* "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.equals( "* "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
166	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "- "))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "- "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.equals( "- "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
167	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "_ "))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "_ "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.equals( "_ "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
168	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "/ "))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.equals( "/ "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.equals( "/ "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
169	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  preserve.equals( "   "))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserve.length()  ==  0  ||  preserve.equals( "   "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserve.length()  ==  0  ||  preserve.equals( "   "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
170	[BUG]  [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()  >  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
171	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
172	[BUG]  [BUGGY]  if(preserve  >=  null  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
173	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
174	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.length()  ==  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
175	[BUG]  [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	12	None	replace
176	[BUG]  [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(   "n   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	32	None	replace
177	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
178	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.isSupported())  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
179	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.isSupported())  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
180	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isSupported()  ||  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isSupported()  ||  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isSupported()  ||  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
181	[BUG]  [BUGGY]  if(preserveInfo!=  null  ||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  ||  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  ||  preserveInfo.length()  ==  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
182	[BUG]  [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo  ==  null  ||  preserveInfo.length()  ==  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
183	[BUG]  [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()!=  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo  ==  null  ||  preserveInfo.length()!=  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
184	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.length()  >  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
185	[BUG]  [BUGGY]  if(preserve.length()!=  0  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()!=  0  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()!=  0  &&  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
186	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
187	[BUG]  [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
188	[BUG]  [BUGGY]  if(preserve.equals( " ")&&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( " ")&&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( " ")&&  fileLevelJsDocBuilder!=  null)  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
189	[BUG]  [BUGGY]  if(preserve.equals( " ")||  preserve.equals( "* "))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( " ")||  preserve.equals( "* "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( " ")||  preserve.equals( "* "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
190	[BUG]  [BUGGY]  if(preserve.equals( " ")||  preserve.equals( "- "))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( " ")||  preserve.equals( "- "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( " ")||  preserve.equals( "- "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
191	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.isLicense())  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
192	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isPreserve())  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isPreserve())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isPreserve())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
193	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isExtern())  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isExtern())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isExtern())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
194	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserve.equals( " "))  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  preserve.equals( " "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  preserve.equals( " "))  {	  if(preserve    ==    null)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
195	[BUG]  [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()!=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  fileLevelJsDocBuilder.length()!=  0)  {	  if(preserve    ==    null    ||    preserve.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
196	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
197	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.readLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.readLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.readLine();	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
198	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '-';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '-';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '-';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
199	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+');  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+');	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  ';'  expected	43	None	replace
200	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '>';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '>';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '>';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
201	[BUG]  [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
202	[BUG]  [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  first();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  first();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  fileLevelJsDocBuilder  =  first();	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
203	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	9	None	replace
204	[BUG]  [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append(LICENSE);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  fileLevelJsDocBuilder.append(LICENSE);  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  fileLevelJsDocBuilder.append(LICENSE);  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	9	None	replace
205	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
206	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
207	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  first();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  first();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  first();	  State    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	41	None	replace
208	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  >=  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder.length()  >=  0)  {	  if(preserve    ==    null    ||    preserve.length()    >=    0)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
209	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
210	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(';');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(';');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(';');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	10	None	replace
211	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	10	None	replace
212	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	10	None	replace
213	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder;	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
214	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()!=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.length()!=  0)  {	  if(preserve!=    null    &&    preserve.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
215	[BUG]  [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length()!=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  &&  preserveInfo.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  &&  preserveInfo.length()!=  0)  {	  if(preserve!=    null    &&    preserveInfo.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
216	[BUG]  [BUGGY]  if(preserve  >=  null  ||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  ||  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  ||  preserveInfo.length()  ==  0)  {	  if(preserve!=    null    ||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
217	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getSourceFile();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getSourceFile();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getSourceFile();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
218	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileParent();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileParent();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
219	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getPrevious();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getPrevious();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getPrevious();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
220	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.equals( " "))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.equals( " "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  fileLevelJsDocBuilder.equals( " "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
221	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  ||  preserve.equals( "   "))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  ||  preserve.equals( "   "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.length()  ==  0  ||  preserve.equals( "   "))  {	  if(preserve.length()    ==    0    ||    preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
222	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.length  >  0)  {	  if(preserve!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
223	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token.length()  ==  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
224	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token.length()  >=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token.length()  >=  0)  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
225	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.length()  ==  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
226	[BUG]  [BUGGY]  if(preserve.length()!=  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()!=  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()!=  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
227	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.length()  <=  0  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.length()  <=  0  ||  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.length()  <=  0  ||  preserve.length()  ==  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
228	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {	  if(preserve!=    null    &&    preserve.length    >    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
229	[BUG]  [BUGGY]  JSDocToken  next  =  first();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  first();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  first();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
230	[BUG]  [BUGGY]  JsDocToken  next  =  next();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JsDocToken  next  =  next();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JsDocToken  next  =  next();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
231	[BUG]  [BUGGY]  JSDocToken  next  =  parse(token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  parse(token);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  parse(token);	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
232	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('n');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('n');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('n');	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	14	None	replace
233	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(LICENSE);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(LICENSE);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(LICENSE);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
234	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append('  ');  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append('  ');	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
235	[BUG]  [BUGGY]  if(preserve  ==  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append('n');  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append('n');    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
236	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  continue  retry;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  continue  retry;  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  continue  retry;	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
237	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
238	[BUG]  [BUGGY]  if(preserve  >=  null  ||  preserve.length()  <=  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  ||  preserve.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  ||  preserve.length()  <=  0)  {	  if(preserve    ==    null    ||    preserve.length()    <=    0)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
239	[BUG]  [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()  <=  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo  ==  null  ||  preserveInfo.length()  <=  0)  {	  if(preserve    ==    null    ||    preserve.length()    <=    0)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
240	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()  <=  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.length()  <=  0)  {	  if(preserve    ==    null    ||    preserve.length()    <=    0)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
241	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "no   ");  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append( "no   ");  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append( "no   ");	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(   "n   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	32	None	replace
242	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.length()  >  0)  {	  if(preserve!=    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
243	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()  >=  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.length()  >=  0)  {	  if(preserve!=    null    ||    preserve.length()    >=    0)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
244	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserve.length()  >=  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserve.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserve.length()  >=  0)  {	  if(preserve!=    null    ||    preserve.length()    >=    0)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
245	[BUG]  [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();	  JSDocToken    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
246	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(annotation);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(annotation);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(annotation);	  Integer    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	38	None	replace
247	[BUG]  [BUGGY]  if(preserve.length()  >  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
248	[BUG]  [BUGGY]  if(preserve.length()  <=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  <=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  <=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
249	[BUG]  [BUGGY]  if(preserve.length()  >=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >=  0  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
250	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(annotation);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(annotation);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(annotation);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
251	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(line);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(line);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(line);	  State    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	40	None	replace
252	[BUG]  [BUGGY]  JSDocToken  next  =  parseAndIgnoreWhitespace(token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  parseAndIgnoreWhitespace(token);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  parseAndIgnoreWhitespace(token);	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
253	[BUG]  [BUGGY]  JSDocToken  next  =  nextToken();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  JSDocToken  next  =  nextToken();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	JSDocToken  next  =  nextToken();	  JSDocToken    next    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	42	None	replace
254	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '-';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '-';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '-';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
255	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine(),  fileLevelJsDocBuilder.append(preserve);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine(),  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine(),  fileLevelJsDocBuilder.append(preserve);	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  ';'  expected	43	None	replace
256	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '+';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '+';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '+';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
257	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(line.length()  -  1)!=  'n';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(line.length()  -  1)!=  'n';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(line.length()  -  1)!=  'n';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
258	[BUG]  [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '/';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '/';  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	State  fileLevelJsDocBuilder  =  stream.readLine()  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelName.length()  -  1)!=  '/';	  State    fileLevelJsDocBuilder    =    stream.readLine();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	43	None	replace
259	[BUG]  [BUGGY]  if(preserve.equals( " ")||  preserve.equals( ": "))  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( " ")||  preserve.equals( ": "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( " ")||  preserve.equals( ": "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
260	[BUG]  [BUGGY]  if(preserve.equals( " ")||  preserve.equals( "] "))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.equals( " ")||  preserve.equals( "] "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.equals( " ")||  preserve.equals( "] "))  {	  if(preserve.equals(   "   "))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
261	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserveInfo.length()  ==  0)  {	  if(preserve!=    null    ||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
262	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.length()  ==  0)  {	  if(preserve!=    null    ||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
263	[BUG]  [BUGGY]  if(preserve  >=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
264	[BUG]  [BUGGY]  if(preserve  >=  null  ||  preserve.length()!=  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  ||  preserve.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  ||  preserve.length()!=  0)  {	  if(preserve    ==    null    ||    preserve.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
265	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserve.charAt(0)  ==  '-')  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserve.charAt(0)  ==  '-')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserve.charAt(0)  ==  '-')  {	  if(preserve.length()    ==    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
266	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.isSupported())  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.isSupported())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.isSupported())  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
267	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isSupported()  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isSupported()  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isSupported()  ||  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
268	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isSupported()  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isSupported()  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isSupported()  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.isSupported())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
269	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  fileLevelJsDocBuilder.append(precedence);  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	fileLevelJsDocBuilder.append(precedence);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
270	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserve.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserve.length()  >  0)  {	  if(preserve    >=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
271	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NUMBER)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NUMBER)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NUMBER)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
272	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
273	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve    ==    null)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
274	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.EXPR_RESULT)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.EXPR_RESULT)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.EXPR_RESULT)  {	  if(preserve    ==    null)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
275	[BUG]  [BUGGY]  if(preserveInfo!=  null  ||  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  ||  preserveInfo.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  ||  preserveInfo.length()  >  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
276	[BUG]  [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()  >=  0)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo  ==  null  ||  preserveInfo.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo  ==  null  ||  preserveInfo.length()  >=  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
277	[BUG]  [BUGGY]  if(preserveInfo  ==  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo  ==  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo  ==  null  ||  fileLevelJsDocBuilder.length()  >  0)  {	  if(preserveInfo    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
278	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append('n');  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append('n');    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
279	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append('n');    }    else    {    fileLevelJsDocBuilder.append('n');    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
280	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	47	None	replace
281	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
282	[BUG]  [BUGGY]  if(preserve  ==  null)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
283	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  fileLevelJsDocBuilder.append(preserve);  continue  retry;  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    continue    retry;    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
284	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  next().fileLevelJsDocBuilder();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
285	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  nextImpl();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  nextImpl();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  nextImpl();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
286	[BUG]  [BUGGY]  Integer  fileLevelJsDocBuilder  =  nextInteger();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  Integer  fileLevelJsDocBuilder  =  nextInteger();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	Integer  fileLevelJsDocBuilder  =  nextInteger();	  Integer    fileLevelJsDocBuilder    =    next();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	37	None	replace
287	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.length  >  0)  {	  if(preserve    ==    null    &&    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
288	[BUG]  [BUGGY]  if(preserve  >=  null  ||  preserve.length()  >=  0)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  ||  preserve.length()  >=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  ||  preserve.length()  >=  0)  {	  if(preserve    ==    null    ||    preserve.length()    >=    0)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
289	[BUG]  [BUGGY]  if(preserve!=  null)  {  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null)  {  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null)  {  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  }	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	10	None	replace
290	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	10	None	replace
291	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	10	None	replace
292	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserve.length()  ==  0)  {	  if(preserve!=    null    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
293	[BUG]  [BUGGY]  if(preserve  [Delete]  null  &&  preserve.length()  ==  0)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  [Delete]  null  &&  preserve.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  [Delete]  null  &&  preserve.length()  ==  0)  {	  if(preserve!=    null    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
294	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserve.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserve.length()  >  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
295	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserve.length  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserve.length  >  0)  {	  if(preserve!=    null    &&    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
296	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token.equals( " "))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token.equals( " "))  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token.equals( " "))  {	  if(preserve!=    null    &&    preserveInfo.token.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	35	None	replace
297	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.isLicense())  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
298	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isLicense()  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isLicense()  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isLicense()  &&  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
299	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.isLicense()  ||  preserveInfo.isLicense())  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.isLicense()  ||  preserveInfo.isLicense())  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.isLicense()  ||  preserveInfo.isLicense())  {	  if(preserve!=    null    &&    preserveInfo.isLicense())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
300	[BUG]  [BUGGY]  if(preserve  >=  null  ||  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  ||  preserveInfo.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  ||  preserveInfo.length()  >  0)  {	  if(preserve    ==    null    ||    preserveInfo.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
301	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.length()  <=  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.length()  <=  0)  {	  if(preserve!=    null    ||    preserve.length()    <=    0)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
302	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserve.length()  <=  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserve.length()  <=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserve.length()  <=  0)  {	  if(preserve!=    null    ||    preserve.length()    <=    0)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
303	[BUG]  [BUGGY]  if(preserve.length()  ==  0  ||  preserveInfo.token.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  ==  0  ||  preserveInfo.token.length()  ==  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  ==  0  ||  preserveInfo.token.length()  ==  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
304	[BUG]  [BUGGY]  if(preserve.length()  <=  0  ||  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  <=  0  ||  preserve.length()  >  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  <=  0  ||  preserve.length()  >  0)  {	  if(preserve.length()    <=    0    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
305	[BUG]  [BUGGY]  if(preserve  ==  null)  {  fileLevelJsDocBuilder.append(preserve);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  ==  null)  {  fileLevelJsDocBuilder.append(preserve);  }  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  ==  null)  {  fileLevelJsDocBuilder.append(preserve);  }	  if(preserve!=    null)    {    fileLevelJsDocBuilder.append(preserve);    }    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	9	None	replace
306	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.cloneTree();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.cloneTree();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.cloneTree();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
307	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevelJsDocBuilder();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevelJsDocBuilder();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevelJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
308	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
309	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.build();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.build();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.build();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
310	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.reset();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.reset();  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.reset();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
311	[BUG]  [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserveInfo!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
312	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING  &&  fileLevelJsDocBuilder!=  null)  {	  if(preserve!=    null    &&    preserveInfo.token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
313	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve!=  null  &&  preserve.length()  ==  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve!=  null  &&  preserve.length()  ==  0  &&  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
314	[BUG]  [BUGGY]  if(preserve.length()  >=  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve.length()  >=  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve.length()  >=  0  ||  fileLevelJsDocBuilder.charAt(preserve.length()  -  1)!=  '/')  {	  if(preserve.length()    ==    0    ||    fileLevelJsDocBuilder.charAt(preserve.length()    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	29	None	replace
315	[BUG]  [BUGGY]  if(preserve  >=  null  &&  preserve.length()!=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;      [BUGGY]  if(preserve  >=  null  &&  preserve.length()!=  0)  {  [BUGGY]      if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	if(preserve  >=  null  &&  preserve.length()!=  0)  {	  if(preserve!=    null    ||    preserve.length()!=    0)    {    	non-compiled	[CE]  orphaned  case	6	None	replace
