bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ",: "  +  preserveInfo.toString;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ",: "  +  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ",: "  +  preserveInfo.toString;	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString;    	non-compiled	[CE]  	84	None	replace
2	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ".: "  +  preserveInfo.toString;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ".: "  +  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ".: "  +  preserveInfo.toString;	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString;    	non-compiled	[CE]  	84	None	replace
3	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ": "  +  token;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ": "  +  token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ": "  +  token;	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString;    	non-compiled	[CE]  	84	None	replace
4	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ": "  +  preserveInfo.getText();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ": "  +  preserveInfo.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ": "  +  preserveInfo.getText();	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString;    	non-compiled	[CE]  	84	None	replace
5	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.toString();	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
6	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
7	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString);  }	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
8	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  }	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
9	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
10	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  }	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo.setLineno(lineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo.setLineno(lineno);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	21	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	21	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(remainderInfo!=  null);  preserveInfo.setLineno(lineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(remainderInfo!=  null);  preserveInfo.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(remainderInfo!=  null);  preserveInfo.setLineno(lineno);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	21	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	21	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno  +  1);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno  +  1);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	21	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	66	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	66	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.LICENSE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	66	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.LICENSE);    	non-compiled	[CE]  	66	None	replace
20	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preserved;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preserved;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preserved;	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  	51	None	replace
21	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserved.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserved.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserved.toString();	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  	51	None	replace
22	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserved.substring(0,  preserveInfo.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserved.substring(0,  preserveInfo.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserved.substring(0,  preserveInfo.length()  -  1);	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  	51	None	replace
23	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserved.trim();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserved.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserved.trim();	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  	51	None	replace
24	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserved.getString();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserved.getString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserved.getString();	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  	51	None	replace
25	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length()  -  1);	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.toString()  + "n ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.toString()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.toString()  + "n ";	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.length()  -  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.length()  -  1);	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.substring(1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.substring(1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.substring(1);	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length()  -  2);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length()  -  2);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length()  -  2);	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.precedence;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
31	[BUG]  [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.precedence;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	char  preserve  =  fileLevelJsDocBuilder.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
32	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder.precedence;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
33	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileOverview;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileOverview;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileOverview;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
34	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserveInfo.token);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserveInfo.token);	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
35	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(Locale.ENGLISH);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(Locale.ENGLISH);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase(Locale.ENGLISH);	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  	28	None	replace
36	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toUpperCase();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toUpperCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toUpperCase();	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  	28	None	replace
37	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(Locale.getDefault());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(Locale.getDefault());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase(Locale.getDefault());	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  	28	None	replace
38	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase()  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase()  +  1;	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  	28	None	replace
39	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(Locale.US);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(Locale.US);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase(Locale.US);	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  	28	None	replace
40	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString.trim()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString.trim()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString.trim()  +  1;	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  null  :  preserveInfo.toString.trim();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  null  :  preserveInfo.toString.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  null  :  preserveInfo.toString.trim();	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString.trim()  + "n ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString.trim()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString.trim()  + "n ";	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText().trim();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText().trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText().trim();	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString.trim().replace('',  '/');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString.trim().replace('',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString.trim().replace('',  '/');	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '/');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('0',  '/');	  String    preserve    =    preserveInfo.text.replace('n',    '/');    	non-compiled	[CE]  	78	None	replace
46	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('/',  'n');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('/',  'n');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('/',  'n');	  String    preserve    =    preserveInfo.text.replace('n',    '/');    	non-compiled	[CE]  	78	None	replace
47	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace(',  '/');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace(',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace(',  '/');	  String    preserve    =    preserveInfo.text.replace('n',    '/');    	non-compiled	[CE]  	78	None	replace
48	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('$',  '/');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('$',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('$',  '/');	  String    preserve    =    preserveInfo.text.replace('n',    '/');    	non-compiled	[CE]  	78	None	replace
49	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('#',  '/');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('#',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('#',  '/');	  String    preserve    =    preserveInfo.text.replace('n',    '/');    	non-compiled	[CE]  	78	None	replace
50	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preserve();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preserve();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preserve();	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  	56	None	replace
51	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.reserve();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.reserve();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.reserve();	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  	56	None	replace
52	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getReserved();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getReserved();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getReserved();	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  	56	None	replace
53	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getDescription();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getDescription();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getDescription();	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  	56	None	replace
54	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserve(token);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserve(token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserve(token);	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  	56	None	replace
55	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + ": "  +  preserveInfo.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + ": "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + ": "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString();    	non-compiled	[CE]  	83	None	replace
56	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ",: "  +  preserveInfo.toString();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ",: "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ",: "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString();    	non-compiled	[CE]  	83	None	replace
57	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ": "  +  token.toString();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ": "  +  token.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ": "  +  token.toString();	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString();    	non-compiled	[CE]  	83	None	replace
58	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ".: "  +  preserveInfo.toString();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ".: "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ".: "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString();    	non-compiled	[CE]  	83	None	replace
59	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  + "_ "  +  preserveInfo.toString();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  + "_ "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder  + "_ "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	47	None	replace
60	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ "  +  fileLevelJsDocBuilder.getText();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ "  +  fileLevelJsDocBuilder.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "_ "  +  fileLevelJsDocBuilder.getText();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	47	None	replace
61	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + "_ "  +  preserveInfo.toString();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + "_ "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  + "_ "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	47	None	replace
62	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ",_ "  +  fileLevelJsDocBuilder.toString();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ",_ "  +  fileLevelJsDocBuilder.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ",_ "  +  fileLevelJsDocBuilder.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	47	None	replace
63	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "._ "  +  fileLevelJsDocBuilder.toString();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "._ "  +  fileLevelJsDocBuilder.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "._ "  +  fileLevelJsDocBuilder.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	47	None	replace
64	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  1);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
65	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.lineNumber,  preserveInfo.baseUri);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.lineNumber,  preserveInfo.baseUri);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.lineNumber,  preserveInfo.baseUri);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
66	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  -  1);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
67	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber++;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber++;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber++;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
68	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI,  preserveInfo.lineNumber);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI,  preserveInfo.lineNumber);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI,  preserveInfo.lineNumber);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
69	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  2);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  2);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  2);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(remainderInfo!=  null);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(remainderInfo!=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(remainderInfo!=  null);	  Preconditions.checkNotNull(preserveInfo);    	non-compiled	[CE]  	23	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo,  preserveInfo);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo,  preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo,  preserveInfo);	  Preconditions.checkNotNull(preserveInfo);    	non-compiled	[CE]  	23	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder.length()  ==  0);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder.length()  ==  0);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(fileLevelJsDocBuilder.length()  ==  0);	  Preconditions.checkNotNull(preserveInfo);    	non-compiled	[CE]  	23	None	replace
73	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.token;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.token;	  String    preserve    =    fileLevelJsDocBuilder.append(preserveInfo.token);    	non-compiled	[CE]  	72	None	replace
74	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.append(fileLevelJsDocBuilder.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.append(fileLevelJsDocBuilder.toString());	  String    preserve    =    fileLevelJsDocBuilder.append(preserveInfo.token);    	non-compiled	[CE]  	72	None	replace
75	[BUG]  [BUGGY]  boolean  isBracketedParam  =  preserveInfo.isBracketedParam();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  boolean  isBracketedParam  =  preserveInfo.isBracketedParam();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	boolean  isBracketedParam  =  preserveInfo.isBracketedParam();	  String    preserve    =    fileLevelJsDocBuilder.append(preserveInfo.token);    	non-compiled	[CE]  	72	None	replace
76	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder.toString());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
77	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder.toString());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
78	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.getText());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.getText());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.getText());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
79	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString()  + "n ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString()  + "n ");  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString()  + "n ");	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
80	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  token);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
81	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString()  +  1);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
82	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  -  1);  fileLevelJsDocBuilder.append(prev);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  -  1);  fileLevelJsDocBuilder.append(prev);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  -  1);  fileLevelJsDocBuilder.append(prev);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  	63	None	replace
83	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  +  1);  fileLevelJsDocBuilder.append(prev);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  +  1);  fileLevelJsDocBuilder.append(prev);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  +  1);  fileLevelJsDocBuilder.append(prev);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  	63	None	replace
84	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo);  fileLevelJsDocBuilder.append(prev);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo);  fileLevelJsDocBuilder.append(prev);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo);  fileLevelJsDocBuilder.append(prev);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  	63	None	replace
85	[BUG]  [BUGGY]  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  	63	None	replace
86	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(prev);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  fileLevelJsDocBuilder.append(prev);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	fileLevelJsDocBuilder.append(prev);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  	63	None	replace
87	[BUG]  [BUGGY]  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(previous);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(previous);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(previous);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  	63	None	replace
88	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  	31	None	replace
89	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()  +  1);	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  	31	None	replace
90	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()));  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()));	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  	31	None	replace
91	[BUG]  [BUGGY]  String  conserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  conserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  conserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  	31	None	replace
92	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()  -  2);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()  -  2);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.str.length()  -  2);	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  	31	None	replace
93	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + "n ";  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + "n ";	  String    preserve    =    preserveInfo.toString();    	non-compiled	[CE]  	15	None	replace
94	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + ";n ";  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + ";n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + ";n ";	  String    preserve    =    preserveInfo.toString();    	non-compiled	[CE]  	15	None	replace
95	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + "; ";  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + "; ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + "; ";	  String    preserve    =    preserveInfo.toString();    	non-compiled	[CE]  	15	None	replace
96	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + ": ";  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + ": ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + ": ";	  String    preserve    =    preserveInfo.toString();    	non-compiled	[CE]  	15	None	replace
97	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "null ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "null ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "null ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
98	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "n ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "n ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
99	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : ", ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : ", ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : ", ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
100	[BUG]  [BUGGY]  String  preserve  =  preserveInfo  ==  null?  preserveInfo.toString  : "   ";  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo  ==  null?  preserveInfo.toString  : "   ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo  ==  null?  preserveInfo.toString  : "   ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
101	[BUG]  [BUGGY]  String  preserve  =  preserveInfo  ==  null?  preserveInfo.toString  : "n ";  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo  ==  null?  preserveInfo.toString  : "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo  ==  null?  preserveInfo.toString  : "n ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
102	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "[null] ";  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "[null] ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "[null] ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
103	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  +  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  +  2;	  String    preserve    =    preserveInfo.limit    +    1;    	non-compiled	[CE]  	26	None	replace
104	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  +  1L;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  +  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  +  1L;	  String    preserve    =    preserveInfo.limit    +    1;    	non-compiled	[CE]  	26	None	replace
105	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.lineno  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.lineno  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.lineno  +  1;	  String    preserve    =    preserveInfo.limit    +    1;    	non-compiled	[CE]  	26	None	replace
106	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  +  3;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  +  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  +  3;	  String    preserve    =    preserveInfo.limit    +    1;    	non-compiled	[CE]  	26	None	replace
107	[BUG]  [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.preserve;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.preserve;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	char  preserve  =  fileLevelJsDocBuilder.preserve;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  	67	None	replace
108	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  fileLevelJsDocBuilder.preserve;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  fileLevelJsDocBuilder.preserve;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  fileLevelJsDocBuilder.preserve;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  	67	None	replace
109	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  preserveInfo.preserve;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  preserveInfo.preserve;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  preserveInfo.preserve;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  	67	None	replace
110	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()):  fileLevelJsDocBuilder.preserve;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()):  fileLevelJsDocBuilder.preserve;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()):  fileLevelJsDocBuilder.preserve;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  	67	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  null);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(fileLevelJsDocBuilder!=  null);	  Preconditions.checkState(remainderInfo    ==    null);    	non-compiled	[CE]  	81	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(restoreInfo!=  null);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(restoreInfo!=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(restoreInfo!=  null);	  Preconditions.checkState(remainderInfo    ==    null);    	non-compiled	[CE]  	81	None	replace
113	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText()  + "n ";  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText()  + "n ";	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  	13	None	replace
114	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText()  +  1;	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  	13	None	replace
115	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getShortText();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getShortText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getShortText();	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  	13	None	replace
116	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getReferenceName();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getReferenceName();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getReferenceName();	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  	13	None	replace
117	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  -  1L;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  -  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  -  1L;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
118	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  -  2;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  -  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  -  2;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
119	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  -  1;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
120	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.length  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.length  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.length  -  1;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
121	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  -  1;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
122	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString);  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString);  }	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
123	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
124	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString);  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString);  }	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
125	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
126	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.token);  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.token);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.token);  }	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
127	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString;  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  }	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
128	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '9';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '9';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '9';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  	18	None	replace
129	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(0)!=  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(0)!=  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(0)!=  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '+';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  	18	None	replace
130	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '9';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '9';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '9';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  	18	None	replace
131	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)  ==  '9';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)  ==  '9';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)  ==  '9';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  	18	None	replace
132	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '9';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '9';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '9';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  	18	None	replace
133	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(0)!=  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '+';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(0)!=  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '+';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(0)!=  '-'  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '+';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  	18	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  	65	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  	65	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  	65	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(fileLevelJsDocBuilder!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  	65	None	replace
138	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno);  }	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno  +  1);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno  +  1);	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	24	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno  -  1);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setLineno(lineno  -  1);	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	24	None	replace
141	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  1L;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  1L;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  	36	None	replace
142	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  2;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  2;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  3;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  3;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  	36	None	replace
144	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  1l;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  1l;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  1l;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  	36	None	replace
145	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  4;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  4;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  4;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  	36	None	replace
146	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  +  1;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
147	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  + "n ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  + "n ";	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
148	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.lineNumber;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.lineNumber;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.lineNumber;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
149	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.referenceName,  fileLevelJsDocBuilder.length());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.referenceName,  fileLevelJsDocBuilder.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.referenceName,  fileLevelJsDocBuilder.length());	  String    preserve    =    preserveInfo.referenceName;    	non-compiled	[CE]  	52	None	replace
150	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.referenceName,  fileLevelJsDocBuilder);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.referenceName,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.referenceName,  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.referenceName;    	non-compiled	[CE]  	52	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  >=  null);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  >=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  >=  null);	  Preconditions.checkState(preserveInfo!=    null);    	non-compiled	[CE]  	22	None	replace
152	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder.toString());	  String    preserve    =    preserveInfo.servletName;    	non-compiled	[CE]  	74	None	replace
153	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.servletName;    	non-compiled	[CE]  	74	None	replace
154	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servletName,  fileLevelJsDocBuilder.length());	  String    preserve    =    preserveInfo.servletName;    	non-compiled	[CE]  	74	None	replace
155	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + "_ "  +  preserveInfo.toString();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + "_ "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + "_ "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    preserveInfo.toString();    	non-compiled	[CE]  	85	None	replace
156	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ "  +  token.toString();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ "  +  token.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "_ "  +  token.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    preserveInfo.toString();    	non-compiled	[CE]  	85	None	replace
157	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ",_ "  +  preserveInfo.toString();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ",_ "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ",_ "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    preserveInfo.toString();    	non-compiled	[CE]  	85	None	replace
158	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "._ "  +  preserveInfo.toString();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "._ "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "._ "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    preserveInfo.toString();    	non-compiled	[CE]  	85	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo  >=  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo  >=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo  >=  null);	  Preconditions.checkArgument(preserveInfo    ==    null);    	non-compiled	[CE]  	79	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null,  preserveInfo.description);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null,  preserveInfo.description);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null,  preserveInfo.description);	  Preconditions.checkArgument(preserveInfo    ==    null);    	non-compiled	[CE]  	79	None	replace
161	[BUG]  [BUGGY]  char  preserve  =  paramDescriptionInfo.token;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  char  preserve  =  paramDescriptionInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	char  preserve  =  paramDescriptionInfo.token;	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  	71	None	replace
162	[BUG]  [BUGGY]  String  preserve  =  paramDescriptionInfo.token.trim();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  paramDescriptionInfo.token.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  paramDescriptionInfo.token.trim();	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  	71	None	replace
163	[BUG]  [BUGGY]  String  preserve  =  parseInfo.token;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  parseInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  parseInfo.token;	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  	71	None	replace
164	[BUG]  [BUGGY]  String  preserve  =  paramDescriptionInfo.token  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  paramDescriptionInfo.token  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  paramDescriptionInfo.token  +  1;	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  	71	None	replace
165	[BUG]  [BUGGY]  String  preserve  =  preservationInfo.token;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preservationInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preservationInfo.token;	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  	71	None	replace
166	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  	30	None	replace
167	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()  +  1);	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  	30	None	replace
168	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()  -  2);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()  -  2);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()  -  2);	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  	30	None	replace
169	[BUG]  [BUGGY]  String  conserve  =  preserveInfo.str.substring(0,  preserveInfo.length());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  conserve  =  preserveInfo.str.substring(0,  preserveInfo.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  conserve  =  preserveInfo.str.substring(0,  preserveInfo.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  	30	None	replace
170	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()));  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.length()));	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  	30	None	replace
171	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
172	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
173	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  ==  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  ==  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  ==  1;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
174	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText()  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText()  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText()  &&  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
175	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  -  1L;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  -  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  -  1L;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  	17	None	replace
176	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  -  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  -  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  -  2;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  	17	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	62	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	62	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	62	None	replace
180	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.length()  -  1);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
181	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.length()  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.length()  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.length()  +  1);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
182	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder.length());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder.length());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
183	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder.length());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder.length());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
184	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
185	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.trim());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.trim());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.trim());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
186	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.trim()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.trim()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.trim()  +  1;	  String    preserve    =    preserveInfo.str.trim();    	non-compiled	[CE]  	32	None	replace
187	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.trim().toLowerCase();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.trim().toLowerCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.trim().toLowerCase();	  String    preserve    =    preserveInfo.str.trim();    	non-compiled	[CE]  	32	None	replace
188	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.trim();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.trim();	  String    preserve    =    preserveInfo.str.trim();    	non-compiled	[CE]  	32	None	replace
189	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toString()  + "n ";  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toString()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toString()  + "n ";	  String    preserve    =    preserveInfo.str.toString();    	non-compiled	[CE]  	29	None	replace
190	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.getText();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.getText();	  String    preserve    =    preserveInfo.str.toString();    	non-compiled	[CE]  	29	None	replace
191	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.getValue();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.getValue();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.getValue();	  String    preserve    =    preserveInfo.str.toString();    	non-compiled	[CE]  	29	None	replace
192	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toString()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toString()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toString()  +  1;	  String    preserve    =    preserveInfo.str.toString();    	non-compiled	[CE]  	29	None	replace
193	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()!=  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	48	None	replace
194	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()  ==  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()  ==  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()  ==  1;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	48	None	replace
195	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()!=  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	48	None	replace
196	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()!=  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()!=  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()!=  1;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	48	None	replace
197	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('0',  'r');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('0',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('0',  'r');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  	50	None	replace
198	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  'r');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('/',  'r');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  	50	None	replace
199	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  '');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  '');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('',  '');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  	50	None	replace
200	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('$',  'r');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('$',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('$',  'r');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  	50	None	replace
201	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  'r');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('',  'r');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  	50	None	replace
202	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "_ ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  	11	None	replace
203	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ": ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ": ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ": ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  	11	None	replace
204	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "   ";  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "   ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "   ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  	11	None	replace
205	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ";n ";  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ";n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ";n ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  	11	None	replace
206	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "/ ";  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "/ ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "/ ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  	11	None	replace
207	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "  LICENSE ";  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "  LICENSE ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "  LICENSE ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  	11	None	replace
208	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.toString();	  String    preserve    =    preserveInfo.preserve.toString();    	non-compiled	[CE]  	7	None	replace
209	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.toString();	  String    preserve    =    preserveInfo.preserve.toString();    	non-compiled	[CE]  	7	None	replace
210	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line.toString();	  String    preserve    =    preserveInfo.preserve.toString();    	non-compiled	[CE]  	7	None	replace
211	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preserve.toString()  + "n ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preserve.toString()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preserve.toString()  + "n ";	  String    preserve    =    preserveInfo.preserve.toString();    	non-compiled	[CE]  	7	None	replace
212	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  't');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('0',  't');	  String    preserve    =    preserveInfo.text.replace('n',    't');    	non-compiled	[CE]  	76	None	replace
213	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('n',  't')+  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('n',  't')+  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('n',  't')+  1;	  String    preserve    =    preserveInfo.text.replace('n',    't');    	non-compiled	[CE]  	76	None	replace
214	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('$',  't');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('$',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('$',  't');	  String    preserve    =    preserveInfo.text.replace('n',    't');    	non-compiled	[CE]  	76	None	replace
215	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('/',  't');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('/',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('/',  't');	  String    preserve    =    preserveInfo.text.replace('n',    't');    	non-compiled	[CE]  	76	None	replace
216	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(2);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(2);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(2);	  String    preserve    =    preserveInfo.str.substring(1);    	non-compiled	[CE]  	34	None	replace
217	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.lastIndexOf('.'));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.lastIndexOf('.'));  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.lastIndexOf('.'));	  String    preserve    =    preserveInfo.str.substring(1);    	non-compiled	[CE]  	34	None	replace
218	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.trim().toLowerCase();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.trim().toLowerCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.trim().toLowerCase();	  String    preserve    =    preserveInfo.text.trim();    	non-compiled	[CE]  	1	None	replace
219	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.trim()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.trim()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.trim()  +  1;	  String    preserve    =    preserveInfo.text.trim();    	non-compiled	[CE]  	1	None	replace
220	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.trim()  + "n ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.trim()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.trim()  + "n ";	  String    preserve    =    preserveInfo.text.trim();    	non-compiled	[CE]  	1	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno  +  1);	  Preconditions.checkNotNull(preserve);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	20	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  null);  preserveInfo.setLineno(lineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  null);  preserveInfo.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(fileLevelJsDocBuilder!=  null);  preserveInfo.setLineno(lineno);	  Preconditions.checkNotNull(preserve);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	20	None	replace
223	[BUG]  [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.token;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	char  preserve  =  fileLevelJsDocBuilder.token;	  String    preserve    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	70	None	replace
224	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(remainderInfo.token);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(remainderInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(remainderInfo.token);	  String    preserve    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	70	None	replace
225	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(precedenceInfo.token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(precedenceInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(precedenceInfo.token);	  String    preserve    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	70	None	replace
226	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  '.')+  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  '.')+  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('/',  '.')+  1;	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
227	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  '.').replace('',  '');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  '.').replace('',  '');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('/',  '.').replace('',  '');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
228	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  '.').replace('-',  '.');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('/',  '.').replace('-',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('/',  '.').replace('-',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
229	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.replace('/',  '.');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.replace('/',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.replace('/',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
230	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getStr().replace('/',  '.');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getStr().replace('/',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getStr().replace('/',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
231	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('0',  't');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('0',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('0',  't');	  String    preserve    =    preserveInfo.token.replace('n',    't');    	non-compiled	[CE]  	73	None	replace
232	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('$',  't');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('$',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('$',  't');	  String    preserve    =    preserveInfo.token.replace('n',    't');    	non-compiled	[CE]  	73	None	replace
233	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('n',  't')+  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('n',  't')+  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('n',  't')+  1;	  String    preserve    =    preserveInfo.token.replace('n',    't');    	non-compiled	[CE]  	73	None	replace
234	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.substring(0,  preserveInfo.token.length()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.substring(0,  preserveInfo.token.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.substring(0,  preserveInfo.token.length()  -  1);	  String    preserve    =    preserveInfo.token.replace('n',    't');    	non-compiled	[CE]  	73	None	replace
235	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  -  1);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
236	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno()  +  1);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
237	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
238	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.trim();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.trim();	  String    preserve    =    preserveInfo.preserve.trim();    	non-compiled	[CE]  	8	None	replace
239	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preserve.trim()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preserve.trim()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preserve.trim()  +  1;	  String    preserve    =    preserveInfo.preserve.trim();    	non-compiled	[CE]  	8	None	replace
240	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim()  +  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim()  +  1;	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
241	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.substring(0,  preserveInfo.length()  -  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.substring(0,  preserveInfo.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.substring(0,  preserveInfo.length()  -  1);	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
242	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.substring(1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.substring(1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.substring(1);	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
243	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim()  + "n ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim()  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim()  + "n ";	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
244	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('',  '/');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim().replace('',  '/');	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
245	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  1;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  	43	None	replace
246	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.lineNumber,  preserveInfo.baseUri;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.lineNumber,  preserveInfo.baseUri;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.lineNumber,  preserveInfo.baseUri;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  	43	None	replace
247	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  -  1;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  	43	None	replace
248	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  2;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.lineNumber  +  2;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  	43	None	replace
249	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ".; ";  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ".; ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ".; ";	  String    preserve    =    preserveInfo.toString    +   ";   ";    	non-compiled	[CE]  	14	None	replace
250	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ",   ";  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ",   ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ",   ";	  String    preserve    =    preserveInfo.toString    +   ";   ";    	non-compiled	[CE]  	14	None	replace
251	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.returnDescription.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.returnDescription.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.returnDescription.toString();	  String    preserve    =    preserveInfo.returnDescription;    	non-compiled	[CE]  	54	None	replace
252	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.returnDescription.toLowerCase();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.returnDescription.toLowerCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.returnDescription.toLowerCase();	  String    preserve    =    preserveInfo.returnDescription;    	non-compiled	[CE]  	54	None	replace
253	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getReturnDescription();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getReturnDescription();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getReturnDescription();	  String    preserve    =    preserveInfo.returnDescription;    	non-compiled	[CE]  	54	None	replace
254	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.returnDescription  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.returnDescription  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.returnDescription  +  1;	  String    preserve    =    preserveInfo.returnDescription;    	non-compiled	[CE]  	54	None	replace
255	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserve.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserve.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserve.toString();	  String    preserve    =    preserveInfo.reserve;    	non-compiled	[CE]  	86	None	replace
256	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	45	None	replace
257	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  &&  fileLevelJsDocBuilder.length()  >=  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	45	None	replace
258	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	45	None	replace
259	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	45	None	replace
260	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  'r');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('0',  'r');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  	57	None	replace
261	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('/',  'r');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('/',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('/',  'r');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  	57	None	replace
262	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('$',  'r');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('$',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('$',  'r');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  	57	None	replace
263	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('[',  ']');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('[',  ']');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('[',  ']');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  	57	None	replace
264	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('-',  '-');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('-',  '-');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('-',  '-');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  	57	None	replace
265	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  token);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
266	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  null);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
267	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  lineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  lineno);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
268	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  line);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  line);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  line);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
269	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  charno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  charno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  charno);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
270	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  false);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  false);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
271	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + "   ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + "   ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + "   ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
272	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + "_ ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + "_ ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + "_ ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
273	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + ": ";  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + ": ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + ": ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
274	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + "  LICENSE ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + "  LICENSE ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + "  LICENSE ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
275	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + ";n ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + ";n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + ";n ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
276	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + "/ ";  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + "/ ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + "/ ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
277	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reservedDescription.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reservedDescription.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reservedDescription.toString();	  String    preserve    =    preserveInfo.reservedDescription;    	non-compiled	[CE]  	75	None	replace
278	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preservedDescription;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preservedDescription;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preservedDescription;	  String    preserve    =    preserveInfo.reservedDescription;    	non-compiled	[CE]  	75	None	replace
279	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reservedDescription.substring(0,  preserveInfo.length()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reservedDescription.substring(0,  preserveInfo.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reservedDescription.substring(0,  preserveInfo.length()  -  1);	  String    preserve    =    preserveInfo.reservedDescription;    	non-compiled	[CE]  	75	None	replace
280	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reservedDescription.toLowerCase();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reservedDescription.toLowerCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reservedDescription.toLowerCase();	  String    preserve    =    preserveInfo.reservedDescription;    	non-compiled	[CE]  	75	None	replace
281	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servlet.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servlet.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servlet.toString();	  String    preserve    =    preserveInfo.servlet;    	non-compiled	[CE]  	55	None	replace
282	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servlet.substring(0,  preserveInfo.length()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servlet.substring(0,  preserveInfo.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servlet.substring(0,  preserveInfo.length()  -  1);	  String    preserve    =    preserveInfo.servlet;    	non-compiled	[CE]  	55	None	replace
283	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servlet.trim();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servlet.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servlet.trim();	  String    preserve    =    preserveInfo.servlet;    	non-compiled	[CE]  	55	None	replace
284	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  +  2;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  +  2;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  	16	None	replace
285	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  +  1L;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  +  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  +  1L;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  	16	None	replace
286	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  +  3;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  +  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  +  3;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  	16	None	replace
287	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  +  1l;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  +  1l;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  +  1l;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  	16	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(preserve!=  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserve!=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserve!=  null);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  	19	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkArgument(preserve!=  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserve!=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserve!=  null);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  	19	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder.length()  >  0);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder.length()  >  0);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(fileLevelJsDocBuilder.length()  >  0);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  	19	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  preserveInfo);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(fileLevelJsDocBuilder!=  preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(fileLevelJsDocBuilder!=  preserveInfo);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  	19	None	replace
292	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	60	None	replace
293	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	60	None	replace
294	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  >=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	60	None	replace
295	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI.replace('',  '');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI.replace('',  '');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI.replace('',  '');	  String    preserve    =    preserveInfo.baseURI;    	non-compiled	[CE]  	41	None	replace
296	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI.replace('',  '/');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI.replace('',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI.replace('',  '/');	  String    preserve    =    preserveInfo.baseURI;    	non-compiled	[CE]  	41	None	replace
297	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI.trim();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI.trim();	  String    preserve    =    preserveInfo.baseURI;    	non-compiled	[CE]  	41	None	replace
298	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI.toString();	  String    preserve    =    preserveInfo.baseURI;    	non-compiled	[CE]  	41	None	replace
299	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  ||  fileLevelJsDocBuilder.length()!=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	59	None	replace
300	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  &&  fileLevelJsDocBuilder.length()!=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	59	None	replace
301	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()!=  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()!=  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()!=  1;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	59	None	replace
302	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  ||  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	44	None	replace
303	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	44	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(reserveInfo  ==  null);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(reserveInfo  ==  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(reserveInfo  ==  null);	  Preconditions.checkState(reserveInfo!=    null);    	non-compiled	[CE]  	25	None	replace
305	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('0',  'r');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('0',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('0',  'r');	  String    preserve    =    preserveInfo.token.replace('n',    'r');    	non-compiled	[CE]  	39	None	replace
306	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('$',  'r');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('$',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('$',  'r');	  String    preserve    =    preserveInfo.token.replace('n',    'r');    	non-compiled	[CE]  	39	None	replace
307	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  'r');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('/',  'r');	  String    preserve    =    preserveInfo.token.replace('n',    'r');    	non-compiled	[CE]  	39	None	replace
308	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  +  1L;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  +  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  +  1L;	  String    preserve    =    preserveInfo.toString    +    1;    	non-compiled	[CE]  	12	None	replace
309	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  +  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  +  2;	  String    preserve    =    preserveInfo.toString    +    1;    	non-compiled	[CE]  	12	None	replace
310	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  /  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  /  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  /  1;	  String    preserve    =    preserveInfo.toString    +    1;    	non-compiled	[CE]  	12	None	replace
311	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  +  1l;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  +  1l;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  +  1l;	  String    preserve    =    preserveInfo.toString    +    1;    	non-compiled	[CE]  	12	None	replace
312	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  +  3;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  +  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  +  3;	  String    preserve    =    preserveInfo.toString    +    1;    	non-compiled	[CE]  	12	None	replace
313	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '0')+  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '0')+  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('0',  '0')+  1;	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
314	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText().replace('0',  '0');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText().replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText().replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
315	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.trim().replace('0',  '0');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.trim().replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.trim().replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
316	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '0').replace('0',  '0');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '0').replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('0',  '0').replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
317	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('0',  '0');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
318	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.length()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.length()  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.length()  +  1;	  String    preserve    =    preserveInfo.str.length();    	non-compiled	[CE]  	33	None	replace
319	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.str.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.str.length();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.str.length();	  String    preserve    =    preserveInfo.str.length();    	non-compiled	[CE]  	33	None	replace
320	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.length()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.length()  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.length()  -  1;	  String    preserve    =    preserveInfo.str.length();    	non-compiled	[CE]  	33	None	replace
321	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  2;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri  +  2;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
322	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  1L;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri  +  1L;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
323	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURL  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURL  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURL  +  1;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
324	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  +  1;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
325	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI  +  1;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
326	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  '/');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('',  '/');	  String    preserve    =    preserveInfo.token.replace('',    '');    	non-compiled	[CE]  	37	None	replace
327	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  '_');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  '_');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('',  '_');	  String    preserve    =    preserveInfo.token.replace('',    '');    	non-compiled	[CE]  	37	None	replace
328	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  '-');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  '-');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('',  '-');	  String    preserve    =    preserveInfo.token.replace('',    '');    	non-compiled	[CE]  	37	None	replace
329	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('',  '');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('',  '');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim().replace('',  '');	  String    preserve    =    preserveInfo.token.replace('',    '');    	non-compiled	[CE]  	37	None	replace
330	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  'n');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('',  'n');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('',  'n');	  String    preserve    =    preserveInfo.token.replace('',    '');    	non-compiled	[CE]  	37	None	replace
331	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
332	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getDescription(),  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
333	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.state);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.state);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.state);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
334	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.errorReporter);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.errorReporter);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.errorReporter);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
335	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preserve,  fileLevelJsDocBuilder);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preserve,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preserve,  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
336	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  false);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  false);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  false);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
337	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str  +  2;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str  +  2;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str  +  2;	  String    preserve    =    preserveInfo.str    +    1;    	non-compiled	[CE]  	49	None	replace
338	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str  +  1L;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str  +  1L;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str  +  1L;	  String    preserve    =    preserveInfo.str    +    1;    	non-compiled	[CE]  	49	None	replace
339	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str  +  3;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str  +  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str  +  3;	  String    preserve    =    preserveInfo.str    +    1;    	non-compiled	[CE]  	49	None	replace
340	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.toString());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
341	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  buffer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  buffer);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  buffer);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	3	None	replace
342	[BUG]  [BUGGY]  String  preserved  =  preserveInfo.str.substring(0,  preserveInfo.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserved  =  preserveInfo.str.substring(0,  preserveInfo.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserved  =  preserveInfo.str.substring(0,  preserveInfo.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  	30	None	replace
343	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('-',  '/');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('-',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('-',  '/');	  String    preserve    =    preserveInfo.text.replace('n',    '/');    	non-compiled	[CE]  	78	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	62	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo);  fileLevelJsDocBuilder.append(preserveInfo);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo);  fileLevelJsDocBuilder.append(preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo);  fileLevelJsDocBuilder.append(preserveInfo);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	62	None	replace
346	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servletName  + "n ";  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servletName  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servletName  + "n ";	  String    preserve    =    preserveInfo.servletName;    	non-compiled	[CE]  	74	None	replace
347	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str  +  'n';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str  +  'n';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str  +  'n';	  String    preserve    =    preserveInfo.str    +    1;    	non-compiled	[CE]  	49	None	replace
348	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str  +  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str  +  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str  +  0;	  String    preserve    =    preserveInfo.str    +    1;    	non-compiled	[CE]  	49	None	replace
349	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.token  +  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.token  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.token  +  1;	  String    preserve    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	70	None	replace
350	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(precedenceInfo.token);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(precedenceInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.append(precedenceInfo.token);	  String    preserve    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	70	None	replace
351	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()  ==  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
352	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()  ==  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
353	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  &&  preserveInfo.text.length()  ==  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  &&  preserveInfo.text.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder  &&  preserveInfo.text.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
354	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
355	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()!=  0;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()!=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	58	None	replace
356	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('  ',  't');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('  ',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('  ',  't');	  String    preserve    =    preserveInfo.text.replace('n',    't');    	non-compiled	[CE]  	76	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null  &&  fileLevelJsDocBuilder.length()  >  0);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null  &&  fileLevelJsDocBuilder.length()  >  0);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null  &&  fileLevelJsDocBuilder.length()  >  0);	  Preconditions.checkArgument(preserveInfo!=    null);    	non-compiled	[CE]  	64	None	replace
358	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.trim();	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
359	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  fileLevelJsDocBuilder);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  unreadToken,  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
360	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  LICENSE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  LICENSE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  LICENSE);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
361	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  LICENSE);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  LICENSE);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  unreadToken,  LICENSE);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
362	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  fileOverview);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  fileOverview);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  unreadToken,  fileOverview);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  	38	None	replace
363	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + "  preserved ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + "  preserved ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + "  preserved ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  	4	None	replace
364	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getPreserve();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getPreserve();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getPreserve();	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  	56	None	replace
365	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('n',  'r');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('n',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim().replace('n',  'r');	  String    preserve    =    preserveInfo.token.replace('n',    'r');    	non-compiled	[CE]  	39	None	replace
366	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  '/');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('/',  '/');	  String    preserve    =    preserveInfo.token.replace('n',    'r');    	non-compiled	[CE]  	39	None	replace
367	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.toString;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.toString;	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
368	[BUG]  [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.toString;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	char  preserve  =  fileLevelJsDocBuilder.toString;	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
369	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString(preserveInfo);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString(preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString(preserveInfo);	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
370	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString  + ": "  +  preserveInfo.toString;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString  + ": "  +  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString  + ": "  +  preserveInfo.toString;	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
371	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + ": "  +  preserveInfo.toString;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + ": "  +  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  + ": "  +  preserveInfo.toString;	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  	46	None	replace
372	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  -  1l;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  -  1l;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  -  1l;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
373	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  -  3;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  -  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  -  3;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
374	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  /  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  /  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  /  1;	  String    preserve    =    preserveInfo.limit    -    1;    	non-compiled	[CE]  	27	None	replace
375	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo);	  String    preserve    =    fileLevelJsDocBuilder.append(preserveInfo.token);    	non-compiled	[CE]  	72	None	replace
376	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserve);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.append(preserve);	  String    preserve    =    fileLevelJsDocBuilder.append(preserveInfo.token);    	non-compiled	[CE]  	72	None	replace
377	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toString().replace('/',  '.');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toString().replace('/',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toString().replace('/',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
378	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  '.');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  	87	None	replace
379	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
380	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
381	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  +  LICENSE;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  +  LICENSE;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  +  LICENSE;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
382	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  &&  fileLevelJsDocBuilder.length()!=  0;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  	9	None	replace
383	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseURI,  preserveInfo.lineNumber;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseURI,  preserveInfo.lineNumber;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseURI,  preserveInfo.lineNumber;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  	43	None	replace
384	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.fileLevelJsDocBuilder;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.fileLevelJsDocBuilder;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.fileLevelJsDocBuilder;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  	43	None	replace
385	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.getText();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.getText();	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  	2	None	replace
386	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ":n "  +  preserveInfo.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ":n "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ":n "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString();    	non-compiled	[CE]  	83	None	replace
387	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.length());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
388	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.getLength());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.getLength());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.getLength());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
389	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.fileLevelJsDocBuilder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri,  preserveInfo.fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri,  preserveInfo.fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  	42	None	replace
390	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.precedence  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.precedence  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.precedence  +  1;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
391	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.getPrecedence();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.getPrecedence();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.getPrecedence();	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
392	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.precedence  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.precedence  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.precedence  -  1;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  	69	None	replace
393	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()!=  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()!=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	59	None	replace
394	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  &&  preserveInfo.text.length()!=  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  &&  preserveInfo.text.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder  &&  preserveInfo.text.length()!=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	59	None	replace
395	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('n',  't');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim().replace('n',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim().replace('n',  't');	  String    preserve    =    preserveInfo.token.replace('n',    't');    	non-compiled	[CE]  	73	None	replace
396	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }	  Preconditions.checkNotNull(preserve);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo);  fileLevelJsDocBuilder.setLineno(lineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo);  fileLevelJsDocBuilder.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo);  fileLevelJsDocBuilder.setLineno(lineno);	  Preconditions.checkNotNull(preserve);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	20	None	replace
398	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.getText();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.getText();	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  	67	None	replace
399	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  >  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  >  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	45	None	replace
400	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  +  preserveInfo.length();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  +  preserveInfo.length();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  +  preserveInfo.length();	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	45	None	replace
401	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  }	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
402	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  }  else  {  fileLevelJsDocBuilder.append(PRESERVE);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  }  else  {  fileLevelJsDocBuilder.append(PRESERVE);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE);  }  else  {  fileLevelJsDocBuilder.append(PRESERVE);  }	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
403	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno);  }	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno  -  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno  -  1);	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	21	None	replace
405	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText()  + "  LICENSE ";  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText()  + "  LICENSE ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText()  + "  LICENSE ";	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  	13	None	replace
406	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getText()  + ";n ";  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getText()  + ";n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getText()  + ";n ";	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  	13	None	replace
407	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit  +  1l;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit  +  1l;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit  +  1l;	  String    preserve    =    preserveInfo.limit    +    1;    	non-compiled	[CE]  	26	None	replace
408	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getReservedDescription();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getReservedDescription();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getReservedDescription();	  String    preserve    =    preserveInfo.reservedDescription;    	non-compiled	[CE]  	75	None	replace
409	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.offset  +  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.offset  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.offset  +  1;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  	16	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo,  fileLevelJsDocBuilder);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo,  fileLevelJsDocBuilder);	  Preconditions.checkNotNull(preserveInfo);    	non-compiled	[CE]  	23	None	replace
411	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servlet.getText();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servlet.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servlet.getText();	  String    preserve    =    preserveInfo.servlet;    	non-compiled	[CE]  	55	None	replace
412	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servlet.getValue();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servlet.getValue();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servlet.getValue();	  String    preserve    =    preserveInfo.servlet;    	non-compiled	[CE]  	55	None	replace
413	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getDescription().trim();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getDescription().trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getDescription().trim();	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
414	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.toString();	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
415	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + ": "  +  preserveInfo.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + ": "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  + ": "  +  preserveInfo.toString();	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
416	[BUG]  [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  char  preserve  =  fileLevelJsDocBuilder.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	char  preserve  =  fileLevelJsDocBuilder.toString();	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
417	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + "  - "  +  preserveInfo.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  + "  - "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  + "  - "  +  preserveInfo.toString();	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	68	None	replace
418	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "_ ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "_ ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "_ ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
419	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "/ ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "/ ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "/ ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  	82	None	replace
420	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri.toString();	  String    preserve    =    preserveInfo.preserve.toString();    	non-compiled	[CE]  	7	None	replace
421	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.separator.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.separator.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.separator.toString();	  String    preserve    =    preserveInfo.preserve.toString();    	non-compiled	[CE]  	7	None	replace
422	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace(',  '/');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace(',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace(',  '/');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  	50	None	replace
423	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getPreserve().trim();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getPreserve().trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getPreserve().trim();	  String    preserve    =    preserveInfo.preserve.trim();    	non-compiled	[CE]  	8	None	replace
424	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('  ',  'r');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('  ',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('  ',  'r');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  	57	None	replace
425	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserved  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserved  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserved  +  1;	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  	51	None	replace
426	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  1l;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  1l;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri  +  1l;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
427	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  3;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri  +  3;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri  +  3;	  String    preserve    =    preserveInfo.baseUri    +    1;    	non-compiled	[CE]  	40	None	replace
428	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.trim(),  fileLevelJsDocBuilder.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.trim(),  fileLevelJsDocBuilder.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.trim(),  fileLevelJsDocBuilder.toString());	  String    preserve    =    preserveInfo.text.trim();    	non-compiled	[CE]  	1	None	replace
429	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  fileLevelJsDocBuilder.setLineno(lineno);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  fileLevelJsDocBuilder.setLineno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  fileLevelJsDocBuilder.setLineno(lineno);	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	24	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno  +  1);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno  +  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno  +  1);	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	24	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setCharno(lineno);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setCharno(lineno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null);  preserveInfo.setCharno(lineno);	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  	24	None	replace
432	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
433	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.description);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.description);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.description,  preserveInfo.description);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  	6	None	replace
434	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.indexOf('0',  '0');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.indexOf('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.indexOf('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
435	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '0').toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace('0',  '0').toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace('0',  '0').toString();	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  	77	None	replace
436	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.offset  -  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.offset  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.offset  -  1;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  	17	None	replace
437	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  -  1;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  	17	None	replace
438	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  'n';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  'n';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  'n';	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  	36	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null  &&  fileLevelJsDocBuilder!=  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null  &&  fileLevelJsDocBuilder!=  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null  &&  fileLevelJsDocBuilder!=  null);	  Preconditions.checkState(preserveInfo    ==    null);    	non-compiled	[CE]  	80	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null  &&  fileLevelJsDocBuilder.length()  >  0);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null  &&  fileLevelJsDocBuilder.length()  >  0);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null  &&  fileLevelJsDocBuilder.length()  >  0);	  Preconditions.checkState(preserveInfo    ==    null);    	non-compiled	[CE]  	80	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null,  fileLevelJsDocBuilder);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null,  fileLevelJsDocBuilder);	  Preconditions.checkState(preserveInfo    ==    null);    	non-compiled	[CE]  	80	None	replace
442	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.referenceName  + "n ";  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.referenceName  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.referenceName  + "n ";	  String    preserve    =    preserveInfo.referenceName;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	52	None	replace
443	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getPreserveName();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getPreserveName();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getPreserveName();	  String    preserve    =    preserveInfo.preserveName;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	53	None	replace
444	[BUG]  [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	63	None	replace
445	[BUG]  [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  fileLevelJsDocBuilder.append  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  fileLevelJsDocBuilder.append  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  fileLevelJsDocBuilder.append	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  orphaned  case	63	None	replace
446	[BUG]  [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  fileLevelJsDocBuilder  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  fileLevelJsDocBuilder  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  fileLevelJsDocBuilder	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  orphaned  case	63	None	replace
447	[BUG]  [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  FileLevelJsDocBuilder  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  FileLevelJsDocBuilder  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(remainingRc!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  else  {  FileLevelJsDocBuilder	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  orphaned  case	63	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkNotNull(fileLevelJsDocBuilder);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(fileLevelJsDocBuilder);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	19	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserve,  preserveInfo);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserve,  preserveInfo);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserve,  preserveInfo);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	19	None	replace
450	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length()  >  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	60	None	replace
451	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	60	None	replace
452	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text()  &&  preserveInfo.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text()  &&  preserveInfo.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text()  &&  preserveInfo.length()  >  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	60	None	replace
453	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  ||  preserveInfo.length()  >  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	60	None	replace
454	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString(true);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString(true);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString(true);	  String    preserve    =    preserveInfo.toString();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	15	None	replace
455	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(leno);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(leno);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase(leno);	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	28	None	replace
456	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(true);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(true);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase(true);	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	28	None	replace
457	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ":n "  +  preserveInfo.toString;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ":n "  +  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ":n "  +  preserveInfo.toString;	  String    preserve    =    preserveInfo.toString    +   ":   "    +    preserveInfo.toString;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	84	None	replace
458	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()!=  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()!=  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	48	None	replace
459	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  &  fileLevelJsDocBuilder.length()  ==  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  &  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  &  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	48	None	replace
460	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  + "._ "  +  preserveInfo.toString();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder  + "._ "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder  + "._ "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	47	None	replace
461	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  ==  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.toString()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.toString()  ==  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	44	None	replace
462	[BUG]  [BUGGY]  JsDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JsDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JsDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	61	None	replace
463	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getCharno(),  stream.getLineno());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getCharno(),  stream.getLineno());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getCharno(),  stream.getLineno());	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	61	None	replace
464	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  'n';  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  'n';  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  'n';	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
465	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
466	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
467	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.charAt(preserveInfo.length()  -  1)!=  0;	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
468	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()!=  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  &&  fileLevelJsDocBuilder.length()!=  0;	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
469	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  + "n ";  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  + "n ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  + "n ";	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
470	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.lastIndexOf('.')-  1);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.lastIndexOf('.')-  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.lastIndexOf('.')-  1);	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
471	[BUG]  [BUGGY]  String  preserved  =  preserveInfo.str.substring(0,  preserveInfo.str.length());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserved  =  preserveInfo.str.substring(0,  preserveInfo.str.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserved  =  preserveInfo.str.substring(0,  preserveInfo.str.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo  ==  null,  preserveInfo.lineNumber);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo  ==  null,  preserveInfo.lineNumber);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo  ==  null,  preserveInfo.lineNumber);	  Preconditions.checkArgument(preserveInfo    ==    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	79	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo  ==  null,  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo  ==  null,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo  ==  null,  preserveInfo.token);	  Preconditions.checkArgument(preserveInfo    ==    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	79	None	replace
474	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.textNode  +  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.textNode  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.textNode  +  1;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	16	None	replace
475	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.preserve  +  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.preserve  +  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.preserve  +  1;	  String    preserve    =    preserveInfo.line    +    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	16	None	replace
476	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  ==  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  ==  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	44	None	replace
477	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  +  LICENSE;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  +  LICENSE;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  +  LICENSE;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	36	None	replace
478	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token  /  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token  /  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token  /  1;	  String    preserve    =    preserveInfo.token    +    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	36	None	replace
479	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  else  {  fileLevelJsDocBuilder.append(preserveInfo);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  else  {  fileLevelJsDocBuilder.append(preserveInfo);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  else  {  fileLevelJsDocBuilder.append(preserveInfo);  }	  Preconditions.checkNotNull(preserve);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	20	None	replace
480	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  else  {  stream.getLineno(),  stream.getCharno());  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  else  {  stream.getLineno(),  stream.getCharno());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserve);  preserveInfo.setLineno(lineno);  }  else  {  stream.getLineno(),  stream.getCharno());  }	  Preconditions.checkNotNull(preserve);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  ';'  expected	20	None	replace
481	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.reset());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.reset());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.reset());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  ';'  expected	5	None	replace
482	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  't');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  't');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('/',  't');	  String    preserve    =    preserveInfo.token.replace('n',    't');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	73	None	replace
483	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('-',  'r');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('-',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('-',  'r');	  String    preserve    =    preserveInfo.str.replace('n',    'r');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	50	None	replace
484	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  + "  - "  +  preserveInfo.toString();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  + "  - "  +  preserveInfo.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  + "  - "  +  preserveInfo.toString();	  String    preserve    =    preserveInfo.toString();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	15	None	replace
485	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  preserveInfo.lineNumber);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  preserveInfo.lineNumber);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  preserveInfo.lineNumber);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  ';'  expected	42	None	replace
486	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  preserveInfo.lineNumber);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  preserveInfo.lineNumber);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  preserveInfo.lineNumber);	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber);    	non-compiled	[CE]  ';'  expected	42	None	replace
487	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo.state);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo.state);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo.state);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	61	None	replace
488	[BUG]  [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno(),  preserveInfo.token);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	61	None	replace
489	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.FIELD_NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.FIELD_NAME);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.FIELD_NAME);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  ';'  expected	38	None	replace
490	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.VALUE_STRING);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.VALUE_STRING);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.VALUE_STRING);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  ';'  expected	38	None	replace
491	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.END_ARRAY);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.END_ARRAY);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token,  unreadToken,  JsDocToken.END_ARRAY);	  String    preserve    =    preserveInfo.token,    unreadToken);    	non-compiled	[CE]  ';'  expected	38	None	replace
492	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.token);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder,  preserveInfo.token);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  ';'  expected	6	None	replace
493	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence,  fileLevelJsDocBuilder);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence,  fileLevelJsDocBuilder);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence,  fileLevelJsDocBuilder);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder);    	non-compiled	[CE]  ';'  expected	6	None	replace
494	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servletName.trim();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servletName.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servletName.trim();	  String    preserve    =    preserveInfo.servletName;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	74	None	replace
495	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.replace(',  'r');  [CE]  unclosed  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.replace(',  'r');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.replace(',  'r');	  String    preserve    =    preserveInfo.text.replace('n',    'r');    	non-compiled	[CE]  unclosed  character  literal	57	None	replace
496	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.replace('0',  '0');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	77	None	replace
497	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line.replace('0',  '0');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line.replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line.replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	77	None	replace
498	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.replace('0',  '0');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.replace('0',  '0');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.replace('0',  '0');	  String    preserve    =    preserveInfo.text.replace('0',    '0');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	77	None	replace
499	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence  -  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence  -  1;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	17	None	replace
500	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.baseUri  -  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.baseUri  -  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.baseUri  -  1;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	17	None	replace
501	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.line  /  1;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.line  /  1;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.line  /  1;	  String    preserve    =    preserveInfo.line    -    1;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	17	None	replace
502	[BUG]  [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "  {   ";  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "  {   ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo!=  null?  preserveInfo.toString  : "  {   ";	  String    preserve    =    preserveInfo!=    null?    preserveInfo.toString    :   "   ";    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	82	None	replace
503	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.trim().toString();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.trim().toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.trim().toString();	  String    preserve    =    preserveInfo.str.trim();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	32	None	replace
504	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.trim().replace('.',  '/');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.trim().replace('.',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.trim().replace('.',  '/');	  String    preserve    =    preserveInfo.str.trim();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	32	None	replace
505	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno);  }  else  {  fileLevelJsDocBuilder.append(preserveInfo);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno);  }  else  {  fileLevelJsDocBuilder.append(preserveInfo);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo.setLineno(lineno);  }  else  {  fileLevelJsDocBuilder.append(preserveInfo);  }	  Preconditions.checkNotNull(preserveInfo);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	21	None	replace
506	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.length();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.length();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.length();	  String    preserve    =    preserveInfo.str.length();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
507	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.length();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.length();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.length();	  String    preserve    =    preserveInfo.str.length();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	33	None	replace
508	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserveName;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserveName;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserveName;	  String    preserve    =    preserveInfo.preserveName;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	53	None	replace
509	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  '/');  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace('',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace('',  '/');	  String    preserve    =    preserveInfo.str.toString();    	non-compiled	[CE]  empty  character  literal	29	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkArgument(preserve.length()  >  0);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserve.length()  >  0);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserve.length()  >  0);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	19	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(isBracketedParam);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(isBracketedParam);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(isBracketedParam);	  Preconditions.checkNotNull(preserve);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	19	None	replace
512	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.fileLevelJsDocBuilder.preserve;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.fileLevelJsDocBuilder.preserve;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.fileLevelJsDocBuilder.preserve;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	67	None	replace
513	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.preserve  :  preserveInfo.precedence;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.preserve  :  preserveInfo.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.preserve  :  preserveInfo.precedence;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	67	None	replace
514	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.preserve  :  preserveInfo.token;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.preserve  :  preserveInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.preserve  :  preserveInfo.token;	  String    preserve    =    fileLevelJsDocBuilder.preserve;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	67	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null,  preserveInfo.lineNumber);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null,  preserveInfo.lineNumber);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null,  preserveInfo.lineNumber);	  Preconditions.checkState(preserveInfo    ==    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	80	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo  ==  null,  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo  ==  null,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo  ==  null,  preserveInfo.token);	  Preconditions.checkState(preserveInfo    ==    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	80	None	replace
517	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  >>  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  >>  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  >>  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	48	None	replace
518	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString());  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString());  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString();  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(preserveInfo.toString());  }	  String    preserve    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	68	None	replace
519	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.substring(0,  preserveInfo.str.length()  -  1);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.substring(0,  preserveInfo.str.length()  -  1);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.substring(0,  preserveInfo.str.length()  -  1);	  String    preserve    =    preserveInfo.str.substring(1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	34	None	replace
520	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "; ",  preserveInfo.toString);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "; ",  preserveInfo.toString);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "; ",  preserveInfo.toString);	  String    preserve    =    preserveInfo.toString    +   ";   ";    	non-compiled	[CE]  	14	None	replace
521	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo.toString);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo.toString);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo.toString);	  String    preserve    =    fileLevelJsDocBuilder.toString;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	46	None	replace
522	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit();	  String    preserve    =    preserveInfo.reserve();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	56	None	replace
523	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description  + "  -- ";  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description  + "  -- ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description  + "  -- ";	  String    preserve    =    preserveInfo.description    +   "n   ";    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	4	None	replace
524	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkNotNull(preserveInfo);  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  }	  Preconditions.checkNotNull(preserveInfo);    preserveInfo    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	62	None	replace
525	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.served;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.served;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.served;	  String    preserve    =    preserveInfo.reserved;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	51	None	replace
526	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.substring(0,  preserveInfo.length());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.substring(0,  preserveInfo.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.substring(0,  preserveInfo.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	30	None	replace
527	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.substring(0,  preserveInfo.length());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.substring(0,  preserveInfo.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.substring(0,  preserveInfo.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.length()    -    1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	30	None	replace
528	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reservedToken;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reservedToken;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reservedToken;	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	71	None	replace
529	[BUG]  [BUGGY]  String  preserve  =  preservedInfo.token;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preservedInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preservedInfo.token;	  String    preserve    =    paramDescriptionInfo.token;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	71	None	replace
530	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.serve;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.serve;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.serve;	  String    preserve    =    preserveInfo.reserve;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	86	None	replace
531	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  ||  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	45	None	replace
532	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  >=  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  &&  fileLevelJsDocBuilder.length()  >=  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	45	None	replace
533	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  >  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString()  +  fileLevelJsDocBuilder.length()  >  0;	  String    preserve    =    preserveInfo.toString    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	45	None	replace
534	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  preserveInfo.toString());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  preserveInfo.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.toString(),  preserveInfo.toString());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  ';'  expected	3	None	replace
535	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.append(preserveInfo.toString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.append(preserveInfo.toString());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.append(preserveInfo.toString());	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  ';'  expected	3	None	replace
536	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.append(preserveInfo.token);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.append(preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  fileLevelJsDocBuilder.append(preserveInfo.token);	  String    preserve    =    preserveInfo.description,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  ';'  expected	3	None	replace
537	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  <=  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text  &&  fileLevelJsDocBuilder.length()  <=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	58	None	replace
538	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('.',  '/');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('.',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('.',  '/');	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	35	None	replace
539	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim()  : " ";  [CE]  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim()  : " ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim()  : " ";	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  	35	None	replace
540	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.trim(),  null);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.trim(),  null);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.trim(),  null);	  String    preserve    =    preserveInfo.token.trim();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
541	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ "  +  prefix.toString();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + "_ "  +  prefix.toString();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + "_ "  +  prefix.toString();	  String    preserve    =    preserveInfo.toString    +   "_   "    +    preserveInfo.toString();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	85	None	replace
542	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.token  + ": "  +  preserveInfo.token;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.token  + ": "  +  preserveInfo.token;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.token  + ": "  +  preserveInfo.token;	  String    preserve    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	70	None	replace
543	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.getText();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.getText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.getText();	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
544	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.getSegment();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.getSegment();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.getSegment();	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
545	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.removeText();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.removeText();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.removeText();	  String    preserve    =    preserveInfo.getText();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	13	None	replace
546	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.servedDescription;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.servedDescription;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.servedDescription;	  String    preserve    =    preserveInfo.reservedDescription;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	75	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null,  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null,  preserveInfo.token);	  Preconditions.checkArgument(preserveInfo!=    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	64	None	replace
548	[BUG]  [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null  &&  preserveInfo.isReferenced());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkArgument(preserveInfo!=  null  &&  preserveInfo.isReferenced());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkArgument(preserveInfo!=  null  &&  preserveInfo.isReferenced());	  Preconditions.checkArgument(preserveInfo!=    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	64	None	replace
549	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description,  preserveInfo.lineNumber;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description,  preserveInfo.lineNumber;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description,  preserveInfo.lineNumber;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  ';'  expected	43	None	replace
550	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.limit,  preserveInfo.lineNumber;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.limit,  preserveInfo.lineNumber;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.limit,  preserveInfo.lineNumber;	  String    preserve    =    preserveInfo.baseUri,    preserveInfo.lineNumber;    	non-compiled	[CE]  ';'  expected	43	None	replace
551	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.replace('/',  '.');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.replace('/',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.replace('/',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	87	None	replace
552	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  '.');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('/',  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('/',  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	87	None	replace
553	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.replace( "/ ".getBytes(),  '.');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.replace( "/ ".getBytes(),  '.');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.replace( "/ ".getBytes(),  '.');	  String    preserve    =    preserveInfo.str.replace('/',    '.');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	87	None	replace
554	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  Preconditions.checkState(preserveInfo  ==  null);  preserveInfo.setLineno(lineno);  }	  Preconditions.checkState(preserveInfo!=    null);    preserveInfo.setLineno(lineno);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	24	None	replace
555	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length!=  0;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length!=  0;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.text  &&  preserveInfo.length!=  0;	  String    preserve    =    preserveInfo.text    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	59	None	replace
556	[BUG]  [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo,  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  fileLevelJsDocBuilder.append(preserveInfo,  preserveInfo.token);	  String    preserve    =    fileLevelJsDocBuilder.append(preserveInfo.token);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	72	None	replace
557	[BUG]  [BUGGY]  if(!isBracketedParam)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(!isBracketedParam)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(!isBracketedParam)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	63	None	replace
558	[BUG]  [BUGGY]  if(preserveInfo!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(preserveInfo!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(preserveInfo!=  null)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	63	None	replace
559	[BUG]  [BUGGY]  if(isBracketedParam)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  if(isBracketedParam)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	if(isBracketedParam)  {  JSDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  }	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	63	None	replace
560	[BUG]  [BUGGY]  JsDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  JsDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	JsDocToken  prev  =  parse(stream.getLineno(),  stream.getCharno());  fileLevelJsDocBuilder.append(prev);	  JSDocToken    prev    =    parse(stream.getLineno(),    stream.getCharno());    fileLevelJsDocBuilder.append(prev);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	63	None	replace
561	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.storageInfo.str.length());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.storageInfo.str.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.storageInfo.str.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
562	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.line.length());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.line.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.substring(0,  preserveInfo.line.length());	  String    preserve    =    preserveInfo.str.substring(0,    preserveInfo.str.length()    -    1);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	31	None	replace
563	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length());  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length());  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.text.substring(0,  preserveInfo.text.length());	  String    preserve    =    preserveInfo.text.toString();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	2	None	replace
564	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString.trim()  : " ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString.trim()  : " ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString.trim()  : " ";	  String    preserve    =    preserveInfo.toString.trim();    	non-compiled	[CE]  	10	None	replace
565	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.toLowerCase();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.toLowerCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.toLowerCase();	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	28	None	replace
566	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.description.toLowerCase();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.description.toLowerCase();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.description.toLowerCase();	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	28	None	replace
567	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(lenientRc);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.str.toLowerCase(lenientRc);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.str.toLowerCase(lenientRc);	  String    preserve    =    preserveInfo.str.toLowerCase();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	28	None	replace
568	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.separator.trim();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.separator.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.separator.trim();	  String    preserve    =    preserveInfo.preserve.trim();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
569	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.reserve().trim();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.reserve().trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.reserve().trim();	  String    preserve    =    preserveInfo.preserve.trim();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
570	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.label  = " ";  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.label  = " ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.label  = " ";	  String    preserve    =    preserveInfo.label;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	18	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkNotNull(preserveInfo,  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkNotNull(preserveInfo,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkNotNull(preserveInfo,  preserveInfo.token);	  Preconditions.checkNotNull(preserveInfo);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	23	None	replace
572	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.fileLevelJsDocBuilder.precedence;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.fileLevelJsDocBuilder.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.fileLevelJsDocBuilder.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	69	None	replace
573	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  preserveInfo.precedence;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                        ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  preserveInfo.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()  -  1):  preserveInfo.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	69	None	replace
574	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()):  preserveInfo.precedence;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()):  preserveInfo.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.substring(0,  preserveInfo.length()):  preserveInfo.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	69	None	replace
575	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.length()  :  preserveInfo.precedence;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                            ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.length()  :  preserveInfo.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.length()  :  preserveInfo.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	69	None	replace
576	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.append(precedence):  preserveInfo.precedence;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                              ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.append(precedence):  preserveInfo.precedence;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.append(precedence):  preserveInfo.precedence;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	69	None	replace
577	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.toString()  :  preserveInfo.toString;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.toString()  :  preserveInfo.toString;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  fileLevelJsDocBuilder.toString()  :  preserveInfo.toString;	  String    preserve    =    fileLevelJsDocBuilder.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	69	None	replace
578	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.precedence?  preserveInfo.lineno  :  preserveInfo.lineno;  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.precedence?  preserveInfo.lineno  :  preserveInfo.lineno;  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.precedence?  preserveInfo.lineno  :  preserveInfo.lineno;	  String    preserve    =    preserveInfo.precedence;    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	9	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null,  preserveInfo.token);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null,  preserveInfo.token);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null,  preserveInfo.token);	  Preconditions.checkState(preserveInfo!=    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	22	None	replace
580	[BUG]  [BUGGY]  Preconditions.checkState(preserveInfo!=  null,  preserveInfo.lineNumber);  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                                  ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  Preconditions.checkState(preserveInfo!=  null,  preserveInfo.lineNumber);  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	Preconditions.checkState(preserveInfo!=  null,  preserveInfo.lineNumber);	  Preconditions.checkState(preserveInfo!=    null);    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	22	None	replace
581	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.toString  + ". ";  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                          ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.toString  + ". ";  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.toString  + ". ";	  String    preserve    =    preserveInfo.toString    +   "n   ";    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	11	None	replace
582	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.token.replace('n',  '/');  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                    ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.token.replace('n',  '/');  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.token.replace('n',  '/');	  String    preserve    =    preserveInfo.token.replace('n',    'r');    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	39	None	replace
583	[BUG]  [BUGGY]  String  preserve  =  preserveInfo.templateInfo.trim();  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]                      ComparisonFailure      [CONTEXT]      stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);      [BUGGY]  String  preserve  =  preserveInfo.templateInfo.trim();  [BUGGY]        if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	String  preserve  =  preserveInfo.templateInfo.trim();	  String    preserve    =    preserveInfo.text.trim();    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	1	None	replace
