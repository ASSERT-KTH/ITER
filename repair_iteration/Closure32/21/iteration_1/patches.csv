bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  if(!ignoreStar)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  parent.replaceChild(startLineno,  startCharno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  parent.replaceChild(startLineno,  startCharno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	parent.replaceChild(startLineno,  startCharno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  parent.replaceChild(startLineno,  endLineno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  parent.replaceChild(startLineno,  endLineno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	parent.replaceChild(startLineno,  endLineno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }	      	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }	      	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append('n');  }  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append('n');  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append('n');  }	      	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "t ");  }  [CE]  [FE]                                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "t ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "t ");  }	      	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  if(ignoredStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(ignoredStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  if(!ignoredStar)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoredStar)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoredStar)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(ignoredStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar  ==  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar  ==  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar  ==  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(ignoredStar    ==    false)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar  ==  false)  {  ignoreStar  =  true;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar  ==  false)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoredStar  ==  false)  {  ignoreStar  =  true;  }	  if(ignoredStar    ==    false)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  if(ignoredStar!=  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar!=  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar!=  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(ignoredStar    ==    false)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  if(ignoredStar  ==  false)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar  ==  false)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar  ==  false)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(ignoredStar    ==    false)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  buffer.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  buffer.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  buffer.append( "n ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    buffer.append(   "n   ");    }    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  buffer.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  buffer.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  buffer.append( "n ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    buffer.append(   "n   ");    }    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  false;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  ignoreStar  =  false;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	state  =  State.SEARCHING_ANNOTATION;	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  if(!ignoreStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar  ||  ignoreStar)  {  ignoreStar  =  true;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  if(!unreadToken)  {  ignoreStar  =  true;  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!unreadToken)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!unreadToken)  {  ignoreStar  =  true;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar)  {  ignoreStar  =  false;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  false;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  if(ignoreStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  ||  ignoreStar)  {  ignoreStar  =  true;  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  parent.replaceChild(startLineno,  endLineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  parent.replaceChild(startLineno,  endLineno);  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	parent.replaceChild(startLineno,  endLineno);	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  if(!ignoreStar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  parent.replaceChild(startLineno,  startCharno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  parent.replaceChild(startLineno,  startCharno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	parent.replaceChild(startLineno,  startCharno)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  tate.SEARCHING_ANNOTATION  =  false;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  tate.SEARCHING_ANNOTATION  =  false;  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	tate.SEARCHING_ANNOTATION  =  false;	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  tate.SEARCHING_ANNOTATION  =  true;  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	tate.SEARCHING_ANNOTATION  =  true;	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  if(ignoreStar  ||  ignoreEnd)  {  ignoreStar  =  true;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  ||  ignoreEnd)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  ||  ignoreEnd)  {  ignoreStar  =  true;  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  if(ignoredStar  ==  false)  {  ignoreStar  =  false;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar  ==  false)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar  ==  false)  {  ignoreStar  =  false;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
40	[BUG]  [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  false;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  ==  false)  {  ignoreStar  =  false;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
41	[BUG]  [BUGGY]  if(ignoredStar!=  false)  {  ignoreStar  =  false;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar!=  false)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar!=  false)  {  ignoreStar  =  false;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
42	[BUG]  [BUGGY]  if(ignoreStar!=  false)  {  ignoreStar  =  false;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar!=  false)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar!=  false)  {  ignoreStar  =  false;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  if(ignoredToken  ==  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredToken  ==  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredToken  ==  false)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(ignoredStar    ==    false)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  ==  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  if(ignoreStar  >  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  >  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  >  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  if(ignoreStar!=  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar!=  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar!=  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  if(ignoreStar  <=  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  <=  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  <=  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
51	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ignoreStar  =  true;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  ignoreStar  =  true;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  ignoreStar  =  true;  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  ignoreStar  =  true;  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  if(ignoredToken)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredToken)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredToken)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(ignoredStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
57	[BUG]  [BUGGY]  if(ignoredStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar  ||  ignoreStar)  {  ignoreStar  =  true;  }  else  {  builder.append( "n ");  }	  if(ignoredStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
58	[BUG]  [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  ==  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
59	[BUG]  [BUGGY]  if(ignoreStar!=  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar!=  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar!=  false)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
60	[BUG]  [BUGGY]  if(ignoreStar  >  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  >  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  >  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
61	[BUG]  [BUGGY]  if(ignoreStar  <=  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  <=  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  <=  0)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
62	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  parent  =  parent.getParent();  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	parent  =  parent.getParent();	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "no ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "no ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "no ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "no ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "no ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "no ");  }	  if(!ignoreStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
65	[BUG]  [BUGGY]  if(!ignoreStar)  {  token  =  next();  continue;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(!ignoreStar)  {  token  =  next();  continue;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(!ignoreStar)  {  token  =  next();  continue;  }	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  while(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  while(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	while(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar  ==  false)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar  ==  false)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
69	[BUG]  [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  return  true;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  return  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoreStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "n ");  return  true;  }	  ignoreStar    =    false;    	non-compiled	[CE]  	1	None	replace
70	[BUG]  [BUGGY]  if(ignoredStar)  {  ignoreStar  =  false;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar)  {  ignoreStar  =  false;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar)  {  ignoreStar  =  false;  }	  if(ignoredStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
71	[BUG]  [BUGGY]  if(ignoredStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "null ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(ignoredStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "null ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(ignoredStar)  {  ignoreStar  =  false;  }  else  {  builder.append( "null ");  }	  if(ignoredStar)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  ignoreStar  =  true;  }	  if(ignoredStar    ==    false)    {    ignoreStar    =    true;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	9	None	replace
73	[BUG]  [BUGGY]  while(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  while(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	while(!ignoreStar)  {  ignoreStar  =  true;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
74	[BUG]  [BUGGY]  readStart()  {  ignoreStar  =  true;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  readStart()  {  ignoreStar  =  true;  }  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	readStart()  {  ignoreStar  =  true;  }	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
75	[BUG]  [BUGGY]  readStart  =  true;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  readStart  =  true;  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	readStart  =  true;	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
76	[BUG]  [BUGGY]  ignoringStar  =  true;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  ignoringStar  =  true;  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	ignoringStar  =  true;	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
77	[BUG]  [BUGGY]  ignorStar  =  true;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    }  token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }    [BUGGY]  ignorStar  =  true;  [BUGGY]    token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	ignorStar  =  true;	  if(ignoreStar)    {    ignoreStar    =    true;    }    	non-compiled	[CE]  	5	None	replace
