bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getLastChild())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getLastChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.next())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  cc.listSeparator();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  cc.listSeparator();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.listSeparator();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  Node  c  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Node  c  =  first.getFirstChild();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Context  cc  =  context.getContext();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  context.getContext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  Node  c  =  first.getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Node  c  =  first.getNext();  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  for(Node  c  =  second;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  second;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  second;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  for(Node  c  =  node;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  node;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  node;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  for(Node  c  =  getFirst;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  getFirst;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  getFirst;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  for(Node  c  =  start;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  start;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  start;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getFirstChild())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.getFirstChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getNextSibling())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getNextSibling())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getNextSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getChildCount())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getChildCount())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getChildCount())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.getNext())  {	  for(Node    c    =    first;    c    ==    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  For  (Node  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  For  (Node  c  =  first;  c  ==  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  first;  c  ==  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first;  c  ==  null;  c  =  c.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  For  (Node  c  =  last;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  last;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  last;  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  For  (Node  c  =  first;  c!=  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  first;  c!=  null;  c  =  n.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first;  c!=  null;  c  =  n.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  For  (Node  c  =  second;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  second;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  second;  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  for(Node  c  =  body;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  body;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  body;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  For  (Node  c  =  body;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  body;  c!=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  body;  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  For  (Node  c  =  first;  c!=  null;  c  =  c.getParent())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For  (Node  c  =  first;  c!=  null;  c  =  c.getParent())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first;  c!=  null;  c  =  c.getParent())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoInOperator(context);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  Node  c  =  first;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Node  c  =  first;  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  Context  cc  =  getContextForNoDeclaration(context);  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(context);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getFirstChild())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  c.getFirstChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  for(Node  c  =  first;  c  >=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  for(Node  c  =  first;  c  >=  null;  c  =  c.getNext())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  >=  null;  c  =  c.getNext())  {	  for(Node    c    =    first;    c    ==    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(   "(   ");  }  add(   "{   ");    [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getFirstChild())  {  [BUGGY]    if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  c.getFirstChild())  {	  For    (Node    c    =    first;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
