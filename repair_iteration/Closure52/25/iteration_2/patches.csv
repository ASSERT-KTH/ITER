bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    node;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  for(Node  c  =  node.getNext();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  node.getNext();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  node.getNext();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    node;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  Node  c  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  context.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  context.getFirstChild();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  Node  c  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  context.getCurrentNode();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  context.getCurrentNode();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  Node  c  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  node.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  node.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  Node  c  =  context.getNext();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  context.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  context.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  Node  c  =  first.next();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.next();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.next();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.next())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.next())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  c.next())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.next())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.next())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  c.next())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.next())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.next())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.next())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  for(Node  c  =  second;  c!=  null;  c  =  c.next())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  second;  c!=  null;  c  =  c.next())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  second;  c!=  null;  c  =  c.next())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  n.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  n.getNext())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  for(Node  c  =  last;  c!=  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  last;  c!=  null;  c  =  n.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  last;  c!=  null;  c  =  n.getNext())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getParent())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getParent())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.getParent())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  last.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  last.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  last.getNext())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  for(Node  c  =  context;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  context;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  context;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    start;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getLastChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  c.getLastChild())  {	  for(Node    c    =    first;    c    ==    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
18	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getLastChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.getLastChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getLastChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  c.getLastChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  n.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  n.getLastChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  n.getLastChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  n.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  n.getFirstChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  n.getFirstChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  for(Node  c  =  last;  c!=  null;  c  =  n.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  last;  c!=  null;  c  =  n.getFirstChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  last;  c!=  null;  c  =  n.getFirstChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getChildCount())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getChildCount())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.getChildCount())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  For  (Node  c  =  next;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  next;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  next;  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
25	[BUG]  [BUGGY]  For  (Node  c  =  start;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  start;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  start;  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
26	[BUG]  [BUGGY]  For  (Node  c  =  node;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  node;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  node;  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
27	[BUG]  [BUGGY]  For  (Node  c  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
28	[BUG]  [BUGGY]  For  (Node  c  =  first.getNext();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  first.getNext();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first.getNext();  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
29	[BUG]  [BUGGY]  For  (Node  c  =  first.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  first.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  For    (Node    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
30	[BUG]  [BUGGY]  For  (Node  c  =  body.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  body.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  body.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
31	[BUG]  [BUGGY]  Node  c  =  first.n;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.n;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.n;	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
32	[BUG]  [BUGGY]  Node  c  =  first.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.getLastChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.getLastChild();	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
33	[BUG]  [BUGGY]  Node  c  =  getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  getFirstChild();	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
34	[BUG]  [BUGGY]  Node  c  =  context;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  context;	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
35	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getCurrentNode())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getCurrentNode())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getCurrentNode())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getChildCount())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getCurrentContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.END_OF_EXPR)?  getCurrentContext()  :  context;	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getCurrentContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getCurrentContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.END_OF_EXPR)?  getCurrentContext()  :  null;	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContext(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.END_OF_EXPR  ||  context  ==  Context.END_OF_EXPR);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration(n);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(n);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
42	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  n);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(context,  n);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
43	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  first);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(context,  first);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  Context  cc  =  getContextForNonDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonDeclaration(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonDeclaration(context);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
45	[BUG]  [BUGGY]  Context  cc  =  getContextForNonEmptyDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonEmptyDeclaration(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonEmptyDeclaration(context);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
46	[BUG]  [BUGGY]  Context  cc  =  getContextForDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForDeclaration(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForDeclaration(context);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
47	[BUG]  [BUGGY]  cc.setSeparator(n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.setSeparator(n);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.setSeparator(n);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.setSeparator(context  ==  Context.START_OF_EXPR);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.setSeparator(context  ==  Context.START_OF_EXPR);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  cc.addChildToFront(first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.addChildToFront(first);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.addChildToFront(first);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  cc.clearSeparator();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.clearSeparator();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.clearSeparator();	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.setSeparator(context  ==  Context.END_OF_EXPR);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.setSeparator(context  ==  Context.END_OF_EXPR);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  cc.addChildToFront(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.addChildToFront(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.addChildToFront(context);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  For  (Node  c  =  last;  c!=  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  last;  c!=  null;  c  =  n.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  last;  c!=  null;  c  =  n.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
54	[BUG]  [BUGGY]  For  (Node  c  =  first.getFirstChild();  c!=  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  first.getFirstChild();  c!=  null;  c  =  n.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first.getFirstChild();  c!=  null;  c  =  n.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
55	[BUG]  [BUGGY]  For  (Node  c  =  first;  c  ==  null;  c  =  n.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  first;  c  ==  null;  c  =  n.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first;  c  ==  null;  c  =  n.getNext())  {	  For    (Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  For  (Node  c  =  first;  c!=  null;  c  =  n.getParent())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  first;  c!=  null;  c  =  n.getParent())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  first;  c!=  null;  c  =  n.getParent())  {	  For    (Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
57	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.START_OF_EXPR)?  context.getCurrentContext()  :  null;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OBJECTLIT)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.START_OBJECTLIT)?  context.getCurrentContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.START_OBJECTLIT)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  Context  cc  =  first.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  first.getCurrentContext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  first.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  context.getCurrentContext(n);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  For(Node  c  =  first;  c  ==  null;  c  =  c.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c  ==  null;  c  =  c.getLastChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c  ==  null;  c  =  c.getLastChild())  {	  For(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
63	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getChildCount())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getChildCount())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  c.getChildCount())  {	  For(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
64	[BUG]  [BUGGY]  for(Node  c  =  getLast;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  getLast;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  getLast;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    getFirst;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  For(Node  c  =  getFirst;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  getFirst;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  getFirst;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    getFirst;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  for(Node  c  =  getFirst;  c  ==  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  getFirst;  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  getFirst;  c  ==  null;  c  =  c.getNext())  {	  for(Node    c    =    getFirst;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  for(Node  c  =  getFirst;  c!=  null;  c  =  first.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  getFirst;  c!=  null;  c  =  first.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  getFirst;  c!=  null;  c  =  first.getNext())  {	  for(Node    c    =    getFirst;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  Context  cc  =  context.getContext(n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  context.getContext(n);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  context.getContext(n);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  Context  cc  =  first.getContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  first.getContext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  first.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  Context  cc  =  context.createContext(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  context.createContext(n);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  context.createContext(n);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNode(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNode(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.END_OF_EXPR)?  getContext()  :  context;	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
73	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  getContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.START_OF_EXPR)?  getContext()  :  context;	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.END_OF_EXPR)?  getContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.END_OF_EXPR)?  getContext()  :  null;	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  getContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.START_OF_EXPR)?  getContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.START_OF_EXPR)?  getContext()  :  null;	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getNextSibling())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c!=  null;  c  =  c.getNextSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c!=  null;  c  =  c.getNextSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
77	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getNextSibling())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  n.getNextSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  n.getNextSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
78	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getSibling())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getNextSibling())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getNextSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  c.getNextSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
80	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getFirstSibling())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getFirstSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getFirstSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
81	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getLastSibling())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getLastSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getLastSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
82	[BUG]  [BUGGY]  Node  c  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  n.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  n.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  node.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  Node  c  =  second.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  second.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  second.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
85	[BUG]  [BUGGY]  Context  cc  =  getContextForNonOperator(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonOperator(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonOperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
86	[BUG]  [BUGGY]  Context  cc  =  getContextForNonOBJECTLIT(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonOBJECTLIT(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonOBJECTLIT(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
87	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  first);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoInOperator(context,  first);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
88	[BUG]  [BUGGY]  Context  cc  =  getContextForNonEmptyContext(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonEmptyContext(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonEmptyContext(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
89	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  false);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoInOperator(context,  false);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoInOperator(context,  false);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
90	[BUG]  [BUGGY]  Context  cc  =  getContextForSeparator(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForSeparator(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForSeparator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
91	[BUG]  [BUGGY]  Context  cc  =  getContextForNonObjectLit(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonObjectLit(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonObjectLit(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
92	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  createCurrentContext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  createCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
93	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentNode();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContext().getCurrentNode();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
94	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContext().getCurrentStatement();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  for(Node  c  =  node;  c!=  null;  c  =  first.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  node;  c!=  null;  c  =  first.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  node;  c!=  null;  c  =  first.getNext())  {	  for(Node    c    =    node;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
96	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.nextSibling())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.nextSibling())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.nextSibling())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getNextSibling())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  n.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  n.getLastChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  n.getLastChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  n.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  n.getFirstChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  n.getFirstChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  cc.addChildToBack(first);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.addChildToBack(first);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.addChildToBack(first);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
101	[BUG]  [BUGGY]  cc.detachFromParent();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.detachFromParent();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.detachFromParent();	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
102	[BUG]  [BUGGY]  cc.delete(first);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.delete(first);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.delete(first);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
103	[BUG]  [BUGGY]  Node  c  =  first  ==  null?  context.getCurrentNode()  :  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first  ==  null?  context.getCurrentNode()  :  first.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first  ==  null?  context.getCurrentNode()  :  first.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
104	[BUG]  [BUGGY]  Node  c  =  first!=  null?  context.getCurrentNode()  :  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first!=  null?  context.getCurrentNode()  :  first.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first!=  null?  context.getCurrentNode()  :  first.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  Node  c  =  first!=  null?  context.getFirstChild()  :  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first!=  null?  context.getFirstChild()  :  first.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first!=  null?  context.getFirstChild()  :  first.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
106	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.BLOCK)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  For(Node  c  =  first;  c  ==  null;  c  =  c.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first;  c  ==  null;  c  =  c.getFirstChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first;  c  ==  null;  c  =  c.getFirstChild())  {	  For(Node    c    =    first;    c!=    null;    c    =    c.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
108	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.STRING)  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.STRING)  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
109	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.FUNCTION)  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.GETPROP)  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]  Node  c  =  first.next;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.next;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.next;	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
112	[BUG]  [BUGGY]  Node  c  =  first.node;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.node;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.node;	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
113	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  false);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  false);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(context,  false);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
114	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  1);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(context,  1);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
115	[BUG]  [BUGGY]  Node  c  =  first!=  null?  context.getCurrentNode()  :  first.getNext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first!=  null?  context.getCurrentNode()  :  first.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first!=  null?  context.getCurrentNode()  :  first.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  Node  c  =  first  ==  null?  context.getCurrentNode()  :  first.getNext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first  ==  null?  context.getCurrentNode()  :  first.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first  ==  null?  context.getCurrentNode()  :  first.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
117	[BUG]  [BUGGY]  Node  c  =  first  ==  null?  Context.START_OF_EXPR  :  first.getNext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first  ==  null?  Context.START_OF_EXPR  :  first.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first  ==  null?  Context.START_OF_EXPR  :  first.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
118	[BUG]  [BUGGY]  Node  c  =  first  ==  null?  Context.STATEMENT  :  first.getNext();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first  ==  null?  Context.STATEMENT  :  first.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first  ==  null?  Context.STATEMENT  :  first.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
119	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoInOperator();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoInOperator();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
120	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
121	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.nextChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.nextChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.nextChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
122	[BUG]  [BUGGY]  for(Node  c  =  start;  c!=  null;  c  =  first.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  start;  c!=  null;  c  =  first.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  start;  c!=  null;  c  =  first.getNext())  {	  for(Node    c    =    start;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
123	[BUG]  [BUGGY]  For(Node  c  =  first,  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For(Node  c  =  first,  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For(Node  c  =  first,  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    first.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
124	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
125	[BUG]  [BUGGY]  For  (Node  c  =  getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  For  (Node  c  =  getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	For  (Node  c  =  getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For    (Node    c    =    last;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
126	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  parent.getNext())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  parent.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  parent.getNext())  {	  for(Node    c    =    first;    c!=    null;    c    =    n.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getfirstChild())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.getfirstChild())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.getfirstChild())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
128	[BUG]  [BUGGY]  for(Node  c  =  second;  c!=  null;  c  =  first.getNext())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  second;  c!=  null;  c  =  first.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  second;  c!=  null;  c  =  first.getNext())  {	  for(Node    c    =    second;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
129	[BUG]  [BUGGY]  for(Node  c  =  next;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  next;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  next;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    second;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
130	[BUG]  [BUGGY]  for(Node  c  =  start;  c  ==  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  start;  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  start;  c  ==  null;  c  =  c.getNext())  {	  for(Node    c    =    start;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
131	[BUG]  [BUGGY]  for(Node  c  =  starting;  c!=  null;  c  =  c.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  starting;  c!=  null;  c  =  c.getNext())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  starting;  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    start;    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  Node  c  =  getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  getCurrentNode();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  getCurrentNode();	  Node    c    =    first;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
133	[BUG]  [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.NAME)  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c!=  null;  c  =  c.next()  ||  c.getType()  ==  Token.NAME)  {	  for(Node    c    =    first;    c!=    null;    c    =    c.next())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
134	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  STATEMENT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context,  STATEMENT);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoDeclaration(context,  STATEMENT);	  Context    cc    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
135	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
136	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
137	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getCurrentContext()  :  null;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
138	[BUG]  [BUGGY]  cc.setSeparator(null);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  cc.setSeparator(null);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	cc.setSeparator(null);	  cc.listSeparator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
139	[BUG]  [BUGGY]  Node  c  =  first.getParent();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.getParent();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.getParent();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
140	[BUG]  [BUGGY]  Node  c  =  start.getNext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  start.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  start.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
141	[BUG]  [BUGGY]  Node  c  =  last.getNext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  last.getNext();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  last.getNext();	  Node    c    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
142	[BUG]  [BUGGY]  Context  cc  =  getContextForNoOperator(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNoOperator(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNoOperator(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
143	[BUG]  [BUGGY]  Context  cc  =  getContextForNonLocal(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getContextForNonLocal(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getContextForNonLocal(context);	  Context    cc    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
144	[BUG]  [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getChildCount())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  for(Node  c  =  first;  c  ==  null;  c  =  c.getChildCount())  {  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	for(Node  c  =  first;  c  ==  null;  c  =  c.getChildCount())  {	  for(Node    c    =    first;    c!=    null;    c    =    c.getChildCount())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
145	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContextForNoInOperator();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
146	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
147	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.BLOCK)?  context.getContext()  :  context;	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
148	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getContext()  :  context;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getContext()  :  context;	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
149	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.STATEMENT)?  context.getContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.STATEMENT)?  context.getContext()  :  null;	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
150	[BUG]  [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getContext()  :  null;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Context  cc  =(context  ==  Context.BLOCK)?  context.getContext()  :  null;  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Context  cc  =(context  ==  Context.BLOCK)?  context.getContext()  :  null;	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
151	[BUG]  [BUGGY]  Node  c  =  first.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  first.removeFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  first.removeFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
152	[BUG]  [BUGGY]  Node  c  =  start.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  add(     "(     ");  }  add(     "{     ");      [BUGGY]  Node  c  =  start.getFirstChild();  [BUGGY]      if  (c  !=  first)  {  cc.listSeparator();  }  if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	653	653	1	replace	Node  c  =  start.getFirstChild();	  Node    c    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
