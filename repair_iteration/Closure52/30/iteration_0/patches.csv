bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addNumber(n.getDouble());  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addNumber(n.getDouble());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getDouble());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
2	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type),  false);	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
3	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type));  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type));  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type));	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
4	[BUG]  [BUGGY]  cc.addNumber(n.getLong());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addNumber(n.getLong());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getLong());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
5	[BUG]  [BUGGY]  cc.addNumber(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addNumber(n.getLastChild());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getLastChild());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
6	[BUG]  [BUGGY]  cc.addNumber(n.getIntValue());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addNumber(n.getIntValue());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getIntValue());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]    [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	  	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getDouble());  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getDouble());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getDouble());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getLong());  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getLong());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getLong());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
10	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  true);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  true);  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type),  true);	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
11	[BUG]  [BUGGY]  cc.addString(n.getString());  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addString(n.getString());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addString(n.getString());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
12	[BUG]  [BUGGY]  cc.addName(n.getString());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]  cc.addName(n.getString());  [BUGGY]    case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addName(n.getString());	break;  	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
