bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addNumber(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getFirstChild());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getFirstChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  cc.addNumber(first.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(first.getLastChild());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(first.getLastChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  cc.addNumber(n.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getLastChild(),  1);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getLastChild(),  1);	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  cc.addNumber(first.getDouble());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(first.getDouble());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(first.getDouble());	  cc.addNumber(n.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  cc.addNumber(last.getDouble());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(last.getDouble());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(last.getDouble());	  cc.addNumber(n.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  cc.addNumber(n.getString());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getString());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getString());	  cc.addNumber(n.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  cc.addNumber(n.getInt());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getInt());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getInt());	  cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  cc.addNumber(n.getBigInteger());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getBigInteger());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getBigInteger());	  cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n),  true);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n),  true);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(n),  true);	  cc.addOp(NodeUtil.opToStrNoFail(type),    true);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n,  type),  true);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n,  type),  true);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(n,  type),  true);	  cc.addOp(NodeUtil.opToStrNoFail(type),    true);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(childCount),  true);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(childCount),  true);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(childCount),  true);	  cc.addOp(NodeUtil.opToStrNoFail(type),    true);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getInt());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getInt());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getInt());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  cc.addNumber(n.getLong());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Context.checkState(childCount  ==  2);  cc.addNumber(n.getLong());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Context.checkState(childCount  ==  2);  cc.addNumber(n.getLong());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addNumber(n.getLong());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addNumber(n.getLong());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addNumber(n.getLong());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n));  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(n));	  cc.addOp(NodeUtil.opToStrNoFail(type));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(first));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(first));  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(first));	  cc.addOp(NodeUtil.opToStrNoFail(type));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(childCount));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(childCount));  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(childCount));	  cc.addOp(NodeUtil.opToStrNoFail(type));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(parent));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(parent));  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(parent));	  cc.addOp(NodeUtil.opToStrNoFail(type));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n),  false);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(n),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n,  type),  false);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n,  type),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(n,  type),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(context),  false);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(context),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(context),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(first),  false);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(first),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(first),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(childCount),  false);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(childCount),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(childCount),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  cc.addName(first.getString());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addName(first.getString());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addName(first.getString());	  cc.addName(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  cc.addName(n.getString(),  type);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addName(n.getString(),  type);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addName(n.getString(),  type);	  cc.addName(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  cc.addName(n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addName(n.getString()  +  1);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addName(n.getString()  +  1);	  cc.addName(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
28	[BUG]  [BUGGY]  cc.addNumber(n.getLongValue());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getLongValue());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getLongValue());	  cc.addNumber(n.getIntValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  cc.addNumber(n.getIntValue()  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getIntValue()  +  1);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getIntValue()  +  1);	  cc.addNumber(n.getIntValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  cc.addNumber(n.getIntValue(),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getIntValue(),  1);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getIntValue(),  1);	  cc.addNumber(n.getIntValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  cc.addNumber(n.getDecimalValue());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getDecimalValue());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getDecimalValue());	  cc.addNumber(n.getIntValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type));  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type));  break;  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type));  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  break;  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type),  false);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  break;  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  cc.addString(n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addString(n.getString()  +  1);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addString(n.getString()  +  1);	  cc.addString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  cc.addString(first.getString());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addString(first.getString());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addString(first.getString());	  cc.addString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addNumber(n.getDouble());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addNumber(n.getDouble());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addNumber(n.getDouble());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getString());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getString());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getString());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  cc.addNumber(n.getDouble());  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getDouble());  break;  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getDouble());  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  cc.addNumber(n.getDoubleValue());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getDoubleValue());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getDoubleValue());	  cc.addNumber(n.getIntValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  cc.addNumber(n.getBigIntegerValue());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getBigIntegerValue());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getBigIntegerValue());	  cc.addNumber(n.getIntValue());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getLong());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getLong());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getLong());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getBigInteger());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getBigInteger());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addNumber(n.getBigInteger());	  Preconditions.checkState(childCount    ==    2);    cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  cc.addNumber(n.getLastChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getLastChild()  +  1);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getLastChild()  +  1);	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(parent),  false);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(parent),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(parent),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(parent),  true);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(parent),  true);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(parent),  true);	  cc.addOp(NodeUtil.opToStrNoFail(type),    true);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n.getString()),  false);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(n.getString()),  false);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addOp(NodeUtil.opToStrNoFail(n.getString()),  false);	  cc.addOp(NodeUtil.opToStrNoFail(type),    false);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  cc.addName(n.getString(),  key);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addName(n.getString(),  key);  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addName(n.getString(),  key);	  cc.addName(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
53	[BUG]  [BUGGY]  cc.addName(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addName(n.getFirstChild());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addName(n.getFirstChild());	  cc.addName(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  cc.addNumber(n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getChildCount());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getChildCount());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  break;  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  cc.addChildToFront(n.getString());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addChildToFront(n.getString());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addChildToFront(n.getString());	  cc.addString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  cc.addInt(n.getString());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addInt(n.getString());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addInt(n.getString());	  cc.addString(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  cc.addNumber(n.getShort());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);  cc.addNumber(n.getDouble());    [BUGGY]  cc.addNumber(n.getShort());  [BUGGY]      case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  addExpr(first,  NodeUtil.precedence(type));  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	228	228	1	replace	cc.addNumber(n.getShort());	  cc.addNumber(n.getLong());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
