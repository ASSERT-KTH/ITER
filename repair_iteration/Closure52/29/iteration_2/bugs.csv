bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addNumber(first.getDouble()  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getDouble()  +  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getDouble()  +  1);	  cc.addNumber(n.getDouble()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  cc.addNumber(context.getDouble()  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getDouble()  +  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getDouble()  +  1);	  cc.addNumber(n.getDouble()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  cc.addNumber(first.getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getString());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getString());	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type),  false);	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  cc.addNumber(context.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getString());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getString());	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  cc.addNumber(n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(n.getString()  +  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(n.getString()  +  1);	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  cc.addNumber(type.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(type.getString());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(type.getString());	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addOp(NodeUtil.opToStrNoFail(type));  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addOp(NodeUtil.opToStrNoFail(type));	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  cc.addNumber(context.getDouble()  -  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getDouble()  -  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getDouble()  -  1);	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  cc.addNumber(context.getIntValue());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getIntValue());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getIntValue());	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  cc.addNumber(context.getNumber());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getNumber());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getNumber());	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  cc.addNumber(context.getDouble(),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getDouble(),  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getDouble(),  1);	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  cc.addNumber(context.getNext());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getNext());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getNext());	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  1);  addList(first,  false,  context);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  1);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type));  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type));	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  cc.addNumber(first.getDouble()  -  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getDouble()  -  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getDouble()  -  1);	  cc.addNumber(first.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  cc.addNumber(first.getNext());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getNext());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getNext());	  cc.addNumber(first.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  cc.addNumber(first.getDouble(),  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getDouble(),  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getDouble(),  1);	  cc.addNumber(first.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  cc.addNumber(first.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getFirstChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getFirstChild());	  cc.addNumber(first.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  cc.addNumber(n.getDouble()  *  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(n.getDouble()  *  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(n.getDouble()  *  1);	  cc.addNumber(n.getDouble()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  cc.addNumber(last.getDouble()  -  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getDouble()  -  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getDouble()  -  1);	  cc.addNumber(n.getDouble()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  cc.addNumber(first.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getLastChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getLastChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  cc.addNumber(last.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getLastChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getLastChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  cc.addNumber(context.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getLastChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getLastChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  cc.addNumber(context.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getFirstChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getFirstChild());	  cc.addNumber(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  cc.addNumber(last.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getFirstChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getFirstChild());	  cc.addNumber(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  cc.addNumber(last.getDouble()  +  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getDouble()  +  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getDouble()  +  1);	  cc.addNumber(last.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  cc.addNumber(last.getDouble(),  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getDouble(),  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getDouble(),  1);	  cc.addNumber(last.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  cc.addNumber(first.getType());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(first.getType());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(first.getType());	  cc.addNumber(first.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  cc.addNumber(n.getString()  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(n.getString()  -  1);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(n.getString()  -  1);	  cc.addNumber(n.getDouble()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  2);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  addList(first,  false,  context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  0);  addList(first,  false,  context);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  0);  addList(first,  false,  context);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  cc.addNumber(last.getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getString());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getString());	  cc.addNumber(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  cc.addNumber(last.getNext());  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(last.getNext());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(last.getNext());	  cc.addNumber(last.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  cc.addOp(context.getDouble());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addOp(context.getDouble());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addOp(context.getDouble());	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  true);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  true);  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  true);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  cc.addChildToFront(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addChildToFront(n.getLastChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addChildToFront(n.getLastChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  cc.add(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.add(n.getLastChild());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.add(n.getLastChild());	  cc.addNumber(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  cc.addNumber(n.getFirstChild().getDouble());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(n.getFirstChild().getDouble());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(n.getFirstChild().getDouble());	  cc.addNumber(n.getDouble()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  cc.addNumber(n.getLastChild().getDouble());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(n.getLastChild().getDouble());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(n.getLastChild().getDouble());	  cc.addNumber(n.getDouble()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  cc.add(context.getDouble());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.add(context.getDouble());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.add(context.getDouble());	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  cc.addNumber(context.getBoolean());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    add(   ")   ");  break;  case  Token.COMMA:  Preconditions.checkState(childCount  ==  2);  addList(first,  false,  context);  break;  case  Token.NUMBER:  Preconditions.checkState(childCount  ==  0);    [BUGGY]  cc.addNumber(context.getBoolean());  [BUGGY]    break;  case  Token.TYPEOF:  case  Token.VOID:  case  Token.NOT:  case  Token.BITNOT:  case  Token.POS:  {  Preconditions.checkState(childCount  ==  1);  cc.addOp(NodeUtil.opToStrNoFail(type),  false);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.20851441405707477	227	227	1	replace	cc.addNumber(context.getBoolean());	  cc.addNumber(context.getDouble());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
