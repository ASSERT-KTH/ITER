bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
4	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
5	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
9	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  addExpr(n,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
13	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
14	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Context.reportCodeChange();  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.reportCodeChange();	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
15	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
16	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
17	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK);	}  	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
