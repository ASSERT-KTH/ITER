bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  n.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  n.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  context);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  context);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  cc);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  cc);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  cc);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  minPrecedence,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(minPrecedence,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  cc.addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  cc.addExpr(n,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.OTHER);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  appendExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  appendExpr(n,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  Context.OTHER);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  conn.addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  conn.addExpr(n,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  Context.OTHER);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.CALL);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
44	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
45	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
46	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
47	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
48	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CALL);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
49	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
53	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
56	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
59	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
60	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
61	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
62	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
70	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
80	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
82	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
90	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence),  IN_FOR_INIT_CLAUSE);	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(n,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence),  IN_FOR_INIT_CLAUSE);	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
93	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  rhsContext.addExpr(n,  precedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  precedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  precedence,  Context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
98	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
99	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
101	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
103	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
104	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
117	[BUG]  [BUGGY]  add(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  add(n,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER);	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
118	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
119	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
120	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  add(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
121	[BUG]  [BUGGY]  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence  -  1,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
122	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  +  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  +  1);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  +  1);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
123	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  -  1);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  -  1);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
124	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  append(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
125	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
126	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
127	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
128	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
131	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  rhsContext.addExpr(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
133	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  n);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
136	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
137	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  context.IN_FOR_INIT_CLAUSE);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  context.IN_FOR_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
141	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
142	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
143	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
144	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
148	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
149	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
150	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
151	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  Context.OTHER);  }  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  Context.OTHER);  }	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
152	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  }	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
153	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  Context.OTHER);  }  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  Context.OTHER);  }	  addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
154	[BUG]  [BUGGY]  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
155	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);    [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]      [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
