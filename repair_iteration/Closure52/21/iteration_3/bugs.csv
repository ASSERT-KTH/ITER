bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
22	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  Context.checkState(n.getType()  >>  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >>  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >>  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  [Delete]  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
25	[BUG]  [BUGGY]  cc.addExpr(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.OTHER,  minPrecedence);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
26	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.OTHER);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
27	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
28	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.CALL);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.CALL);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
29	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.BLOCK);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
30	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.STATEMENT);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.UNKNOWN);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.UNKNOWN);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.UNKNOWN);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
33	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
34	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
35	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
36	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
37	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  n,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getFirstChild()  ==  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getFirstChild()  ==  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getFirstChild()  ==  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
44	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  -  1);	  Context.checkState(n.getType()!=    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
45	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  1);	  Context.checkState(n.getType()!=    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
46	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  minPrecedence!=  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  minPrecedence!=  0);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  minPrecedence!=  0);	  Context.checkState(n.getType()!=    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
47	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.SETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.SETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.SETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SET);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SET);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SET);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.SETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  -  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  0);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  0);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
61	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
62	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
63	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
64	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.NAME,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
65	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
66	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  >=  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
69	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  [Delete]  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  [Delete]  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  [Delete]  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getLastChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getLastChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
77	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
78	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
79	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
80	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
81	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
82	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
83	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
84	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
85	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
86	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.OTHER);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
87	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
88	[BUG]  [BUGGY]  cc.addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER_IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
89	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  minPrecedence);	  addExpr(n,    Context.OTHER_IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
90	[BUG]  [BUGGY]  appendExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER_IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
91	[BUG]  [BUGGY]  conn.addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER_IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
92	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
93	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
94	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  nPrecedence));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  nPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  nPrecedence));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
95	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
96	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  minPrecedence),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
97	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
98	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
99	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
100	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
101	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
102	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  -  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  +  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.NEW);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence,  Context.NAME);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
109	[BUG]  [BUGGY]  node.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  node.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	node.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
110	[BUG]  [BUGGY]  conn.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.setType(Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  rhsContext.setExpr(n,  precedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.setExpr(n,  precedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.setExpr(n,  precedence,  Context.OTHER);	  rhsContext.addExpr(n,    precedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
112	[BUG]  [BUGGY]  rhsContext.addExpr(n,  precedence,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  precedence,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  precedence,  Context.OTHER,  minPrecedence);	  rhsContext.addExpr(n,    precedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
113	[BUG]  [BUGGY]  conn.addExpr(n,  precedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  precedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  precedence,  Context.OTHER);	  rhsContext.addExpr(n,    precedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
114	[BUG]  [BUGGY]  Context.addExpr(n,  precedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.addExpr(n,  precedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.addExpr(n,  precedence,  Context.OTHER);	  rhsContext.addExpr(n,    precedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
115	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  &&  n.getType()  ==  Token.GETPROP);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
116	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  n.getType()!=  Token.GETPROP);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
117	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
118	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
119	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
120	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
121	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence  -  1,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence  -  1,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence  -  1,  Context.OTHER);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
122	[BUG]  [BUGGY]  conn.addExpr(n,  minPrecedence  -  1,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  minPrecedence  -  1,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  minPrecedence  -  1,  Context.OTHER);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
123	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence  -  1,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence  -  1,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence  -  1,  Context.OTHER);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
124	[BUG]  [BUGGY]  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence  +  1,  Context.OTHER);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
125	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
126	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >=  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
127	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
128	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
129	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
130	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
131	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE  +  1);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
132	[BUG]  [BUGGY]  conn.setExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.setExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.setExpr(n,  minPrecedence,  Context.OTHER);	  conn.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
133	[BUG]  [BUGGY]  conn.add(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.add(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.add(n,  minPrecedence,  Context.OTHER);	  conn.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
134	[BUG]  [BUGGY]  Context.addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.addExpr(n,  minPrecedence,  Context.OTHER);	  conn.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
135	[BUG]  [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  conn.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
136	[BUG]  [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);	  conn.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
137	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >=  Token.EXPR_RESULT);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
138	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
139	[BUG]  [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  [Delete]  Token.EXPR_RESULT);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
140	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
141	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
142	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.STATEMENT);	  Context.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
143	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.NEW);	  Context.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
156	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  appendExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
157	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  cc);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  cc);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER,  cc);	  appendExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
158	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);	  appendExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
159	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER,  context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER,  context);	  appendExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
160	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
161	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
162	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER,  context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER,  context.IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER,  context.IN_FOR_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
163	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  cc.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  cc.IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  cc.IN_FOR_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
164	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
165	[BUG]  [BUGGY]  addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
166	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence);  addExpr(n,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
171	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
172	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
173	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  &&  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  &&  n.hasChildren());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  &&  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
174	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpressionNode());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpressionNode());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpressionNode());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
175	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
176	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n.getFirstChild()));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n.getFirstChild()));	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getString());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  >=  Token.GETPROP  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
189	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
190	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
191	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
192	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  -  1);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
193	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  +  1);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
194	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.NEW);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  -  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
199	[BUG]  [BUGGY]  add(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER,  minPrecedence);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
200	[BUG]  [BUGGY]  cc.add(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.add(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.add(n,  Context.OTHER);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
201	[BUG]  [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
202	[BUG]  [BUGGY]  append(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  Context.OTHER);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
203	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
204	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
205	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
206	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
207	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
208	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
211	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
212	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
213	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
214	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
215	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
216	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
217	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
218	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
219	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
220	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
221	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
222	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence  -  1);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
223	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
224	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence  +  1);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
225	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence,  OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence,  OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK,  minPrecedence,  OTHER);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
226	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  minPrecedence!=  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  minPrecedence!=  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  minPrecedence!=  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
227	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
228	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
229	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  STATEMENT));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  STATEMENT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  STATEMENT));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
230	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  ESCAPED_JS_STRINGS));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  ESCAPED_JS_STRINGS));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  ESCAPED_JS_STRINGS));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
231	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONSTRUCTOR));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONSTRUCTOR));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONSTRUCTOR));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
232	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONCLUSIVE_BLOCK));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONCLUSIVE_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONCLUSIVE_BLOCK));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
233	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
234	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  HEX_CHARS));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  HEX_CHARS));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  HEX_CHARS));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
235	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
236	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
237	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
238	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
239	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
240	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
241	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
242	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
243	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
244	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
250	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
252	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
253	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
254	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  -  1);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
255	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  1);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  -  1);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  1);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  CONSTRUCTOR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.NEW);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
262	[BUG]  [BUGGY]  appendExpr(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  Context.OTHER,  minPrecedence);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
263	[BUG]  [BUGGY]  appendExpr(n,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  Context.EXPR_RESULT);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
264	[BUG]  [BUGGY]  appendExpr(n,  Context.EMPTY);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  Context.EMPTY);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  Context.EMPTY);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
265	[BUG]  [BUGGY]  appendExpr(n,  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  Context.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  Context.BLOCK);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
266	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  &&  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
267	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  n.getType()!=  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
268	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  minPrecedence.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  ||  minPrecedence.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  minPrecedence.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
269	[BUG]  [BUGGY]  conn.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
270	[BUG]  [BUGGY]  addExpr(n,  Context.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
271	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
272	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  Context.NEW);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
273	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence,  CONSTRUCTOR);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
274	[BUG]  [BUGGY]  cc.addExpr(n,  Context.EMPTY);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.EMPTY);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.EMPTY);	  cc.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
275	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
276	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
277	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
278	[BUG]  [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
279	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  n.getType()  ==  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
280	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER,  minPrecedence);	  rhsContext.addExpr(n,    Preconditions.IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
281	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  minPrecedence);	  rhsContext.addExpr(n,    Preconditions.IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
282	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
283	[BUG]  [BUGGY]  context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	context.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
284	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER  +  1);	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
285	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  +  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  +  2);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  +  2);	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
286	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER  +  1);	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
287	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER_EXPR  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER_EXPR  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER_EXPR  +  1);	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLastChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getNext());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getNext());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getNext());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLineno());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLineno());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
291	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER  -  1);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
292	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER  -  1);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
293	[BUG]  [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(minPrecedence,  Context.OTHER  -  1);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
294	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.BLOCK  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.BLOCK  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  Context.BLOCK  -  1);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
295	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  -  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  -  2);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  -  2);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
296	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EMPTY);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
297	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
298	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
299	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
300	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
301	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
302	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
303	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  PRESERVE_BLOCK,  minPrecedence,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
304	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
305	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
306	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  CONSTRUCTOR));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  CONSTRUCTOR));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  CONSTRUCTOR));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
307	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  STATEMENT));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  STATEMENT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence,  STATEMENT));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
308	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  +  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence  -  1);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  minPrecedence,  Context.NEW);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
320	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  n.getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  n.getString());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
321	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getLineno());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getLineno());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getLineno());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
322	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getString());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  n.getString());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
323	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getString()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getString()  +  1);	  Context.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
324	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
325	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
326	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
327	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
328	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
329	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
330	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER,  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER,  context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER,  context);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
331	[BUG]  [BUGGY]  append(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  Context.OTHER,  minPrecedence);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
332	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER,  cc);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER,  cc);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER,  cc);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
333	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
334	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
335	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
343	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
344	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
345	[BUG]  [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
346	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  context.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  context.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  context.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
347	[BUG]  [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
348	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
349	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
350	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
351	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
352	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
353	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
354	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
355	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
356	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
357	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
358	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR);	  cc.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
359	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);	  cc.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  -  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  *  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  *  2);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  *  2);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  0);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  0);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChildCount()  >  0);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
368	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
369	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
370	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
371	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
372	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
373	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
374	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
375	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CALL);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
376	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
377	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
378	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getString());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  n.getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  minPrecedence  +  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLineno());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLineno());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  minPrecedence);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  IN_FOR_INIT_CLAUSE);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
385	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.traverse(compiler,  n,  this);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  IN_FOR_INIT_CLAUSE);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  context);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  Context.EXPR_RESULT);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
390	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getString());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
391	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
392	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString()  +  1);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
400	[BUG]  [BUGGY]  Context.checkState(n.getType()  >=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >=  Token.BLOCK);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
401	[BUG]  [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  [Delete]  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  [Delete]  Token.BLOCK);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
402	[BUG]  [BUGGY]  Context.checkState(n.getType()  >>  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >>  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >>  Token.BLOCK);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
403	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
404	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
405	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
406	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
407	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
408	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
409	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  &&  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
410	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  CONtext.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  CONtext.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  CONtext.OTHER);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
411	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  minPrecedence);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
412	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
413	[BUG]  [BUGGY]  cc.addExpr(n,  Context.IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
414	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  Context.OTHER);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
415	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  OTHER);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
418	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.traverse(compiler,  n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.traverse(compiler,  n,  minPrecedence,  Context.OTHER);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this.minPrecedence,  Context.OTHER);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  consumer);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  consumer);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  consumer);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  this);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  this);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  this);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  IN_FOR_INIT_CLAUSE);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
425	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
426	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
427	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
428	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
429	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
430	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
431	[BUG]  [BUGGY]  n.setType(Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
434	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  Context.OTHER);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  addExpr(n,  Context.OTHER);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
436	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
439	[BUG]  [BUGGY]  n.setType(Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  Context.OTHER);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  Context.OTHER);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
442	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
443	[BUG]  [BUGGY]  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  IN_FOR_INIT_CLAUSE,  minPrecedence));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
444	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  1));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  1));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  1));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
445	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_RESULT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_RESULT));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
446	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  PRESERVE_BLOCK));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
447	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
449	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkArgument(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkArgument(n.getType()  ==  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
451	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
457	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  &&  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
458	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()!=  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
459	[BUG]  [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
460	[BUG]  [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
461	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
462	[BUG]  [BUGGY]  conn.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
463	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
464	[BUG]  [BUGGY]  context.addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  context.addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	context.addExpr(n,  minPrecedence,  Context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
465	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.BLOCK);	  rhsContext.addExpr(n,    minPrecedence,    context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getString()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  +  n.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  +  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  minPrecedence  +  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
469	[BUG]  [BUGGY]  conn.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  rhsContext.addExpr(n,    IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
470	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  minPrecedence);	  rhsContext.addExpr(n,    IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
471	[BUG]  [BUGGY]  rhsContext.addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  maxPrecedence,  Context.OTHER);	  rhsContext.addExpr(n,    IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
472	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.BLOCK);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
473	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.DECEMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.DECEMBER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.DECEMBER);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
474	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.CALL);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
475	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.STATEMENT);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
476	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
477	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
478	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
479	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
480	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
481	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
482	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
483	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
484	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.EXPR_RESULT);	  rhsContext.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
485	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
486	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
487	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
488	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
489	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
490	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
491	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
492	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  PRESERVE_BLOCK));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  PRESERVE_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  PRESERVE_BLOCK));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
493	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  PRESERVE_BLOCK));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  PRESERVE_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  PRESERVE_BLOCK));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
494	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  precedence));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  precedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  precedence));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
495	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  MISSING_ELSE));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
496	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  STATEMENT));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  STATEMENT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  STATEMENT));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  >=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
506	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
507	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
508	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getLastChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getLastChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getLastChild()  ==  n);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
509	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
510	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
511	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getNext());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getNext());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getNext());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
515	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
516	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
517	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
518	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
519	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
520	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
521	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
522	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
523	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
524	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
525	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
526	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence,  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
527	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE),  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE),  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE),  minPrecedence);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
528	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence  -  1,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence  -  1,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence  -  1,  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
529	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
530	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence  +  1,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence  +  1,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence  +  1,  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
531	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    context);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
532	[BUG]  [BUGGY]  conn.addChildToFront(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addChildToFront(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addChildToFront(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
533	[BUG]  [BUGGY]  conn.add(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.add(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.add(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
534	[BUG]  [BUGGY]  conn.setExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.setExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.setExpr(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
535	[BUG]  [BUGGY]  conn.addChildToBack(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addChildToBack(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addChildToBack(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
536	[BUG]  [BUGGY]  conn.addExpr(n,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  Context.OTHER,  minPrecedence);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
537	[BUG]  [BUGGY]  conn.addExpr(n,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addExpr(n,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addExpr(n,  Context.EXPR_RESULT);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
538	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
539	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
540	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  STATEMENT));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  STATEMENT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  STATEMENT));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
541	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
542	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONCLUSIVE_BLOCK));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONCLUSIVE_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONCLUSIVE_BLOCK));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
543	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONCLUSION));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONCLUSION));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONCLUSION));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
544	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_EXPR));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_EXPR));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_EXPR));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
545	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
546	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
547	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
548	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
549	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
550	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
551	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
552	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
554	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getLastChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getLastChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
558	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
559	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  n,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
564	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
565	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
566	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
567	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
568	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
569	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.getType()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.getType()));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.getType()));	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
570	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.getString()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.getString()));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.getString()));	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
571	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE),  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE),  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE),  n);	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  minPrecedence  +  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkState(n.setType(Token.EXPR_RESULT));  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.setType(Token.EXPR_RESULT));  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.setType(Token.EXPR_RESULT));  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
576	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EXPR_RESULT);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
577	[BUG]  [BUGGY]  node.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  node.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	node.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
578	[BUG]  [BUGGY]  conn.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
579	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    addExpr);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
580	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    addExpr);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
581	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    addExpr);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
582	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr,  Context.STATEMENT);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    addExpr);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
583	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr  -  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr  -  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr  -  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    addExpr);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
584	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
585	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
586	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
587	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
588	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
589	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
590	[BUG]  [BUGGY]  n.addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(n,  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
591	[BUG]  [BUGGY]  n.addExpr(int,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(int,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(int,  minPrecedence,  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
592	[BUG]  [BUGGY]  n.addExpr(in_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(in_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(in_FOR_INIT_CLAUSE,  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
593	[BUG]  [BUGGY]  n.addExpr(inputCharsetEncoder,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(inputCharsetEncoder,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(inputCharsetEncoder,  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
594	[BUG]  [BUGGY]  n.addExpr(MinPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(MinPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(MinPrecedence,  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
595	[BUG]  [BUGGY]  n.add(minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.add(minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.add(minPrecedence,  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
596	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
597	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
598	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
599	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
600	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
602	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
607	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  PRESERVE_BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  PRESERVE_BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  PRESERVE_BLOCK);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
608	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONCLUSIVE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONCLUSIVE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONCLUSIVE);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
609	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_EXPR);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
610	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
611	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
612	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
613	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
614	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
615	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  >=  Token.GETPROP  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
616	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
618	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
620	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
621	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
622	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
623	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);  addExpr(n,  Context.OTHER);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
624	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
625	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  >=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
630	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
631	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
632	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  [Delete]  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  [Delete]  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  [Delete]  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
633	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  IN_FOR_INIT_CLAUSE);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    CONSTRUCTOR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
634	[BUG]  [BUGGY]  rhsContext.addExpr(n,  CONSTRUCTOR,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  CONSTRUCTOR,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  CONSTRUCTOR,  minPrecedence);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    CONSTRUCTOR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
635	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  context);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    CONSTRUCTOR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
636	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
637	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getNext());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getNext());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getNext());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
638	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
639	[BUG]  [BUGGY]  cc.add(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.add(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.add(n,  minPrecedence,  Context.OTHER);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
640	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER,  cc);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  minPrecedence,  Context.OTHER,  cc);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER,  cc);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
641	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER,  context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  minPrecedence,  Context.OTHER,  context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER,  context);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
643	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
649	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
651	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
652	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
653	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);	  Context.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
654	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  -  1);	  Context.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
655	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);	  Context.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
656	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  minPrecedence);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
657	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
658	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  PRESERVE_BLOCK,  minPrecedence),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
659	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE),  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE),  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE),  minPrecedence);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
660	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  maxPrecedence);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
661	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
662	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
665	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
666	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  Context.OTHER));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  Context.OTHER));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  Context.OTHER));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
667	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence  -  1));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence  -  1));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence  -  1));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
668	[BUG]  [BUGGY]  Context.checkState(rhsContext.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(rhsContext.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(rhsContext.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
669	[BUG]  [BUGGY]  Context.checkState(n.getType()  >>  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  >>  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  >>  Token.EXPR_RESULT);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
670	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoder));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoder));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
671	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_ELSE));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_ELSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_ELSE));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
672	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoding));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoding));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoding));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
673	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
676	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ELEMENT  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ELEMENT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.ELEMENT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
677	[BUG]  [BUGGY]  cc.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  cc.addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
678	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChars());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChars());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChars());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
679	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getJSType());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getJSType());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getJSType());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
680	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
684	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
685	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
686	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
687	[BUG]  [BUGGY]  conn.addValue(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addValue(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addValue(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
688	[BUG]  [BUGGY]  conn.addDecimal(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addDecimal(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addDecimal(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
689	[BUG]  [BUGGY]  conn.add(n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.add(n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.add(n);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChars());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChars());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  n.getChars());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
691	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
692	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER_OF_EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER_OF_EXPR);	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
693	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER)+  1;  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER)+  1;	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.ASSIGN);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
698	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChars());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChars());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChars());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
699	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getJSType());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getJSType());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getJSType());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
700	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.ASSIGN);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
701	[BUG]  [BUGGY]  Context.report(JSError.make(IN_FOR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(IN_FOR_INIT_CLAUSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(IN_FOR_INIT_CLAUSE,  minPrecedence));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
702	[BUG]  [BUGGY]  Context.report(JSError.make(IN_FOR_INIT_CLAUSE,  n));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(IN_FOR_INIT_CLAUSE,  n));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(IN_FOR_INIT_CLAUSE,  n));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
703	[BUG]  [BUGGY]  Context.report(JSError.make(NAMESPACE_ERROR,  n));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(NAMESPACE_ERROR,  n));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(NAMESPACE_ERROR,  n));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
704	[BUG]  [BUGGY]  n.addExpr(new  Context(n,  minPrecedence,  Context.OTHER));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(new  Context(n,  minPrecedence,  Context.OTHER));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(new  Context(n,  minPrecedence,  Context.OTHER));	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
705	[BUG]  [BUGGY]  n.addExpr(new  Context(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addExpr(new  Context(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addExpr(new  Context(n,  minPrecedence));	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
706	[BUG]  [BUGGY]  n.addChildToFront(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addChildToFront(context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addChildToFront(context);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
707	[BUG]  [BUGGY]  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  maxPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
708	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
709	[BUG]  [BUGGY]  append(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
710	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
711	[BUG]  [BUGGY]  append(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  maxPrecedence,  Context.OTHER);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
712	[BUG]  [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
713	[BUG]  [BUGGY]  rhsContext.addExpr(n,  cc,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  cc,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  cc,  Context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    cc);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
714	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
715	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
716	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.hasChildren());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
717	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.hasChildren());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.hasChildren());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
718	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
719	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
720	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoder));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  inputCharsetEncoder));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
721	[BUG]  [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
722	[BUG]  [BUGGY]  add(n,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.EXPR_RESULT);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
723	[BUG]  [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER  ||  n.getType()  ==  Token.NAME);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
724	[BUG]  [BUGGY]  append(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
725	[BUG]  [BUGGY]  append(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
726	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLOSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLOSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLOSE,  minPrecedence));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
727	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_ELSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_ELSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_ELSE,  minPrecedence));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
728	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  minPrecedence,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
729	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
730	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_BLOCK);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
731	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
732	[BUG]  [BUGGY]  rhsContext.addExpr(n,  prev,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  prev,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  prev,  Context.OTHER);	  rhsContext.addExpr(n,    precedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
733	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  }	  context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
734	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
735	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
736	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  context);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  context);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    context);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
737	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  addCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  addCharsetEncoder);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  addCharsetEncoder);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    context);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
738	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild()  +  1);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
739	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
740	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
741	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
742	[BUG]  [BUGGY]  n.setType(Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.NAME);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
743	[BUG]  [BUGGY]  addExpr(n,  minPrecedence  -  1,  Context.OTHER  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence  -  1,  Context.OTHER  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence  -  1,  Context.OTHER  +  1);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
744	[BUG]  [BUGGY]  append(n,  minPrecedence  -  1,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  minPrecedence  -  1,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  minPrecedence  -  1,  Context.OTHER);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
745	[BUG]  [BUGGY]  addExpr(n,  minPrecedence  -  1,  Context.OTHER_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence  -  1,  Context.OTHER_EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence  -  1,  Context.OTHER_EXPR);	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
746	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.GETPROP);	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
747	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  Context.OTHER);	  addExpr(n,    Context.OTHER_IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
748	[BUG]  [BUGGY]  Context.report(JSError.make(n,  MIN_INIT_CLAUSE),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  MIN_INIT_CLAUSE),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  MIN_INIT_CLAUSE),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
749	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence),  IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence),  IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence),  IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
750	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
751	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
752	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.OTHER);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
753	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR_RESULT);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
754	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
755	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
756	[BUG]  [BUGGY]  appendExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  appendExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	appendExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  appendExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
757	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
758	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  minPrecedence  ==  OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  minPrecedence  ==  OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  minPrecedence  ==  OTHER);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild()  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild()  +  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
760	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
761	[BUG]  [BUGGY]  rhsContext.addExpr(n,  context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  context.OTHER);	  rhsContext.addExpr(n,    minPrecedence,    context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
762	[BUG]  [BUGGY]  rhsContext.addExpr(n,  context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  context.OTHER,  minPrecedence);	  rhsContext.addExpr(n,    minPrecedence,    context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
763	[BUG]  [BUGGY]  Context.report(JSError.make(IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(IN_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
764	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_ELSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_ELSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_ELSE,  minPrecedence));	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
765	[BUG]  [BUGGY]  Context.report(JSError.make(UNKNOWN_EXPR_ERROR));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(UNKNOWN_EXPR_ERROR));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(UNKNOWN_EXPR_ERROR));	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
766	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
767	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
768	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  addExpr);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  addExpr);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  addExpr);	  Context.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
769	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
770	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
771	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
772	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  }  else  {  throw  new  IllegalStateException( " ");  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
773	[BUG]  [BUGGY]  n.setType(Context.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Context.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Context.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
774	[BUG]  [BUGGY]  n.setType(Token.EXPR_RESULT)+  1;  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.EXPR_RESULT)+  1;  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EXPR_RESULT)+  1;  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
775	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  IN_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
776	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  ONE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  ONE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  ONE);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
777	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  1);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
778	[BUG]  [BUGGY]  add(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
779	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
780	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
781	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
782	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
783	[BUG]  [BUGGY]  addExpr(n,  In_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  In_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  In_FOR_INIT_CLAUSE,  Context.OTHER);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
784	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.BLOCK);	  rhsContext.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
785	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getNext()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getNext()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getNext()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
787	[BUG]  [BUGGY]  n.setType(Token.EXPR_TYPE);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.EXPR_TYPE);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EXPR_TYPE);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
788	[BUG]  [BUGGY]  n.setType(Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.GETPROP);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
789	[BUG]  [BUGGY]  rhsContext.addExpr(n,  In_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  In_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  In_FOR_INIT_CLAUSE,  Context.OTHER);	  rhsContext.addExpr(n,    Preconditions.IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
790	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  Context.OTHER);	  rhsContext.addExpr(n,    Preconditions.IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
791	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.GETPROP)  {  addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.GETPROP);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
792	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME)  {  addExpr(n,  Context.OTHER);  }  else  {  addExpr(n,  minPrecedence,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
795	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  *  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  *  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  *  1);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
796	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  |  Context.OTHER  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  |  Context.OTHER  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  |  Context.OTHER  -  1);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
797	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
798	[BUG]  [BUGGY]  Context.checkState(minPrecedence.getType()!=  Token.NAME,  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(minPrecedence.getType()!=  Token.NAME,  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(minPrecedence.getType()!=  Token.NAME,  n);	  Context.checkState(n.getType()!=    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
799	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  minPrecedence  -  1);	  Context.checkState(n.getType()!=    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
800	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
801	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
802	[BUG]  [BUGGY]  addExpr(n,  maxPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  maxPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  maxPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
803	[BUG]  [BUGGY]  addExpr(n,  precedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  precedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  precedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
804	[BUG]  [BUGGY]  addExpr(n,  IN_FOR_INIT_CLAUSE  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  IN_FOR_INIT_CLAUSE  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  IN_FOR_INIT_CLAUSE  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
805	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
806	[BUG]  [BUGGY]  Preconditions.checkState(n.hasType()  &&  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.hasType()  &&  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.hasType()  &&  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
807	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  0);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  minPrecedence  ==  0);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
808	[BUG]  [BUGGY]  n.setType(Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EXPR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
809	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
810	[BUG]  [BUGGY]  cc.addExpr(n,  Context.BLOCK);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.BLOCK);	  cc.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
811	[BUG]  [BUGGY]  cc.addExpr(n,  context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  context.OTHER);	  cc.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
812	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence  -  1);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
813	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
814	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.CUSTOM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.CUSTOM);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
815	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.NEW);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.NEW);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
816	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  PRESERVE_BLOCK),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  PRESERVE_BLOCK),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
817	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLOSE),  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLOSE),  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLOSE),  minPrecedence);	  Context.report(JSError.make(context,    n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
818	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  ONE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  ONE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  ONE);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
819	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  OTHER);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  n,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
822	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  maxPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  maxPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  maxPrecedence);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
823	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  Context.OTHER);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  maxPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  maxPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  maxPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
826	[BUG]  [BUGGY]  addExpr(n,  maxPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  maxPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  maxPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
827	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER)&&  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER)&&  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER)&&  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
828	[BUG]  [BUGGY]  addExpr(n,  BLOCK_OF_EXPR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  BLOCK_OF_EXPR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  BLOCK_OF_EXPR  ||  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
829	[BUG]  [BUGGY]  addExpr(n,  precedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  precedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  precedence,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
830	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
831	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.SETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.SETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.SETPROP);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
832	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  minPrecedence);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
833	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
834	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  else  {  addExpr(n,  IN_FOR_INIT_CLAUSE);  }	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
835	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER)&&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER)&&  n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER)&&  n.getType()  ==  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
836	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.NAME)  {  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.NAME);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
837	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NEW);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NEW);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NEW);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
838	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  n.addExpr(minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  n.addExpr(minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  n.addExpr(minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
839	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  CONSTRUCTOR);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
840	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  ONE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  ONE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  ONE);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  OTHER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  OTHER);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
842	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  n);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
843	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  minPrecedence);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
844	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTINUTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTINUTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTINUTION);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
845	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONCLUSIVE_BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONCLUSIVE_BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONCLUSIVE_BLOCK);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
846	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
847	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
848	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
849	[BUG]  [BUGGY]  Context.checkState(rhsContext.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(rhsContext.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(rhsContext.getType()!=  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
850	[BUG]  [BUGGY]  Context.checkState(mn.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(mn.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(mn.getType()  ==  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
851	[BUG]  [BUGGY]  Context.checkNotState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkNotState(n.getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkNotState(n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
852	[BUG]  [BUGGY]  rhsContext.addExpr(n,  CONSTRUCTOR_EXPR_RESULT,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  CONSTRUCTOR_EXPR_RESULT,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  CONSTRUCTOR_EXPR_RESULT,  Context.OTHER);	  rhsContext.addExpr(n,    IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
854	[BUG]  [BUGGY]  Preconditions.checkState(mn.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(mn.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(mn.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
856	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  CONSTRUCTOR);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    CONSTRUCTOR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
857	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  outputCharsetEncoder);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR,  outputCharsetEncoder);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    CONSTRUCTOR);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
858	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
859	[BUG]  [BUGGY]  Preconditions.checkState(n.hasType()  &&  n.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.hasType()  &&  n.getType()!=  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.hasType()  &&  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
860	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
861	[BUG]  [BUGGY]  Context.checkState(n.hasChildren()  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.hasChildren()  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.hasChildren()  &&  n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
862	[BUG]  [BUGGY]  Context.checkState(n!=  null  &&  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n!=  null  &&  n.getType()!=  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n!=  null  &&  n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
863	[BUG]  [BUGGY]  Context.checkState(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.hasChildren()  &&  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
864	[BUG]  [BUGGY]  Context.checkState(mn.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(mn.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(mn.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
865	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  outputCharsetEncoder);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  minPrecedence,  Context.OTHER,  outputCharsetEncoder);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
866	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  extractCharsetEncoder,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  extractCharsetEncoder,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  extractCharsetEncoder,  Context.OTHER);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
867	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  null,  Context.OTHER);	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
868	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
869	[BUG]  [BUGGY]  Context.checkState(rhsContext.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(rhsContext.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(rhsContext.getType()!=  Token.BLOCK);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
870	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
871	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
872	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
873	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
874	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONTINUE));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONTINUE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONTINUE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
875	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR,  n.getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
876	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
877	[BUG]  [BUGGY]  Context.checkState(minPrecedence.getType()!=  Token.EXPR_RESULT,  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(minPrecedence.getType()!=  Token.EXPR_RESULT,  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(minPrecedence.getType()!=  Token.EXPR_RESULT,  n);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
878	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  nPrecedence);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  nPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  nPrecedence);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
879	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence  -  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence  -  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  minPrecedence  -  1);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
880	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
881	[BUG]  [BUGGY]  append(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  Preconditions.IN_FOR_INIT_CLAUSE,  Context.OTHER);	  append(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
882	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER_IN_FOR_INIT_CLAUSE,  CONSTRUCTOR);	  addExpr(n,    Context.OTHER_IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
883	[BUG]  [BUGGY]  add(n,  minPrecedence,  Context.OTHER,  context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  minPrecedence,  Context.OTHER,  context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  minPrecedence,  Context.OTHER,  context.STATEMENT);	  add(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
884	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  in_FOR_INIT_CLAUSE,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  in_FOR_INIT_CLAUSE,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  in_FOR_INIT_CLAUSE,  minPrecedence));	  Context.report(JSError.make(context,    n,    minPrecedence,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
885	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
886	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
887	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getString().equals( "prototype "));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getString().equals( "prototype "));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP  &&  n.getString().equals( "prototype "));	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
888	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getFirstChild());	  Preconditions.checkState(n.getType()!=    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
889	[BUG]  [BUGGY]  Context.report(JSError.make(n,  minPrecedence  -  1),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  minPrecedence  -  1),  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  minPrecedence  -  1),  IN_FOR_INIT_CLAUSE);	  Context.report(JSError.make(n,    minPrecedence),    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
890	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  addExpr(n,  minPrecedence));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
893	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  IN_FOR_INIT_CLAUSE);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
895	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
896	[BUG]  [BUGGY]  rhsContext.addExpr(n,  cc,  Context.OTHER,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  cc,  Context.OTHER,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  cc,  Context.OTHER,  minPrecedence);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    cc);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
897	[BUG]  [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  cc);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  cc);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  IN_FOR_INIT_CLAUSE,  Context.OTHER,  cc);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    cc);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
898	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME,  n.getChildCount());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME,  n.getChildCount());	  Context.checkState(n.getType()!=    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
899	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_BLOCK));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_BLOCK));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
900	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_FOR_INIT_CLAUSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n,  minPrecedence,  CONSTRUCTOR_FOR_INIT_CLAUSE));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    n,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
901	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
902	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);	  Context.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
903	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  4);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  4);	  Context.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
904	[BUG]  [BUGGY]  n.addChildToFront(new  Context(n,  minPrecedence,  Context.OTHER));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addChildToFront(new  Context(n,  minPrecedence,  Context.OTHER));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addChildToFront(new  Context(n,  minPrecedence,  Context.OTHER));	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
905	[BUG]  [BUGGY]  n.addChildToFront(new  Context(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addChildToFront(new  Context(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addChildToFront(new  Context(n,  minPrecedence));	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
906	[BUG]  [BUGGY]  n.addChildToFront(cc.getContextForNoInOperator(n),  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addChildToFront(cc.getContextForNoInOperator(n),  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addChildToFront(cc.getContextForNoInOperator(n),  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
907	[BUG]  [BUGGY]  n.addChildToFront(new  Context(n,  minPrecedence),  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.addChildToFront(new  Context(n,  minPrecedence),  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.addChildToFront(new  Context(n,  minPrecedence),  Context.OTHER);	  n.addExpr(minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
908	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
909	[BUG]  [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  minPrecedence,  Context.OTHER,  IN_FOR_INIT_CLAUSE);	  addExpr(n,    minPrecedence,    Context.OTHER,    context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
910	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
911	[BUG]  [BUGGY]  n.setType(Token.NAME);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
912	[BUG]  [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  addExpr(n,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.ASSIGN)  {  addExpr(n,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.ASSIGN)  {  addExpr(n,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
913	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL)  {  addExpr(n,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.CALL)  {  addExpr(n,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.CALL)  {  addExpr(n,  Context.OTHER);  }	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    addExpr(n,    minPrecedence,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
914	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  STATEMENT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  STATEMENT);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    context);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
915	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.NAME);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
916	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
917	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
918	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
919	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
920	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE),  n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE),  n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE),  n,  minPrecedence);	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
921	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.toString()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.toString()));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.toString()));	  Context.report(JSError.make(ERROR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
922	[BUG]  [BUGGY]  n.setType(Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.FUNCTION);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
923	[BUG]  [BUGGY]  n.setType(Context.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Context.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Context.FUNCTION);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
924	[BUG]  [BUGGY]  n.setType(Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  n.setType(Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	n.setType(Token.EMPTY);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.FUNCTION);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
925	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MAX_DANGLING_ELSE));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MAX_DANGLING_ELSE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MAX_DANGLING_ELSE));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
926	[BUG]  [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MISSING_BLOCK));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MISSING_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(context,  n,  IN_FOR_INIT_CLAUSE,  MISSING_BLOCK));	  Context.report(JSError.make(context,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
927	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
928	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString());	  Context.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
929	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
930	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
931	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  END_OF_EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  END_OF_EXPR);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().endsWith( "__ "));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild().getString().endsWith( "__ "));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
933	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION,  minPrecedence);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
934	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  IN_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
935	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
936	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
937	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getChildCount());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
938	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  4);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  4);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
939	[BUG]  [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  >=  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  >=  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  >=  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
940	[BUG]  [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  ==  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  ==  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  ==  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
941	[BUG]  [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  ==  1);  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  ==  1);  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  ==  1);  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  }	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
942	[BUG]  [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  <  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  <  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  <  1);  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
943	[BUG]  [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  >=  1);  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  >=  1);  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(minPrecedence  <  1)  {  addExpr(n,  minPrecedence  -  1,  Context.OTHER);  }  else  {  Preconditions.checkState(minPrecedence  >=  1);  addExpr(n,  minPrecedence  +  1,  Context.OTHER);  }	  addExpr(n,    minPrecedence    -    1,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
945	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.EXPR);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
947	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.NAME  &&  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
948	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
949	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
950	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getFirstChild());	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
951	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);	  Context.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
952	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
955	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  START_OF_EXPR));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  START_OF_EXPR));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  START_OF_EXPR));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
956	[BUG]  [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  PRIVATE_BLOCK));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  PRIVATE_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(label,  n,  IN_FOR_INIT_CLAUSE,  PRIVATE_BLOCK));	  Context.report(JSError.make(label,    n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
957	[BUG]  [BUGGY]  addExpr(n,  n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
958	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT));	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
959	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CALL);  addExpr(n,  minPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.GETPROP);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
960	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK,  IN_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.BLOCK,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
961	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
962	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
963	[BUG]  [BUGGY]  cc.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.EXPR_RESULT);	  cc.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
964	[BUG]  [BUGGY]  cc.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  cc.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	cc.addExpr(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  cc.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
965	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Context(minPrecedence,  Context.OTHER));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Context(minPrecedence,  Context.OTHER));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  new  Context(minPrecedence,  Context.OTHER));	  NodeTraversal.traverse(compiler,    n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
966	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  addExpr(n,  minPrecedence,  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.ASSIGN);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
967	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  maxPrecedence);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  maxPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  maxPrecedence);	  rhsContext.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
968	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild()  ==  Context.STATEMENT);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
969	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  minPrecedence,  Context.EXPR_RESULT);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
970	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER,  MIN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER,  MIN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER,  MIN_FOR_INIT_CLAUSE);	  addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
971	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
972	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
973	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
974	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  END_OF_EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  END_OF_EXPR);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
975	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  NEGATING_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  NEGATING_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  NEGATING_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
976	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  TEXT_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  TEXT_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  TEXT_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.NAME,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
977	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
978	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
979	[BUG]  [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  addExpr(n,    Context.OTHER    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
980	[BUG]  [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  cc);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  cc);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  Context.IN_FOR_INIT_CLAUSE,  cc);	  addExpr(n,    Context.IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
981	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  Context.EXPR_RESULT);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
982	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  Context.STATEMENT);	  addExpr(n,    minPrecedence,    Context.OTHER    -    1);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
983	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
984	[BUG]  [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
985	[BUG]  [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  add(n,  Context.OTHER  ||  n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	add(n,  Context.OTHER  ||  n.getType()  ==  Token.CATCH);	  add(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
986	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
987	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  IN_FOR_INIT_CLAUSE);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
988	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence));	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
989	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
990	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence),  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence),  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP,  addExpr(n,  minPrecedence),  Context.OTHER);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
991	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  ||  n.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SETPROP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.SETPROP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
992	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.GETPROP;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.GETPROP;  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP)||  n.getType()  ==  Token.GETPROP;	  Preconditions.checkState(n.getType()    ==    Token.GETPROP    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
993	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
994	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
995	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
996	[BUG]  [BUGGY]  conn.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addChildToFront(n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addChildToFront(n);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
997	[BUG]  [BUGGY]  conn.addChildrenToFront(n,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  conn.addChildrenToFront(n,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	conn.addChildrenToFront(n,  Context.OTHER);	  conn.addExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
998	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
999	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1000	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  addExpr(n,  minPrecedence));	  Context.checkState(n.getType()    ==    Token.NAME,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
1001	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Context.STATEMENT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Context.STATEMENT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1002	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1003	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1004	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
1005	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);	  if(n.getType()    ==    Token.NAME)    {    addExpr(n,    Context.OTHER);    }    else    {    Preconditions.checkState(n.getType()    ==    Token.BLOCK);    addExpr(n,    Context.OTHER);    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1006	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETELEM);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1007	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FOR);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FOR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FOR);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1008	[BUG]  [BUGGY]  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	context.checkState(n.getType()  ==  Token.EXPR_RESULT);  addExpr(n,  maxPrecedence,  Context.OTHER);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT);    addExpr(n,    maxPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
1009	[BUG]  [BUGGY]  rhsContext.addExpr(n,  CONSTRUCTOR_INIT_CLAUSE,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  CONSTRUCTOR_INIT_CLAUSE,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  CONSTRUCTOR_INIT_CLAUSE,  Context.OTHER);	  rhsContext.addExpr(n,    IN_FOR_INIT_CLAUSE,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
1010	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getChildCount());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.GETPROP,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.GETPROP,    n.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1011	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
1012	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1013	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
1014	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR,  n.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR,  n.getString());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR,  n.getString());	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1015	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR,  n.getFirstChild());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1016	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.CALL);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FOR  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1017	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  in_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  in_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  in_FOR_INIT_CLAUSE);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
1018	[BUG]  [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  MIN_EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  Context.OTHER,  MIN_EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  Context.OTHER,  MIN_EXPR_RESULT);	  rhsContext.addExpr(n,    Context.OTHER,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
1019	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
1020	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONSTRUCTOR_BLOCK));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONSTRUCTOR_BLOCK));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  minPrecedence,  CONSTRUCTOR_BLOCK));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1021	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1022	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.EXPR);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1023	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()!=  Token.CATCH);	  Context.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1024	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_INIT_CLAUSE);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1025	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_OF_EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONSTRUCTOR_OF_EXPR);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1026	[BUG]  [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	rhsContext.addExpr(n,  minPrecedence,  Context.OTHER,  CONTEXT_INIT_CLAUSE);	  rhsContext.addExpr(n,    minPrecedence,    Context.OTHER,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1027	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER,  Context.OTHER);	  addExpr(n,    minPrecedence,    Context.OTHER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
1028	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  }  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  }	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1029	[BUG]  [BUGGY]  Preconditions.checkState(n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.setType(Token.EXPR_RESULT);  addExpr(n,  minPrecedence,  Context.OTHER);	  n.setType(Token.EXPR_RESULT);    addExpr(n,    minPrecedence,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1030	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_RESULT));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_RESULT));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1031	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_VALUE));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_VALUE));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  MAX_EXPR_VALUE));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1032	[BUG]  [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  n.getType()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  n.getType()));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(n,  IN_FOR_INIT_CLAUSE,  n.getType()));	  Context.report(JSError.make(n,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1033	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
1034	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  CONCLUSION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  CONCLUSION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  CONCLUSION);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
1035	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  MISSING_BLOCK);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  MISSING_BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	NodeTraversal.traverse(compiler,  n,  this,  MISSING_BLOCK);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
1036	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1037	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1038	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CATCH);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CATCH);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1039	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  IN_FOR_INIT_CLAUSE);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1040	[BUG]  [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	addExpr(n,  minPrecedence,  Context.OTHER  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  addExpr(n,    minPrecedence,    Context.OTHER    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1041	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.EXPR);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.EXPR);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.EXPR);	  Context.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
1042	[BUG]  [BUGGY]  append(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  append(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	append(n,  Context.OTHER  ||  n.getType()  ==  Token.BLOCK);	  appendExpr(n,    Context.OTHER);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1043	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
1044	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  addExpr(n,  minPrecedence));	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1045	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getChildCount());  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getChildCount());	  Context.checkState(n.getType()!=    Token.EXPR_RESULT,    minPrecedence);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1046	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME    &&    n.getFirstChild()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
1047	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1048	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
1049	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.BLOCK);  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.BLOCK);	  Context.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1050	[BUG]  [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.intValue()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addExpr(Node  n,  int  minPrecedence)  {  addExpr(n,  minPrecedence,  Context.OTHER);      [BUGGY]  Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.intValue()));  [BUGGY]        [CLASS]  CodeGenerator  Context  [METHOD]  addExpr  [RETURN_TYPE]  void  Node  n  int  minPrecedence  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  Node  n  CodeConsumer  cc  consumer  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  minPrecedence  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	876	876	1	replace	Context.report(JSError.make(ERROR_INIT_CLAUSE,  n.intValue()));	  Context.report(JSError.make(ERROR_INIT_CLAUSE,    minPrecedence));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
