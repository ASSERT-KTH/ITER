bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  ||!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
2	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
3	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
5	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)||  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)||  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLetter(key)||  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  ||!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  if(c  ==  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c  ==  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c  ==  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isName(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.GETPROP  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.GETPROP  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context.checkState(c.getType()  ==  Token.STRING);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context.checkState(c.getType()  ==  Token.STRING);	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  Context.checkState(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context.checkState(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context.checkState(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.GETPROP)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING    &&!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
30	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING    &&!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
31	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING    &&!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  if(context.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(context.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(context.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING    &&!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  ||!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)||  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)||  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)||  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
35	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  ||!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
38	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  NodeUtil.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  NodeUtil.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  NodeUtil.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
39	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  Context  c  =  context.getContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  c  =  context.getContext();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  c  =  context.getContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  c  =  context.getCurrentContext();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  c  =  context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  Node  body  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Node  body  =  c.getFirstChild();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Node  body  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Node  body  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  Node  body  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Node  body  =  c.getLastChild();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Node  body  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
47	[BUG]  [BUGGY]  if(key.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(c)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(c)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(c)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  if(context.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(context.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(context.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  ||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	||  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
55	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context.checkState(c.getType()  ==  Token.NAME);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context.checkState(c.getType()  ==  Token.NAME);	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  if(key.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
59	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(body)&&  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(body)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(body)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  ||!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  if(key.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  if(key.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key.getType()  ==  Token.STRING  &&!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING    &&!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(body)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(body)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(body)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  if(context  ==  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(context  ==  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(context  ==  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  if(key!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key!=  null)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING);	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
72	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
75	[BUG]  [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
76	[BUG]  [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
79	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  rhsContext  =  Context.createContext(context);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  rhsContext  =  Context.createContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
80	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  rhsContext  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  rhsContext  =  context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  Context  rhsContext  =  getContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  rhsContext  =  getContext();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  rhsContext  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
83	[BUG]  [BUGGY]  if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(context!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isName(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)||  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)||  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)||  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(body)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(body)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isEmpty(body)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(key!=  null)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(key!=  null)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(key!=  null)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(key!=  null)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(key!=  null)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(key!=  null)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
90	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(body)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(body)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLetter(body)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  if(key.length()  ==  0)  {  if(!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key.length()  ==  0)  {  if(!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key.length()  ==  0)  {  if(!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
93	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(body)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(body)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&  TokenStream.isJSIdentifier(body)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
94	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLetter(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isLetter(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
95	[BUG]  [BUGGY]  if(key.length()  ==  0)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(key.length()  ==  0)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(key.length()  ==  0)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(body)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(body)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(body)&&	  if(!c.isQuotedString()    ||!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  if(c.getType()  ==  Token.VAR)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.VAR)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.VAR)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  if(c.getType()  ==  Token.CATCH)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.CATCH)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.CATCH)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  if(c.isQuotedString())  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString())  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString())  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
100	[BUG]  [BUGGY]  &&  c.isQuotedString()  &&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.isQuotedString()  &&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.isQuotedString()  &&  TokenStream.isJSIdentifier(key)&&	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
102	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.STRING)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
103	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.STRING)  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
104	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
105	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!tokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!tokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.STRING)  {  if(!tokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
106	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLabelName(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isLabelName(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isLabelName(key)&&!TokenStream.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
107	[BUG]  [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
108	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.NAME)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.NAME)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
109	[BUG]  [BUGGY]  &&  c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c!=  null)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  }	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
110	[BUG]  [BUGGY]  &&!c.isQuotedString()  &&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&!c.isQuotedString()  &&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&!c.isQuotedString()  &&  TokenStream.isJSIdentifier(key)&&	  if(c!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
111	[BUG]  [BUGGY]  if(c.hasChildren())  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.hasChildren())  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.hasChildren())  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
112	[BUG]  [BUGGY]  if(c.isQuotedString())  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.isQuotedString())  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.isQuotedString())  {  if(!TokenStream.isQuotedString()  &&!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)&&	  if(key!=    null)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
113	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
114	[BUG]  [BUGGY]  Context  c  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  Context  c  =  getCurrentContext();  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	Context  c  =  getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
115	[BUG]  [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  &&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	&&  c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)&&!TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
116	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||  TokenStream.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||  TokenStream.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  &&!TokenStream.isKeyword(key)||  TokenStream.isJSIdentifier(key)&&	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
117	[BUG]  [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)||  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)||  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(c.getType()  ==  Token.STRING)  {  if(!c.isQuotedString()  ||!TokenStream.isKeyword(key)&&  TokenStream.isJSIdentifier(key)||	  if(c.getType()    ==    Token.STRING)    {    if(!c.isQuotedString()    &&!TokenStream.isKeyword(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
118	[BUG]  [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  Context.isJSIdentifier(key)&&  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);  String  key  =  c.getString();      [BUGGY]  if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  Context.isJSIdentifier(key)&&  [BUGGY]    !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	665	667	1	replace	if(!c.isQuotedString()  &&!TokenStream.isEmpty(key)&&  Context.isJSIdentifier(key)&&	  if(!c.isQuotedString()    &&!TokenStream.isEmpty(key)&&    TokenStream.isJSIdentifier(key)&&    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
