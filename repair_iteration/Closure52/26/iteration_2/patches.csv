bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
2	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(c);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
3	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  context);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
4	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  c);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
5	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  n);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
6	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  1);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
7	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getLastChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLastChild().getIndex()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
9	[BUG]  [BUGGY]  int  childCount  =  context.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getFirstChild().getIndex()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getFirstChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getLength();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLastChild().getLength();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getLength();	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
11	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLength()  +  1;	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
12	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLength()  -  1;	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
13	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLastChild().getLength();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLastChild().getLength();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLastChild().getLength();	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
14	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  *  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  *  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLength()  *  2;	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
15	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  +  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLength()  +  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLength()  +  2;	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
16	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(n);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
17	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(c);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
18	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(n,  context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(n,  context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(n,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
19	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  c);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
20	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  n);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
21	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  STATEMENT);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  STATEMENT);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  STATEMENT);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
22	[BUG]  [BUGGY]  add( "  }   ".getString());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }   ".getString());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }   ".getString());	  add(   "    }    n   ".getString());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
23	[BUG]  [BUGGY]  add( "  }   ").getString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }   ").getString());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }   ").getString());	  add(   "    }    n   ".getString());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
24	[BUG]  [BUGGY]  add( "  }   ").getString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }   ").getString();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }   ").getString();	  add(   "    }    n   ".getString());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
25	[BUG]  [BUGGY]  add( "  }   ",  c.getString());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }   ",  c.getString());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }   ",  c.getString());	  add(   "    }    n   ".getString());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
26	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(n  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(n  +  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(n  +  1);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
27	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(n,  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(n,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(n,  1);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
28	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(first);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
29	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(1);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
30	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(context);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
31	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(last);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(last);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(last);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
32	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  /  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  /  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  /  2;	  int    childCount    =    c.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
33	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  -  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  -  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  -  2;	  int    childCount    =    c.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
34	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  2  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  *  2  +  1;	  int    childCount    =    c.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
35	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  +  2;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  +  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  +  2;	  int    childCount    =    c.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
36	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.FUNCTION)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  cc.add( "  }   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( "  }   ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }   ");	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
39	[BUG]  [BUGGY]  cc.addNumber( "  }  : ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( "  }  : ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( "  }  : ");	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
40	[BUG]  [BUGGY]  cc.addNull( "  }  : ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNull( "  }  : ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNull( "  }  : ");	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
41	[BUG]  [BUGGY]  cc.addName( "  }  : ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addName( "  }  : ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addName( "  }  : ");	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
42	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getIndex(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLastChild().getIndex(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getIndex(context);	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
43	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context,  1);	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
44	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context).intValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context).intValue();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context).intValue();	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
45	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context)-  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context)-  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context)-  1;	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
46	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context)+  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context)+  1;	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(n);	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  cc.addChildToFront(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(context);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  cc.addChildToFront(last);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(last);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(last);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  cc.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(n);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  cc.addChildToFront(fn);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(fn);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(fn);	  cc.addChildToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.NAME)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.NAME)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }   ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }   ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  Context.checkState(first.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(first.getType()  ==  Token.NAME);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(first.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]  add( "  }  : ", ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }  : ", ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  : ", ");	  add(   "    }    :   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
56	[BUG]  [BUGGY]  add( "  }   ",  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }   ",  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }   ",  c);	  add(   "    }    :   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
57	[BUG]  [BUGGY]  add( "  }  : "  +  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }  : "  +  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  : "  +  c);	  add(   "    }    :   ",    c);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
58	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getChildCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getChildCount()  -  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
59	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getChildCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getChildCount()  -  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
60	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getChildCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getChildCount()  -  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
61	[BUG]  [BUGGY]  int  childCount  =  d.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  d.getChildCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  d.getChildCount()  -  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
62	[BUG]  [BUGGY]  double  childCount  =  c.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  double  childCount  =  c.getChildCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	double  childCount  =  c.getChildCount()  -  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
63	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount()  *  2  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  *  2  +  1;	  int    childCount    =    c.getChildCount()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
64	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  *  4;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount()  *  4;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  *  4;	  int    childCount    =    c.getChildCount()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
65	[BUG]  [BUGGY]  cc.addNull(d);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNull(d);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNull(d);	  cc.addExpr(d);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  cc.addExpr(d,  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addExpr(d,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addExpr(d,  1);	  cc.addExpr(d);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  cc.addPosition(d);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addPosition(d);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addPosition(d);	  cc.addExpr(d);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  if(first.getType()  ==  Token.CATCH)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.CATCH)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.CATCH)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }   ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  }   ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  Context.checkState(first.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(first.getType()  ==  Token.CATCH);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(first.getType()  ==  Token.CATCH);	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(n.getType()  ==  Token.CATCH);	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }   "));  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }   "));  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }   "));  }	  add(   "    }       "));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
73	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   "));  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   "));  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   "));  }	  add(   "    }       "));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
74	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }   "));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }   "));  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  }   "));  }	  add(   "    }       "));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
75	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  add( "  }   "));  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  add( "  }   "));  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.GETPROP)  {  add( "  }   "));  }	  add(   "    }       "));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
76	[BUG]  [BUGGY]  Node  first  =  d.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  d.getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  d.getLastChild();	  Node    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
77	[BUG]  [BUGGY]  Node  first  =  d.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  d.getFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  d.getFirstChild();	  Node    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
78	[BUG]  [BUGGY]  Node  first  =  c.getNext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  c.getNext();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.getNext();	  Node    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
79	[BUG]  [BUGGY]  add(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add(n.getLastChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add(n.getLastChild());	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
80	[BUG]  [BUGGY]  Node  first  =  c.getLastChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  c.getLastChild();  add(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.getLastChild();  add(first);	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
81	[BUG]  [BUGGY]  Node  first  =  c.getFirstChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  c.getFirstChild();  add(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.getFirstChild();  add(first);	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
82	[BUG]  [BUGGY]  add(n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add(n.getFirstChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add(n.getFirstChild());	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
83	[BUG]  [BUGGY]  n  =  c.getLastChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n  =  c.getLastChild();  add(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n  =  c.getLastChild();  add(first);	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
84	[BUG]  [BUGGY]  add(n.getLastChild(),  c);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add(n.getLastChild(),  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add(n.getLastChild(),  c);	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
85	[BUG]  [BUGGY]  n  =  c.getFirstChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n  =  c.getFirstChild();  add(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n  =  c.getFirstChild();  add(first);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
86	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  add(first,  context);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  n.getFirstChild();  add(first,  context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getFirstChild();  add(first,  context);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
87	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getChildCount()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
88	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getChildCount();	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
89	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild();	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
90	[BUG]  [BUGGY]  cc.addChildToFront(body);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(body);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(body);	  cc.addChildToFront(first);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  cc.add(first);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(first);	  cc.add(d);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
92	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  :n ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  :n ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }  :n ");  }	  add(   "    }    :n   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
93	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  :n ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  :n ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  :n ");  }	  add(   "    }    :n   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
94	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }  :n ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }  :n ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  }  :n ");  }	  add(   "    }    :n   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
95	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  :n ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  :n ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  }  :n ");  }	  add(   "    }    :n   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
96	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  :n ");  }  else  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  :n ");  }  else  {  add( "  }   ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }  :n ");  }  else  {  add( "  }   ");  }	  add(   "    }    :n   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
97	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.STRING)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }   ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  }   ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  Integer  childCount  =  c.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Integer  childCount  =  c.getChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Integer  childCount  =  c.getChildCount();	  int    childCount    =    c.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
100	[BUG]  [BUGGY]  double  childCount  =  c.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  double  childCount  =  c.getChildCount()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	double  childCount  =  c.getChildCount()  +  1;	  int    childCount    =    c.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
101	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getChildCount()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getChildCount()  +  1;	  int    childCount    =    c.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
102	[BUG]  [BUGGY]  cc.addChildToBack(first);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToBack(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(first);	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
103	[BUG]  [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first)  {  cc.addChildToBack(d);  }  else  {  addExpr(c,  1);  }	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
104	[BUG]  [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first)  {  cc.addChildToBack(d);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
105	[BUG]  [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first)  {  cc.addChildToBack(d);  }	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
106	[BUG]  [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first)  {  cc.addChildToBack(d);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first)  {  cc.addChildToBack(d);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
107	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
108	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }   ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
109	[BUG]  [BUGGY]  Context.checkState(first.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(first.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(first.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
110	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
111	[BUG]  [BUGGY]  cc.addChildToFront(d,  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(d,  2);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  2);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
112	[BUG]  [BUGGY]  cc.addChildToFront(d,  3);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(d,  3);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  3);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
113	[BUG]  [BUGGY]  cc.addChildToFront(d,  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(d,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  0);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
114	[BUG]  [BUGGY]  cc.addChildToFront(d,  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(d,  4);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  4);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
115	[BUG]  [BUGGY]  cc.addChildToFront(n,  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(n,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(n,  1);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
116	[BUG]  [BUGGY]  cc.addChildrenToFront(first);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildrenToFront(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildrenToFront(first);	  cc.addChildrenToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
117	[BUG]  [BUGGY]  cc.addChildrenToFront(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildrenToFront(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildrenToFront(context);	  cc.addChildrenToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
118	[BUG]  [BUGGY]  cc.addChildrenToFront(last);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildrenToFront(last);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildrenToFront(last);	  cc.addChildrenToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
119	[BUG]  [BUGGY]  cc.addChildrenToFront(n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildrenToFront(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildrenToFront(n);	  cc.addChildrenToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
120	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getColumnCount()  -  1;	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
121	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getColumnCount()  +  1;	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
122	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLastChild().getColumnCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getColumnCount();	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
123	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLastChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLastChild().getColumnCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLastChild().getColumnCount();	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
124	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getRowCount();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getRowCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getRowCount();	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
125	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount()  *  2;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount()  *  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getColumnCount()  *  2;	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
126	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  context.getFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  context.getFirstChild();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
128	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.NAME)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
129	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  add( "  }  : ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  add( "  }  : ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  add( "  }  : ");	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
130	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
131	[BUG]  [BUGGY]  cc.addNumber( ": ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( ": ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( ": ");	  cc.addNumber(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
132	[BUG]  [BUGGY]  cc.addNumber( "  <   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( "  <   ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( "  <   ");	  cc.addNumber(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
133	[BUG]  [BUGGY]  cc.addNumber( "  {   ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( "  {   ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( "  {   ");	  cc.addNumber(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
134	[BUG]  [BUGGY]  cc.addNumber( "; ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( "; ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( "; ");	  cc.addNumber(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
135	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
136	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context.checkState(n.getType()  ==  Token.STRING);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context.checkState(n.getType()  ==  Token.STRING);	  if(n.getType()    ==    Token.STRING)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
137	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.STRING)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.STRING)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
138	[BUG]  [BUGGY]  int  childCount  =  c.getLeastChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLeastChild().getIndex()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLeastChild().getIndex()  +  1;	  int    childCount    =    c.getLeastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
139	[BUG]  [BUGGY]  int  childCount  =  c.getLeastChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLeastChild().getIndex()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLeastChild().getIndex()  -  1;	  int    childCount    =    c.getLeastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
140	[BUG]  [BUGGY]  int  childCount  =  c.getLeastChild().getIndex(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLeastChild().getIndex(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLeastChild().getIndex(context);	  int    childCount    =    c.getLeastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
141	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(d  +  1,  c.getLastChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d  +  1,  c.getLastChild());	  cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
142	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(d  +  1,  c.getFirstChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d  +  1,  c.getFirstChild());	  cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
143	[BUG]  [BUGGY]  cc.addNumber(last);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(last);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(last);	  cc.addNumber(first);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
144	[BUG]  [BUGGY]  cc.addNumber(n);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(n);	  cc.addNumber(first);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
145	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getChildCount()  /  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getChildCount()  /  2;	  int    childCount    =    c.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
146	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getChildCount()  /  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getChildCount()  /  2;	  int    childCount    =    c.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  int  childCount  =  d.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  d.getChildCount()  /  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  d.getChildCount()  /  2;	  int    childCount    =    c.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
148	[BUG]  [BUGGY]  add( "  },null ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },null ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },null ");	  add(   "    },n   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
149	[BUG]  [BUGGY]  add( "  },needsParens ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },needsParens ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },needsParens ");	  add(   "    },n   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
150	[BUG]  [BUGGY]  if(first.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
151	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.GETPROP)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.GETPROP)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
152	[BUG]  [BUGGY]  cc.addDecimal(d,  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addDecimal(d,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addDecimal(d,  1);	  cc.addDecimal(d);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
153	[BUG]  [BUGGY]  cc.addInt(d);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addInt(d);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addInt(d);	  cc.addDecimal(d);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
154	[BUG]  [BUGGY]  cc.addDecimal(d  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addDecimal(d  +  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addDecimal(d  +  1);	  cc.addDecimal(d);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
155	[BUG]  [BUGGY]  int  childCount  =  d.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  d.getLastChild().getIndex();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  d.getLastChild().getIndex();	  int    childCount    =    d.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
156	[BUG]  [BUGGY]  int  childCount  =  d.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  d.getFirstChild().getIndex()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  d.getFirstChild().getIndex()  +  1;	  int    childCount    =    d.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
157	[BUG]  [BUGGY]  int  childCount  =  d.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  d.getFirstChild().getIndex()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  d.getFirstChild().getIndex()  -  1;	  int    childCount    =    d.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
158	[BUG]  [BUGGY]  Node  first  =  context.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  context.getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  context.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(n.getLastChild()!=  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getLastChild()!=  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getLastChild()!=  c);	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
160	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  },' ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  },' ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  },' ");  }	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
161	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  },' ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  },' ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  },' ");  }	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  },' ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  },' ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  },' ");  }	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
163	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  },' ");  }  else  {  addExpr(c.getFirstChild(),  1);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  },' ");  }  else  {  addExpr(c.getFirstChild(),  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  },' ");  }  else  {  addExpr(c.getFirstChild(),  1);  }	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
164	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  },' ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  },' ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  },' ");  }	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
165	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  context.getCurrentContext();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
166	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContext(context);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
167	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNode(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNode(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContextForNode(context);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
168	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNode(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNode(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContextForNode(n);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
169	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContext(n);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
170	[BUG]  [BUGGY]  cc.addNull(d,  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNull(d,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNull(d,  0);	  cc.addNumber(d,    0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
171	[BUG]  [BUGGY]  cc.addNumber(d,  1,  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(d,  1,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d,  1,  0);	  cc.addNumber(d,    0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
172	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  / ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  / ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }  / ");  }	  add(   "    }    /   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
173	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  / ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  / ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  / ");  }	  add(   "    }    /   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
174	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }  / ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }  / ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  }  / ");  }	  add(   "    }    /   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
175	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  / ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  / ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  }  / ");  }	  add(   "    }    /   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
176	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getIndex()  +  1;	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
177	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getIndex()  -  1;	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
178	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getIndex(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getIndex(context);	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
179	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getColumnCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getColumnCount();	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
180	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  *  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getIndex()  *  2;	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
181	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  -  2;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getIndex()  -  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getIndex()  -  2;	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
182	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getColumnCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
183	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getColumnCount()  -  1;	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
184	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getLastChild().getColumnCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getLastChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
185	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getColumnCount()  +  1;	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
186	[BUG]  [BUGGY]  int  childCount  =  context.getFirstChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getFirstChild().getColumnCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getFirstChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
187	[BUG]  [BUGGY]  int  childCount  =  context.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  context.getLastChild().getIndex();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  context.getLastChild().getIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
188	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getLastChild().getIndex()  +  1;	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
189	[BUG]  [BUGGY]  cc.add(d,  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add(d,  2);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(d,  2);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
190	[BUG]  [BUGGY]  cc.addNull(d,  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNull(d,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNull(d,  1);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
191	[BUG]  [BUGGY]  cc.add(d,  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add(d,  3);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(d,  3);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
192	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(first.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
193	[BUG]  [BUGGY]  n.setType(Token.FUNCTION)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.FUNCTION)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.FUNCTION)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
194	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLastChild().getIndex()  +  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getIndex()  +  1;	  int    childCount    =    c.getFirstChild().getIndex()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
195	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  *  1;	  int    childCount    =    c.getFirstChild().getIndex()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
196	[BUG]  [BUGGY]  char  childCount  =  c.getChildCount();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  char  childCount  =  c.getChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	char  childCount  =  c.getChildCount();	  int    childCount    =    c.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
197	[BUG]  [BUGGY]  double  childCount  =  c.getChildCount();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  double  childCount  =  c.getChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	double  childCount  =  c.getChildCount();	  int    childCount    =    c.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  ==  1);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  2);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  ==  2);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount!=  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount!=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  0);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >=  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  >=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  0);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  >  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  >  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
203	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  +  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount()  +  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  +  2;	  int    childCount    =    c.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
204	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getNext();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
205	[BUG]  [BUGGY]  Node  first  =  c.nextChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  c.nextChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.nextChild();	  Node    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  c.getFirstChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  ==  c.getFirstChild());	  Node    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  c.getLastChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  ==  c.getLastChild());	  Node    first    =    c.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
208	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  *  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount()  *  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  *  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
209	[BUG]  [BUGGY]  cc.addExpr(d,  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addExpr(d,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addExpr(d,  0);	  cc.addNumber(d,    0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
210	[BUG]  [BUGGY]  n.setType(Token.STRING)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.STRING)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.STRING)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
211	[BUG]  [BUGGY]  Node  first  =  cc.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  cc.getFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  cc.getFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
212	[BUG]  [BUGGY]  add( "  }  :null ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }  :null ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  :null ");	  add(   "    }    :n   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
213	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  first);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(d  +  1,  first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d  +  1,  first);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
214	[BUG]  [BUGGY]  cc.addNumber(d  +  1,  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber(d  +  1,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d  +  1,  1);	  cc.addNumber(d    +    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
215	[BUG]  [BUGGY]  cc.addDecimal(d,  first);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addDecimal(d,  first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addDecimal(d,  first);	  cc.addDecimal(d);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  add( "  }  : ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  add( "  }  : ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  add( "  }  : ");	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
217	[BUG]  [BUGGY]  n.setType(Token.NAME)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.NAME)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.NAME)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
218	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first!=  null)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first!=  null)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME  &&  first!=  null)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
219	[BUG]  [BUGGY]  cc.addNumber( ";n ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( ";n ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( ";n ");	  cc.addNumber(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
220	[BUG]  [BUGGY]  cc.addNumber( ", ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addNumber( ", ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( ", ");	  cc.addNumber(   "    }       ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
221	[BUG]  [BUGGY]  cc.addChildToBack(last);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToBack(last);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(last);	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
222	[BUG]  [BUGGY]  cc.addChildToBack(body);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToBack(body);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(body);	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
223	[BUG]  [BUGGY]  cc.addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToBack(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(n);	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
224	[BUG]  [BUGGY]  cc.addChildToBack(fn);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToBack(fn);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(fn);	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
225	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  -  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getChildCount()  -  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getChildCount()  -  2;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
226	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  first);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
227	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  cc);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  cc);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  cc);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
228	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  false);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  false);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  false);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
229	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  1);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
230	[BUG]  [BUGGY]  add( "  },'  {   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },'  {   ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },'  {   ");	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
231	[BUG]  [BUGGY]  add( "  },'n ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },'n ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },'n ");	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
232	[BUG]  [BUGGY]  add( "  },'] ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },'] ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },'] ");	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
233	[BUG]  [BUGGY]  add( "  },'> ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },'> ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },'> ");	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
234	[BUG]  [BUGGY]  cc.addDouble(d);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addDouble(d);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addDouble(d);	  cc.add(d);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
235	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  first);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
236	[BUG]  [BUGGY]  cc.add( "  }   "));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( "  }   "));  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }   "));	  add(   "    }       "));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
237	[BUG]  [BUGGY]  append( "  }   "));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  append( "  }   "));  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	append( "  }   "));	  add(   "    }       "));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
238	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLastChild();	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
239	[BUG]  [BUGGY]  Node  first  =  c.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  c.getfirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.getfirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
240	[BUG]  [BUGGY]  n.setType(Token.CATCH)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.CATCH)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.CATCH)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
241	[BUG]  [BUGGY]  cc.add( "  }  :n ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( "  }  :n ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }  :n ");	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
242	[BUG]  [BUGGY]  cc.add( "  }  : ",  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( "  }  : ",  n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }  : ",  n);	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
243	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getLastChild();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
244	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(n  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount(n  -  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(n  -  1);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
245	[BUG]  [BUGGY]  n.setType(Token.FUNCTION)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.FUNCTION)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.FUNCTION)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
246	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.EMPTY)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getType()  ==  Token.STRING)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
248	[BUG]  [BUGGY]  n.setType(Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.STRING)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.STRING)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
250	[BUG]  [BUGGY]  append( "  }  / ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  append( "  }  / ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	append( "  }  / ");	  add(   "    }    /   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
251	[BUG]  [BUGGY]  add( "  }  / ".);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  }  / ".);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  / ".);	  add(   "    }    /   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
252	[BUG]  [BUGGY]  n.setType(Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
254	[BUG]  [BUGGY]  n.setType(Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.CATCH)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  add( "  }  : ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  add( "  }  : ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);  add( "  }  : ");	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
257	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getFirstChild().getIndex();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getFirstChild().getIndex();	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
258	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().size();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().size();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().size();	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
259	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getLength();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getChildCount().getLength();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getLength();	  int    childCount    =    c.getChildCount().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  ==  3);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  ==  3);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
261	[BUG]  [BUGGY]  cc.add(first,  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add(first,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(first,  1);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
262	[BUG]  [BUGGY]  add( "  },neighbor ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },neighbor ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },neighbor ");	  add(   "    },n   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
263	[BUG]  [BUGGY]  add( "  },hasElseClause   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },hasElseClause   ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },hasElseClause   ");	  add(   "    },n   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
264	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.currentContext();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.currentContext();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
265	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNoInOperator(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContextForNoInOperator(context);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
266	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNoChild(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNoChild(context);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContextForNoChild(context);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
267	[BUG]  [BUGGY]  int  childCount  =  c.getlastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getlastChild().getIndex();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getlastChild().getIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
268	[BUG]  [BUGGY]  int  childCount  =  c.getfirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getfirstChild().getIndex();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getfirstChild().getIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
269	[BUG]  [BUGGY]  n.setType(Token.NAME)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n.setType(Token.NAME)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n.setType(Token.NAME)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
270	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context,  0);	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
271	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  2);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context,  2);	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
272	[BUG]  [BUGGY]  int  childCount  =  cm.getChildCount();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  cm.getChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  cm.getChildCount();	  int    childCount    =    c.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
273	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getLastChild().getIndex()  *  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getIndex()  *  2;	  int    childCount    =    c.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
274	[BUG]  [BUGGY]  cc.addExpr(first);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addExpr(first);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addExpr(first);	  cc.addNumber(first);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
275	[BUG]  [BUGGY]  cc.add( ".s.IFJDCS ".getString());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( ".s.IFJDCS ".getString());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( ".s.IFJDCS ".getString());	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
276	[BUG]  [BUGGY]  cc.add( ".s.IFJDCS ".charAt(0));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( ".s.IFJDCS ".charAt(0));  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( ".s.IFJDCS ".charAt(0));	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
277	[BUG]  [BUGGY]  cc.add( "  }  : ",  d);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( "  }  : ",  d);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }  : ",  d);	  cc.add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
278	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.removeFirstChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
279	[BUG]  [BUGGY]  Node  first  =  clazz.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  clazz.getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  clazz.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
280	[BUG]  [BUGGY]  Node  first  =  t.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  t.getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  t.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
281	[BUG]  [BUGGY]  int  childCount  =  cc.getChildCount(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  cc.getChildCount(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  cc.getChildCount(n);	  int    childCount    =    c.getChildCount(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
282	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.NAME)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.NAME)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
283	[BUG]  [BUGGY]  cc.add(d,  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add(d,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(d,  0);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
284	[BUG]  [BUGGY]  cc.add(n,  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add(n,  1);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(n,  1);	  cc.add(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
285	[BUG]  [BUGGY]  int  childCount  =  parent.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  parent.getChildCount()  /  2;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  parent.getChildCount()  /  2;	  int    childCount    =    c.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
286	[BUG]  [BUGGY]  add( "  },' ",  c.getLastChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },' ",  c.getLastChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },' ",  c.getLastChild());	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
287	[BUG]  [BUGGY]  add( "  },' ",  c.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },' ",  c.getFirstChild());  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },' ",  c.getFirstChild());	  add(   "    },'   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
288	[BUG]  [BUGGY]  add( "  },needsParens: ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  add( "  },needsParens: ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },needsParens: ");	  add(   "    },n   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
289	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
290	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH  &&  first!=  null)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH  &&  first!=  null)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH  &&  first!=  null)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
291	[BUG]  [BUGGY]  if(n.getType()!=  Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.CATCH)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
292	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
293	[BUG]  [BUGGY]  n  =  c.getLastChild();  add(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n  =  c.getLastChild();  add(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n  =  c.getLastChild();  add(n);	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
294	[BUG]  [BUGGY]  n  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n  =  c.getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n  =  c.getLastChild();	  Node    first    =    n.getLastChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
295	[BUG]  [BUGGY]  int  childCount  =  cce.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  cce.getChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  cce.getChildCount();	  int    childCount    =    c.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
296	[BUG]  [BUGGY]  cc.addChildToFront(d,  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(d,  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  c);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
297	[BUG]  [BUGGY]  cc.addChildToFront(d,  59);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToFront(d,  59);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  59);	  cc.addChildToFront(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
298	[BUG]  [BUGGY]  cc.addPosition(d,  0);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addPosition(d,  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addPosition(d,  0);	  cc.addNumber(d,    0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
299	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getFirstChild().getNext();	  Node    first    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
300	[BUG]  [BUGGY]  cc.addChildrenToFront(d,  c);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildrenToFront(d,  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildrenToFront(d,  c);	  cc.addChildrenToFront(d);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
301	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cc);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cc);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  cc);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
302	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  index);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context,  index);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context,  index);	  int    childCount    =    c.getFirstChild().getIndex(context);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
303	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.FUNCTION)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
304	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getLastChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getLastChild();	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
305	[BUG]  [BUGGY]  cc.addValue(d);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addValue(d);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addValue(d);	  cc.addNumber(first);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
306	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.FUNCTION)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
307	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.EMPTY)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(childCount  <=  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Preconditions.checkState(childCount  <=  0);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  <=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
309	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.STRING)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.STRING)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.STRING)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
310	[BUG]  [BUGGY]  n  =  c.getFirstChild();  add(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n  =  c.getFirstChild();  add(n);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n  =  c.getFirstChild();  add(n);	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
311	[BUG]  [BUGGY]  n  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  n  =  c.getFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	n  =  c.getFirstChild();	  Node    first    =    n.getFirstChild();    add(first);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
312	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getIndexedChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndexedChildCount();	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
313	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getParent();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getParent();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getParent();	  int    childCount    =    c.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
314	[BUG]  [BUGGY]  Node  first  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Node  first  =  c.removeFirstChild();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.removeFirstChild();	  Node    first    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
315	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
316	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
317	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.EMPTY)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  if(n.getType()    ==    Token.FUNCTION)    {    add(   "    }    :   ");    }    else    {    addExpr(c,    1);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
318	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForNoInOperator();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContextForNoInOperator();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
319	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild().getIndexedChildCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getIndexedChildCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
320	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  n.getFirstChild().getParent();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getParent();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
321	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  this);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  this);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context,  this);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
322	[BUG]  [BUGGY]  cc.addChildToBack(d,  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.addChildToBack(d,  c);  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(d,  c);	  cc.addChildToBack(d);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
323	[BUG]  [BUGGY]  int  childCount  =  parent.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  parent.getChildCount()  -  1;  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  parent.getChildCount()  -  1;	  int    childCount    =    c.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
324	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getParent().getLength();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getParent().getLength();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getParent().getLength();	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
325	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getCharsCount();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  int  childCount  =  c.getFirstChild().getCharsCount();  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getCharsCount();	  int    childCount    =    c.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
326	[BUG]  [BUGGY]  if(n.getType()!=  Token.CATCH)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.CATCH)  {  add( "  }, ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.CATCH)  {  add( "  }, ");  }	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
327	[BUG]  [BUGGY]  cc.add( "  }, ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  cc.add( "  }, ");  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }, ");	  if(n.getType()    ==    Token.CATCH)    {    add(   "    },   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
328	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()!=  Token.NAME)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()!=  Token.NAME)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
329	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.SCRIPT)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.SCRIPT)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.SCRIPT)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
330	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  n)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  n)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  n)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
331	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
332	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(     ":     ");  addExpr(c.getFirstChild(),  1);  }  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [BUGGY]      if  (needsParens)  {  add(     ")     ");  }  break;  }  case  Token.SWITCH:  add(     "switch(     ");  add(first);  add(     ")     ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  add( "  }  : ");  }	  if(n.getType()    ==    Token.NAME)    {    add(   "    }    :   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
