bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addNumber( "  }   ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber( "  }   ");  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber( "  }   ");	  add(   "    }.   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  cc.addNumber(d,  2);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber(d,  2);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d,  2);	  cc.addNumber(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  cc.addNumber(d,  3);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber(d,  3);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d,  3);	  cc.addNumber(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  cc.addNumber(d,  4);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber(d,  4);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d,  4);	  cc.addNumber(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }, ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }, ");  }	  add(   "    },   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }, ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }, ");  }	  add(   "    },   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }, ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  }, ");  }	  add(   "    },   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }, ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }, ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  }, ");  }	  add(   "    },   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getLastChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getIndex()  +  1;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  int  childCount  =  c.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getLastChild().getIndex();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLastChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  cc.addExpr(d);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addExpr(d);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addExpr(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  cc.addChildToFront(d);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addChildToFront(d);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  cc.add(d);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.add(d);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  cc.addDecimal(d);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addDecimal(d);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addDecimal(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  cc.addChildToFront(first);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addChildToFront(first);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(first);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  +  1;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  +  1;	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  -  1;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  -  1;	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getFirstChild().getIndex(context);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex(context);	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getFirstChild().getColumnCount();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getColumnCount();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount().getIndex();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount().getIndex();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount().getIndex();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  add( "  }   "));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  }   "));  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }   "));	  add(   "    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.NAME)  {  add( "  }  : ");  }	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  add( "  }  : ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.STRING)  {  add( "  }  : ");  }	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.CATCH)  {  add( "  }  : ");  }	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  add( "  }  : ");  }  else  {  addExpr(c,  1);  }	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Node  first  =  n.getFirstChild();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  Node  first  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Node  first  =  c.getLastChild();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Node  first  =  n.getLastChild();  add(first);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getLastChild();  add(first);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild();  add(first);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Node  first  =  n.getFirstChild();  add(first);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  n.getFirstChild();  add(first);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount()  -  1;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  -  1;	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount()  +  1;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  +  1;	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  *  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount()  *  2;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  *  2;	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount(n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount(n);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount(n);	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  -  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount()  -  2;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  -  2;	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  add( "  }  :n ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  }  :n ");  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  :n ");	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  add( "  }  : ",  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  }  : ",  c);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  : ",  c);	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  int  childCount  =  c.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getChildCount()  /  2;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getChildCount()  /  2;	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Context  rhsContext  =  Context.createContext(context);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Preconditions.checkState(childCount  ==  0);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  int  childCount  =  c.getLeastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getLeastChild().getIndex();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getLeastChild().getIndex();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getLength();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getFirstChild().getLength();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getLength();	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
47	[BUG]  [BUGGY]  add( "  },n ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  },n ");  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },n ");	  add(   "    },   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  add( "  },' ");  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  },' ");  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  },' ");	  add(   "    },   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  cc.addNumber(d,  0);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber(d,  0);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d,  0);	  cc.addNumber(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  add( "  }  / ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  }  / ");  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  / ");	  add(   "    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  cc.addNumber(first);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber(first);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(first);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  cc.addNumber(d  +  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addNumber(d  +  1);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addNumber(d  +  1);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  cc.addChildToFront(d,  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addChildToFront(d,  1);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToFront(d,  1);	  cc.addNumber(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  cc.add(d,  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.add(d,  1);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add(d,  1);	  cc.addNumber(d,    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  Node  first  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  Node  first  =  c.getFirstChild();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	Node  first  =  c.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
57	[BUG]  [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  c.getFirstChild().getIndex()  *  2;  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  c.getFirstChild().getIndex()  *  2;	  int    childCount    =    c.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  cc.addChildrenToFront(d);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addChildrenToFront(d);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildrenToFront(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
59	[BUG]  [BUGGY]  cc.addChildToBack(d);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.addChildToBack(d);  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.addChildToBack(d);	  cc.addNumber(d);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  n.getChildCount();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getChildCount();	  int    childCount    =    c.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  add( "  }  n ".getString());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  add( "  }  n ".getString());  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	add( "  }  n ".getString());	  add(   "    }    n   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  cc.add( "  }  : ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  cc.add( "  }  : ");  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	cc.add( "  }  : ");	  add(   "    }    :   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  n.getFirstChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  int  childCount  =  d.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");  addExpr(c.getFirstChild(),  1);  }  }    [BUGGY]  int  childCount  =  d.getFirstChild().getIndex();  [BUGGY]    if  (needsParens)  {  add(   ")   ");  }  break;  }  case  Token.SWITCH:  add(   "switch(   ");  add(first);  add(   ")   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.22941573387056174	685	685	1	replace	int  childCount  =  d.getFirstChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
