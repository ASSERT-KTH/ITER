bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  addExpr(c.getLastChild(),  3);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c.getLastChild(),  3);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c.getLastChild(),  3);	  addExpr(c.getFirstChild(),    3);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  add(c.getFirstChild(),  3);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(c.getFirstChild(),  3);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(c.getFirstChild(),  3);	  addExpr(c.getFirstChild(),    3);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  cc.addExpr(c.getFirstChild(),  3);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(c.getFirstChild(),  3);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(c.getFirstChild(),  3);	  addExpr(c.getFirstChild(),    3);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  addExpr(c.getFirstChild(),  4);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c.getFirstChild(),  4);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c.getFirstChild(),  4);	  addExpr(c.getFirstChild(),    3);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
5	[BUG]  [BUGGY]  add(c.getLastChild(),  2);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(c.getLastChild(),  2);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(c.getLastChild(),  2);	  addExpr(c.getLastChild(),    2);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  cc.addExpr(c.getLastChild(),  2);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(c.getLastChild(),  2);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(c.getLastChild(),  2);	  addExpr(c.getLastChild(),    2);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  addExpr(c.getLastChild(),  4);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c.getLastChild(),  4);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c.getLastChild(),  4);	  addExpr(c.getLastChild(),    2);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  addExpr(c,  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c,  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c,  1);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  addExpr(c,  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c,  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c,  0);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  cc.addNumber(d);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(d);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(d);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  cc.addNumber(d);  addExpr(c,  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(d);  addExpr(c,  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(d);  addExpr(c,  1);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  cc.addNumber(Double.parseDouble(key));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(Double.parseDouble(key));  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(Double.parseDouble(key));	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  add( ": ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add( ": ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add( ": ");	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  addExpr(c,  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c,  2);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c,  2);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  add(c.getFirstChild(),  2);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(c.getFirstChild(),  2);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(c.getFirstChild(),  2);	  add(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  add(n.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(n.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(n.getFirstChild(),  1);	  add(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  add(c.getFirstChild(),  0);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(c.getFirstChild(),  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(c.getFirstChild(),  0);	  add(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  add(c.getLastChild(),  0);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(c.getLastChild(),  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(c.getLastChild(),  0);	  add(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  add(n.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(n.getLastChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(n.getLastChild(),  1);	  add(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  add(c.getLastChild(),  3);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  add(c.getLastChild(),  3);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	add(c.getLastChild(),  3);	  add(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  cc.addExpr(c.getFirstChild(),  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(c.getFirstChild(),  2);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(c.getFirstChild(),  2);	  addExpr(c.getFirstChild(),    2);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  cc.addExpr(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(c.getLastChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(c.getLastChild(),  1);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
23	[BUG]  [BUGGY]  cc.addExpr(n.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(n.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(n.getFirstChild(),  1);	  cc.addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  cc.addExpr(context.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(context.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(context.getFirstChild(),  1);	  cc.addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  cc.addNumber(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(c.getLastChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(c.getLastChild(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  cc.addNumber(c.getFirstChild(),  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(c.getFirstChild(),  2);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(c.getFirstChild(),  2);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  cc.addNumber(n.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(n.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(n.getFirstChild(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  cc.addNumber(context.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(context.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(context.getFirstChild(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  cc.addNumber(key.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(key.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(key.getFirstChild(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  cc.addNumber(c.getFirstChild(),  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(c.getFirstChild(),  3);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(c.getFirstChild(),  3);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  addExpr(c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  cc.addNumber(key);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(key);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(key);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	Context.reportCodeChange();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  cc.addNumber(body.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(body.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(body.getFirstChild(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  cc.addNumber(getSimpleNumber(key),  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(getSimpleNumber(key),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(getSimpleNumber(key),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  cc.addNumber(context.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(context.getLastChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(context.getLastChild(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  cc.addChildToFront(c.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addChildToFront(c.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addChildToFront(c.getFirstChild(),  1);	  cc.addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  cc.addExpr(c.getFirstChild(),  0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addExpr(c.getFirstChild(),  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addExpr(c.getFirstChild(),  0);	  cc.addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  addExpr(c.getLastChild(),  0);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  addExpr(c.getLastChild(),  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	addExpr(c.getLastChild(),  0);	  addExpr(c.getLastChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  cc.add(c.getFirstChild(),  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.add(c.getFirstChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.add(c.getFirstChild(),  1);	  add(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  cc.add(c.getLastChild(),  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.add(c.getLastChild(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.add(c.getLastChild(),  1);	  cc.addExpr(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	Context  cc  =  getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
43	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  addExpr(c,  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  Context  cc  =  getCurrentContext();  addExpr(c,  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	Context  cc  =  getCurrentContext();  addExpr(c,  0);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  cc.addNumber(context.getCurrentNode(),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(context.getCurrentNode(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(context.getCurrentNode(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  cc.addNumber(c.getNext(),  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(c.getNext(),  1);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(c.getNext(),  1);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
46	[BUG]  [BUGGY]  cc.addNumber(c.getFirstChild(),  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    }  else  {  double  d  =  getSimpleNumber(key);  if  (!Double.isNaN(d))  {  cc.addNumber(d);  }  else  {  addExpr(c,  1);  }  }  add(   ":   ");    [BUGGY]  cc.addNumber(c.getFirstChild(),  0);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	682	682	1	replace	cc.addNumber(c.getFirstChild(),  0);	  cc.addNumber(c.getFirstChild(),    1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
