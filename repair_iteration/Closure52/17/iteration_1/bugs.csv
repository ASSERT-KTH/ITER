bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isNumber(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(isNumber(s)||  isSimpleNumber(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isSimpleNumber(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isDecimal(s))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(isSimpleNumber(s)||  isDecimal(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isDecimal(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
3	[BUG]  [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSimpleNumber(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
4	[BUG]  [BUGGY]  if(!isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(!isSimpleNumber(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
5	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isInfiniteNumber(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(isSimpleNumber(s)||  isInfiniteNumber(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isInfiniteNumber(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isVowel(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]    [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	  	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
8	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
9	[BUG]  [BUGGY]  if(isSingularNumber(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(isSingularNumber(s)||  isSimpleNumber(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSingularNumber(s)||  isSimpleNumber(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
10	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
11	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
12	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  static  double  getSimpleNumber(String  s)  {  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s))  {  [BUGGY]  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s))  {	if  (isSimpleNumber(s))  {  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
