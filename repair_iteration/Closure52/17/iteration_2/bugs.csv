bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isSimpleNumber(s))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  if(isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS,  s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS,  s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS,  s))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FLOAT))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FIELD_NAMES))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_FIELD_NAMES))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  s.length()  ==  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  s.length()  ==  0))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  s.length()  ==  0))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  if(isSimpleNumber(s)&&  isInfiniteNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)&&  isInfiniteNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)&&  isInfiniteNumber(s))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  if(isInfiniteNumber(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isInfiniteNumber(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isInfiniteNumber(s)||  isSimpleNumber(s))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  if(isNumber(s)||  isInfiniteNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)||  isInfiniteNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isInfiniteNumber(s))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  if(isLong(s)||  isInfiniteNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isLong(s)||  isInfiniteNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isLong(s)||  isInfiniteNumber(s))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isLong(s))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isLong(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isLong(s))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isFullName(s))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isFullName(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isFullName(s))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  if(s!=  null  ||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s!=  null  ||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s!=  null  ||  isSimpleNumber(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isSimpleNumber(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  if(s  ==  null  ||  isSimpleNumber())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isSimpleNumber())  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSimpleNumber())  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  if(s  >=  null  ||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  >=  null  ||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  >=  null  ||  isSimpleNumber(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  if(s  ==  null  ||  hasSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  hasSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  hasSimpleNumber(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if(s  ==  null  ||  isNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isNumber(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Long.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Long.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Long.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(Double.isNaN(s)&&  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)&&  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)&&  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Character.isLetterOrDigit(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Character.isLetterOrDigit(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Character.isLetterOrDigit(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Long.isLongBits(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Long.isLongBits(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Long.isLongBits(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(Double.isInfinite(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isInfinite(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isInfinite(s)||  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if(isSimpleNumber(s)&&  isVowel(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)&&  isVowel(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)&&  isVowel(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  if(isVowel(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isVowel(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isVowel(s)||  isSimpleNumber(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  isDecimal(s))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  isDecimal(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isVowel(s)||  isDecimal(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isVowel(s)||  Double.isNaN(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  isLong(s))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  isLong(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isVowel(s)||  isLong(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(isSimpleNumber(s)&&  isDecimal(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)&&  isDecimal(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)&&  isDecimal(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isBoolean(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isBoolean(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isBoolean(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isNullOrEmpty(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isNullOrEmpty(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isNullOrEmpty(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isInfinite(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  if(isDecimal(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isDecimal(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isDecimal(s)||  isSimpleNumber(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isMask(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isMask(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isMask(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s)||  Long.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s)||  Long.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isNaN(s)||  Long.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(Double.isInfinite(s)||  Double.isNaN(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isInfinite(s)||  Double.isNaN(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isInfinite(s)||  Double.isNaN(s)||  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isLongBits(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isLongBits(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Double.isLongBits(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  if(s  ==  null  ||!isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||!isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||!isSimpleNumber(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  if(s!=  null  ||!isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s!=  null  ||!isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s!=  null  ||!isSimpleNumber(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isSingletonNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isSingletonNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isSingletonNumber(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_FIELD_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_FIELD_NON_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_FIELD_NON_NUMERIC_NUMBERS))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  if(!isSimpleNumber(s)||!isLong(s))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)||!isLong(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)||!isLong(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isSingularNumber(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isSingularNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isSingularNumber(s))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  if(isSingularNumber(s)&&  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSingularNumber(s)&&  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSingularNumber(s)&&  isSimpleNumber(s))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  if(s  ==  null  ||  isSingularNumber(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isSingularNumber(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSingularNumber(s)||  isSimpleNumber(s))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  if(isShort(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isShort(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isShort(s)||  isSimpleNumber(s))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(s  ==  null  ||  isNumber(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isNumber(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isNumber(s)||  isSimpleNumber(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isNumber(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isNumber(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  if(isNumber(s)&&  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)&&  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)&&  isSimpleNumber(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
55	[BUG]  [BUGGY]  if(isLong(s)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isLong(s)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isLong(s)||  isSimpleNumber(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
56	[BUG]  [BUGGY]  if(isNumber(s)||  isLong(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)||  isLong(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isLong(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
57	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isLetterOrDigit(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isLetterOrDigit(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isLetterOrDigit(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isLongBits(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isLongBits(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isLongBits(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isDigit(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isDigit(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isDigit(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
60	[BUG]  [BUGGY]  if(Double.isNaN(s)&&  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)&&  Double.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)&&  Double.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isLong(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isLong(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isLong(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
62	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  cc  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  Context  cc  =  Context.getContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  cc  =  Context.getContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  cc  =  Context.getContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  long  l  =  Long.parseLong(s);  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	long  l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  rhsContext  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  cc  =  getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  String  s  =  getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  String  s  =  getSimpleNumber(s);  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	String  s  =  getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSimpleNumber(s)||  Double.isNaN(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)&&  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)&&  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSimpleNumber(s)&&  Double.isNaN(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  if(Double.isNaN(s)&&  Double.isNaN(s)&&  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)&&  Double.isNaN(s)&&  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)&&  Double.isNaN(s)&&  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  if(!Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!Double.isNaN(s)||  Double.isNaN(s)||  Double.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  if(Decimal.isNaN(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Decimal.isNaN(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Decimal.isNaN(s)||  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  if(!Double.isNaN(s)&&  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!Double.isNaN(s)&&  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!Double.isNaN(s)&&  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  Double.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  Double.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isVowel(s)||  Double.isInfinite(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  Character.isDigit(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isVowel(s)||  Character.isDigit(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isVowel(s)||  Character.isDigit(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  Context  ctxt  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  ctxt  =  Context.getCurrentContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  ctxt  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
78	[BUG]  [BUGGY]  Context  ct  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  ct  =  Context.getCurrentContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  ct  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
79	[BUG]  [BUGGY]  Context  c  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  c  =  Context.getCurrentContext();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  c  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
80	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  if(isNumber(s)||  isDecimal(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)||  isDecimal(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isDecimal(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
82	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BLOCK))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BLOCK))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_BLOCK))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
83	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_INTS))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_INTS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_INTS))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_LONG))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_LONG))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_LONG))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBER)||  isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBER)||  isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBER)||  isSimpleNumber(s))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  if(isSingularNumber(s)||  isFullNumber(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSingularNumber(s)||  isFullNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSingularNumber(s)||  isFullNumber(s))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  if(isSingularNumber(s)||  isSimpleNumber(null))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSingularNumber(s)||  isSimpleNumber(null))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSingularNumber(s)||  isSimpleNumber(null))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  if(!isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)&&  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
90	[BUG]  [BUGGY]  if(!isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NUMBER_NUMERIC_NUMBERS))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
91	[BUG]  [BUGGY]  if(!isSimpleNumber(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)||  Double.isNaN(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
92	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isLongBits(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isLongBits(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Double.isLongBits(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isInfinite(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isInfinite(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Long.isInfinite(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  if(isNumber(s)||  isBoolean(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)||  isBoolean(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isBoolean(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
95	[BUG]  [BUGGY]  if(isNumber(s)||  isSingletonNumber(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)||  isSingletonNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isSingletonNumber(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
96	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEmpty(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEmpty(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEmpty(s))  {	  if(isSimpleNumber(s)||    isVowel(s))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Character.isDigit(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isNaN(s)||  Character.isDigit(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isNaN(s)||  Character.isDigit(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
98	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isSimpleNumber(s)||    isInfiniteNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isUndefined(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isUndefined(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isUndefined(s))  {	  if(isSimpleNumber(s)||    isDecimal(s))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
100	[BUG]  [BUGGY]  char[]  s  =  s.toCharArray();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  char[]  s  =  s.toCharArray();  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	char[]  s  =  s.toCharArray();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
101	[BUG]  [BUGGY]  Context  cc  =  Context.createChildObjectContext(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  cc  =  Context.createChildObjectContext(context);  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  cc  =  Context.createChildObjectContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
102	[BUG]  [BUGGY]  Context  cc  =  Context.createChildObjectContext(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  Context  cc  =  Context.createChildObjectContext(s);  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	Context  cc  =  Context.createChildObjectContext(s);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
103	[BUG]  [BUGGY]  if(isSingularNumber(s)||  isFinalNumber(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSingularNumber(s)||  isFinalNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSingularNumber(s)||  isFinalNumber(s))  {	  if(isSingularNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_LAST))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_LAST))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_LAST))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
105	[BUG]  [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.PRIVATE_DANGLING_ELSE))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.PRIVATE_DANGLING_ELSE))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)||  isEnabled(Feature.PRIVATE_DANGLING_ELSE))  {	  if(isSimpleNumber(s)||    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
106	[BUG]  [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isLetter(s))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isLetter(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)||  Double.isInfinite(s)||  Character.isLetter(s))  {	  if(Double.isNaN(s)||    Double.isInfinite(s))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSimpleNumber(s)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
108	[BUG]  [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)||  Character.isDigit(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s  ==  null  ||  isSimpleNumber(s)||  Character.isDigit(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s  ==  null  ||  isSimpleNumber(s)||  Character.isDigit(s))  {	  if(s    ==    null    ||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
109	[BUG]  [BUGGY]  if(isNumber(s)||  isSimpleNumber(s)||  isLong(s))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(isNumber(s)||  isSimpleNumber(s)||  isLong(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(isNumber(s)||  isSimpleNumber(s)||  isLong(s))  {	  if(isNumber(s)||    isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
110	[BUG]  [BUGGY]  if(s!=  null  &&!isSimpleNumber(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(s!=  null  &&!isSimpleNumber(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(s!=  null  &&!isSimpleNumber(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  if(!isSimpleNumber(s)&&!Character.isLetter(s)&&!Character.isUpperCase(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)&&!Character.isLetter(s)&&!Character.isUpperCase(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)&&!Character.isLetter(s)&&!Character.isUpperCase(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  if(!isSimpleNumber(s)||!isVowel(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(!isSimpleNumber(s)||!isVowel(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(!isSimpleNumber(s)||!isVowel(s))  {	  if(!isSimpleNumber(s))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
113	[BUG]  [BUGGY]  if(Double.isNaN(s)&&  Double.isNaN(s)||  Double.isNaN(s))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {    [BUGGY]  if(Double.isNaN(s)&&  Double.isNaN(s)||  Double.isNaN(s))  {  [BUGGY]    try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {  return  l;  }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3333333333333333	749	749	1	replace	if(Double.isNaN(s)&&  Double.isNaN(s)||  Double.isNaN(s))  {	  if(Double.isNaN(s)||    Double.isNaN(s)||    Double.isNaN(s))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
