bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  c  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  context.getFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  context.getFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
2	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  n.getLastChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
3	[BUG]  [BUGGY]  Node  c  =  context.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  context.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  context.getLastChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
4	[BUG]  [BUGGY]  Node  c  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  context.getCurrentNode();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  context.getCurrentNode();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
5	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  c.getFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  c.getFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
6	[BUG]  [BUGGY]  String  key  =  context.getString();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
7	[BUG]  [BUGGY]  char  key  =  n.getString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  n.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  n.getString();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
8	[BUG]  [BUGGY]  String  key  =  n.getString()  + "n ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "n ";	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
9	[BUG]  [BUGGY]  String  key  =  c.getString()  + ". "  +  c.getName();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ". "  +  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ". "  +  c.getName();	  String    key    =    c.getString()    +   ".:   "    +    c.getName();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
10	[BUG]  [BUGGY]  String  key  =  n.getValue();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getValue();	  String    key    =    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  char  key  =  c.getValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  c.getValue();	  String    key    =    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  String  key  =  c.getString()  + ". ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ". ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ". ";	  String    key    =    c.getString()    +   "..   ";    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
13	[BUG]  [BUGGY]  String  key  =  c.getString()  + "; ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "; ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "; ";	  String    key    =    c.getString()    +   "..   ";    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
14	[BUG]  [BUGGY]  String  key  =  c.getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getFirstChild()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getFirstChild()  +  1;	  String    key    =    c.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
15	[BUG]  [BUGGY]  String  key  =  c.getString()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  +  1;	  String    key    =    c.getLastChild()    +    1;    	non-compiled	[CE]  	23	None	replace
16	[BUG]  [BUGGY]  String  key  =  n.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getLastChild()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getLastChild()  +  1;	  String    key    =    c.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
17	[BUG]  [BUGGY]  String  key  =  context.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getLastChild()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getLastChild()  +  1;	  String    key    =    c.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
18	[BUG]  [BUGGY]  String  key  =  c.getLastChild()  *  1;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getLastChild()  *  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getLastChild()  *  1;	  String    key    =    c.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(key));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(key));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(key));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
20	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(value));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(value));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
21	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(value)+  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(value)+  1);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(value)+  1);	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
22	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  Integer.toHexString(Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  Integer.toHexString(Integer.toHexString(value));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  Integer.toHexString(Integer.toHexString(value));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
23	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  value: "  +  Integer.toHexString(Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  value: "  +  Integer.toHexString(Integer.toHexString(value));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  value: "  +  Integer.toHexString(Integer.toHexString(value));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
24	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(n));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(n));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(n));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
25	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";' ";	  String    key    =    c.getString()    +   ",'   ";    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
26	[BUG]  [BUGGY]  String  key  =  context.getString()  + ",' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString()  + ",' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString()  + ",' ";	  String    key    =    c.getString()    +   ",'   ";    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
27	[BUG]  [BUGGY]  Node  key  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  n.getNext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  n.getNext();	  Node    key    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
28	[BUG]  [BUGGY]  Node  key  =  c.getKey();  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getKey();	  Node    key    =    c.getNext();    	non-compiled	[CE]  not  a  statement	91	None	replace
29	[BUG]  [BUGGY]  Node  key  =  c.getString();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getString();	  Node    key    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
30	[BUG]  [BUGGY]  Node  key  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getLastChild();	  Node    key    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
31	[BUG]  [BUGGY]  Node  key  =  c.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getNext()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getNext()  +  1;	  Node    key    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
32	[BUG]  [BUGGY]  String  key  =  c.getQuotedName()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedName()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedName()  + ": "  +  c.getString();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedName();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
33	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getQuotedKey();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getQuotedKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getQuotedKey();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedName();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
34	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + ": "  +  c.getQuotedName();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + ": "  +  c.getQuotedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + ": "  +  c.getQuotedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedName();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
35	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getQuotedName();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getQuotedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getQuotedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedName();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
36	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getQuotedName();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getQuotedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  c.getQuotedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedName();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
37	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ": "  +  c.getValue();	  String    key    =    c.getString()    +   ":   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
38	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  value: "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  value: "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  value: "  +  c.getValue();	  String    key    =    c.getString()    +   ":   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
39	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getValue();	  String    key    =    c.getString()    +   ":   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
40	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  c.getValue();	  String    key    =    c.getString()    +   ":   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
41	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(n);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
42	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context,  n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(context,  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(context,  n);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
43	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context,  c);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(context,  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(context,  c);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
44	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(c);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
45	[BUG]  [BUGGY]  Context  c  =  getContextForNonEmpty(context);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNonEmpty(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNonEmpty(context);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
46	[BUG]  [BUGGY]  Context  c  =  getContextForNonEmptyContext(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNonEmptyContext(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNonEmptyContext(context);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
47	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getText();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getText();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getText();	  String    key    =    c.getString()    +   "_   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getText();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getText();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getText();	  String    key    =    c.getString()    +   "_   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
49	[BUG]  [BUGGY]  String  key  =  c.getText()  + "_ "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getText()  + "_ "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getText()  + "_ "  +  c.getString();	  String    key    =    c.getString()    +   "_   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
50	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getText();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getText();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getText();	  String    key    =    c.getString()    +   "_   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
51	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase()  +  1;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase()  +  1;	  String    key    =    c.getString().toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase(Locale.ENGLISH);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase(Locale.ENGLISH);	  String    key    =    c.getString().toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  String  key  =  n.getString().toLowerCase();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString().toLowerCase();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString().toLowerCase();	  String    key    =    c.getString().toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  String  key  =  c.getString().toUpperCase();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toUpperCase();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toUpperCase();	  String    key    =    c.getString().toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  c.getQuotedString();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
56	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getQuotedString();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
57	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ": "  +  c.getQuotedString();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
58	[BUG]  [BUGGY]  Character  key  =  c.getKey();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Character  key  =  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Character  key  =  c.getKey();	  char    key    =    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  Char  key  =  c.getKey();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Char  key  =  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Char  key  =  c.getKey();	  char    key    =    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  Key  key  =  c.getKey();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Key  key  =  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Key  key  =  c.getKey();	  char    key    =    c.getKey();    	non-compiled	[CE]  not  a  statement	6	None	replace
61	[BUG]  [BUGGY]  Context  c  =  n.getCurrentContext();  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  n.getCurrentContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  n.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	43	None	replace
62	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	43	None	replace
63	[BUG]  [BUGGY]  Context  c  =  context.getCurrentContext(n);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.getCurrentContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.getCurrentContext(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	43	None	replace
64	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context;	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	43	None	replace
65	[BUG]  [BUGGY]  Context  c  =  context.createContext(n);  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.createContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.createContext(n);	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	43	None	replace
66	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + "_ ";  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + "_ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + "_ ";	  String    key    =    c.getString().trim()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + "( ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + "( ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + "( ";	  String    key    =    c.getString().trim()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: ";	  String    key    =    n.getString()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
69	[BUG]  [BUGGY]  String  key  =  context.getString()  + ": ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString()  + ": ";	  String    key    =    n.getString()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
70	[BUG]  [BUGGY]  String  key  =  c.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getFirstChild().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getFirstChild().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
71	[BUG]  [BUGGY]  String  key  =  n.getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getLastChild().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getLastChild().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
72	[BUG]  [BUGGY]  String  key  =  context.getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getLastChild().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getLastChild().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
73	[BUG]  [BUGGY]  char  key  =  c.getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  c.getLastChild().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  c.getLastChild().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
74	[BUG]  [BUGGY]  String  key  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getFirstChild().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getFirstChild().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
75	[BUG]  [BUGGY]  char  key  =  c.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  c.getFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  c.getFirstChild();	  String    key    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
76	[BUG]  [BUGGY]  String  key  =  c.getLocalPart();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getLocalPart();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getLocalPart();	  String    key    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
77	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getLocalName();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getLocalName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getLocalName();	  String    key    =    c.getString()    +   ":   "    +    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
78	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getNodeName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getNodeName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getNodeName();	  String    key    =    c.getString()    +   ":   "    +    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
79	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + ", ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + ", ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + ", ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "_ ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "_ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "_ ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + ": ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + ": ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + ";n ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + ";n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + ";n ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "( ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "( ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "( ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  char  key  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  n.getFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  n.getFirstChild();	  String    key    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
85	[BUG]  [BUGGY]  String  key  =  n.getFirstChild().toString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getFirstChild().toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getFirstChild().toString();	  String    key    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
86	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getCharno();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getCharno();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getCharno();	  String    key    =    c.getString()    +   ":   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
87	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getSourceName();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getSourceName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getSourceName();	  String    key    =    c.getString()    +   ":   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
88	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getLineno();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getLineno();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getLineno();	  String    key    =    c.getString()    +   ":   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
89	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase().trim();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase().trim();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase().trim();	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
90	[BUG]  [BUGGY]  String  key  =  c.getString().replace('',  '/')+  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('',  '/')+  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('',  '/')+  1;	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
91	[BUG]  [BUGGY]  String  key  =  c.getString().replace('',  '/');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('',  '/');  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('',  '/');	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
92	[BUG]  [BUGGY]  String  key  =  c.getString().split( ": ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().split( ": ");  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().split( ": ");	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
93	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ": "  +  c.getString();	  String    key    =    c.getString()    +   ":   "    +    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
94	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getKey();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getKey();	  String    key    =    c.getString()    +   ":   "    +    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
95	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",n ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",n ";	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
96	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";n: ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";n: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";n: ";	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
97	[BUG]  [BUGGY]  n  =  c.getString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  n  =  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	n  =  c.getString();	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
98	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";n ",  context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";n ",  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";n ",  context);	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
99	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";n't  be  null. ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";n't  be  null. ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";n't  be  null. ";	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getLocalName();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getLocalName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getLocalName();	  String    key    =    c.getString()    +   "_   "    +    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
101	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getLocalName();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getLocalName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getLocalName();	  String    key    =    c.getString()    +   "_   "    +    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
102	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getLocalName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getLocalName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getLocalName();	  String    key    =    c.getString()    +   "_   "    +    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
103	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getNodeName();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getNodeName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getNodeName();	  String    key    =    c.getString()    +   "_   "    +    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(n);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n,  context);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n,  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n,  context);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(n);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(n.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET)  {  add(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET)  {  add(n);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
109	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ",n ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ",n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ",n ";	  String    key    =    c.getString().trim()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
110	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase()  + ",   ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase()  + ",   ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase()  + ",   ";	  String    key    =    c.getString().trim()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
111	[BUG]  [BUGGY]  Context  c  =  createContext(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(n);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
112	[BUG]  [BUGGY]  Context  c  =  createContext(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(c);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
113	[BUG]  [BUGGY]  Context  c  =  createContext(context,  n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(context,  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(context,  n);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
114	[BUG]  [BUGGY]  Context  c  =  createContext(n,  context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(n,  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(n,  context);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
115	[BUG]  [BUGGY]  Context  c  =  createContext(context,  c);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(context,  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(context,  c);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
116	[BUG]  [BUGGY]  Context  c  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContext(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContext(context);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
117	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getChars();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getChars();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getChars();	  String    key    =    c.getString()    +   ":   "    +    c.getChars();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
118	[BUG]  [BUGGY]  String  key  =  n.getString()  + "( ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "( ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "( ";	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
119	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  null ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  null ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  null ";	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
120	[BUG]  [BUGGY]  String  key  =  c.getKey()  + "( ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + "( ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + "( ";	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
121	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
122	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getQuotedString();	  String    key    =    c.getString()    +   "_   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
123	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getQuotedString();	  String    key    =    c.getString()    +   "_   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
124	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getQuotedString();	  String    key    =    c.getString()    +   "_   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
125	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getSimpleName();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getSimpleName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getSimpleName();	  String    key    =    c.getString()    +   "_   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
126	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  context  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  context  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  context	  String    key    =    c.getString()    +   ",    context:   ";    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
127	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",	  String    key    =    c.getString()    +   ",    context:   ";    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
128	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  value ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  value ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  value ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
129	[BUG]  [BUGGY]  String  key  =  c.getString()  + "  value( ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "  value( ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "  value( ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
130	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".  value ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".  value ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".  value ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
131	[BUG]  [BUGGY]  String  key  =  c.getString()  + "  value. ";  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "  value. ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "  value. ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  	87	None	replace
132	[BUG]  [BUGGY]  String  key  =  c.getString()  + "  value ",  n);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "  value ",  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "  value ",  n);	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  	87	None	replace
133	[BUG]  [BUGGY]  String  key  =  c.getString()  + "  value ",  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "  value ",  null);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "  value ",  null);	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  	87	None	replace
134	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getCharno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getCharno();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getCharno();	  String    key    =    c.getString()    +   "_   "    +    c.getLineno();    	non-compiled	[CE]  	38	None	replace
135	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getLineno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getLineno();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getLineno();	  String    key    =    c.getString()    +   "_   "    +    c.getLineno();    	non-compiled	[CE]  	38	None	replace
136	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getLineno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getLineno();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getLineno();	  String    key    =    c.getString()    +   "_   "    +    c.getLineno();    	non-compiled	[CE]  	38	None	replace
137	[BUG]  [BUGGY]  String  key  =  c.getAsString()  + "n ";  [CE]  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getAsString()  + "n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getAsString()  + "n ";	  String    key    =    c.getAsString();    	non-compiled	[CE]  	86	None	replace
138	[BUG]  [BUGGY]  String  key  =  c.getName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getName();	  String    key    =    c.getAsString();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
139	[BUG]  [BUGGY]  String  key  =  c.getAsString()  + "' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getAsString()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getAsString()  + "' ";	  String    key    =    c.getAsString();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.STRING);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()!=  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.BLOCK);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.START);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.START);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.START);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
146	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".',' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".',' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".',' ";	  String    key    =    c.getString()    +   "','   ";    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
147	[BUG]  [BUGGY]  String  key  =  c.getString()  + "',': ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "',': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "',': ";	  String    key    =    c.getString()    +   "','   ";    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
148	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",',' ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",',' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",',' ";	  String    key    =    c.getString()    +   "','   ";    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
149	[BUG]  [BUGGY]  String  key  =  c.getString()  + "','n ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "','n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "','n ";	  String    key    =    c.getString()    +   "','   ";    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
150	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".# ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".# ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".# ";	  String    key    =    c.getString()    +   "#   ";    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
151	[BUG]  [BUGGY]  String  key  =  c.getString()  + "/ ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "/ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "/ ";	  String    key    =    c.getString()    +   "#   ";    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
152	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getValue();	  String    key    =    c.getString()    +   ",_   "    +    c.getName();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
153	[BUG]  [BUGGY]  String  key  =  c.getString()  + ", "  +  c.getName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ", "  +  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ", "  +  c.getName();	  String    key    =    c.getString()    +   ",_   "    +    c.getName();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
154	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",'(' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",'(' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",'(' ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
155	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".'(' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".'(' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".'(' ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
156	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'(' "+Character.toLowerCase(c.getType())+ "' ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'(' "+Character.toLowerCase(c.getType())+ "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'(' "+Character.toLowerCase(c.getType())+ "' ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
157	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'(' "+Character.toLowerCase(c.getType())+ ") ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'(' "+Character.toLowerCase(c.getType())+ ") ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'(' "+Character.toLowerCase(c.getType())+ ") ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
158	[BUG]  [BUGGY]  String  key  =  n.getString()  + "'(' ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "'(' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "'(' ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
159	[BUG]  [BUGGY]  String  key  =  n.getString()  + "' ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "' ");  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "' ");	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
160	[BUG]  [BUGGY]  String  key  =  c.getString()  + "' ",  n,  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "' ",  n,  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "' ",  n,  context);	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
161	[BUG]  [BUGGY]  String  key  =  c.getString()  + "' "  +  name,  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "' "  +  name,  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "' "  +  name,  n);	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
162	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",' ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",' ");  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",' ");	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
163	[BUG]  [BUGGY]  String  key  =  n.getString()  + "' ",  c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "' ",  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "' ",  c);	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
164	[BUG]  [BUGGY]  String  key  =  c.getQualifiedName()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQualifiedName()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQualifiedName()  + ": "  +  c.getString();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
165	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
166	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
167	[BUG]  [BUGGY]  String  key  =  c.getQualifiedName()  + ".: "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQualifiedName()  + ".: "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQualifiedName()  + ".: "  +  c.getString();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
168	[BUG]  [BUGGY]  String  key  =  c.getName()  + ": "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getName()  + ": "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getName()  + ": "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
169	[BUG]  [BUGGY]  char  key  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  n.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  n.getLastChild();	  String    key    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
170	[BUG]  [BUGGY]  String  key  =  n.getLastChild().toString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getLastChild().toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getLastChild().toString();	  String    key    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
171	[BUG]  [BUGGY]  String  key  =  context.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getLastChild();	  String    key    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
172	[BUG]  [BUGGY]  Node  key  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  n.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  n.getLastChild();	  String    key    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
179	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ ";	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
180	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ ";	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
181	[BUG]  [BUGGY]  String  key  =  context.getString()  + "_ ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString()  + "_ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString()  + "_ ";	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
182	[BUG]  [BUGGY]  String  key  =  n.getString()  + "_ ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "_ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "_ ";	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
183	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ".trim();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ".trim();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ".trim();	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
184	[BUG]  [BUGGY]  Context  c  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContext(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContext(context);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
185	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContext().getCurrentContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContext().getCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
186	[BUG]  [BUGGY]  Context  c  =  getCurrentContext().getRootContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContext().getRootContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContext().getRootContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
187	[BUG]  [BUGGY]  Context  c  =  getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContext(n);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
188	[BUG]  [BUGGY]  Context  c  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createCurrentContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
189	[BUG]  [BUGGY]  String  key  =  c.getText()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getText()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getText()  + ": "  +  c.getString();	  String    key    =    c.getString()    +   ":   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
190	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getText();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  c.getText();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  c.getText();	  String    key    =    c.getString()    +   ":   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
191	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getText();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  c.getText();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  c.getText();	  String    key    =    c.getString()    +   ":   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
192	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getText();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ": "  +  c.getText();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ": "  +  c.getText();	  String    key    =    c.getString()    +   ":   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()!=  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()!=  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
196	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()!=  Token.GET  &&  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkArgument(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
199	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getKey();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getKey();	  String    key    =    c.getString()    +   "_   "    +    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
200	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getKey();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getKey();	  String    key    =    c.getString()    +   "_   "    +    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
201	[BUG]  [BUGGY]  String  key  =  c.getText().trim();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getText().trim();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getText().trim();	  String    key    =    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
202	[BUG]  [BUGGY]  String  key  =  c.getText()  + "n ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getText()  + "n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getText()  + "n ";	  String    key    =    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
203	[BUG]  [BUGGY]  String  key  =  c.getText()  + ", ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getText()  + ", ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getText()  + ", ";	  String    key    =    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
204	[BUG]  [BUGGY]  String  key  =  c.getFirstChild().toString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getFirstChild().toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getFirstChild().toString();	  String    key    =    c.getLastChild().toString();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
205	[BUG]  [BUGGY]  char  key  =  c.getLastChild().toString();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  c.getLastChild().toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  c.getLastChild().toString();	  String    key    =    c.getLastChild().toString();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
206	[BUG]  [BUGGY]  String  key  =  c.getNext().toString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getNext().toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getNext().toString();	  String    key    =    c.getLastChild().toString();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
207	[BUG]  [BUGGY]  char  key  =  n.getQuotedString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  n.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  n.getQuotedString();	  String    key    =    n.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
208	[BUG]  [BUGGY]  String  key  =  n.getQuotedString()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getQuotedString()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getQuotedString()  +  1;	  String    key    =    n.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
209	[BUG]  [BUGGY]  String  key  =  c.getQuotedKey().trim();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedKey().trim();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedKey().trim();	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
210	[BUG]  [BUGGY]  String  key  =  context.getQuotedKey();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getQuotedKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getQuotedKey();	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
211	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + ",' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + ",' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + ",' ";	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
212	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + ".' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + ".' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + ".' ";	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
213	[BUG]  [BUGGY]  String  key  =  context.getQuotedString()  + "' ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getQuotedString()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getQuotedString()  + "' ";	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
214	[BUG]  [BUGGY]  String  key  =  n.getQuotedString()  + "' ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getQuotedString()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getQuotedString()  + "' ";	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
215	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "' ",  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "' ",  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "' ",  n);	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
216	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   "_   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
217	[BUG]  [BUGGY]  String  key  =  c.getQualifiedName()  + "_ "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQualifiedName()  + "_ "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQualifiedName()  + "_ "  +  c.getString();	  String    key    =    c.getString()    +   "_   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
218	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   "_   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
219	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getQualifiedName();	  String    key    =    c.getString()    +   "_   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
220	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ".: ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ".: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ".: ";	  String    key    =    c.getKey()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
221	[BUG]  [BUGGY]  String  key  =  c.getValue()  + ": ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getValue()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getValue()  + ": ";	  String    key    =    c.getKey()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
222	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ",  context: ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ",  context: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ",  context: ";	  String    key    =    c.getKey()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
223	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ",  null ";  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ",  null ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ",  null ";	  String    key    =    c.getKey()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
224	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",': ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",': ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
225	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".': ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".': ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
226	[BUG]  [BUGGY]  String  key  =  context.getString()  + "': ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString()  + "': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString()  + "': ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
227	[BUG]  [BUGGY]  String  key  =  n.getString()  + "': ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "': ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
228	[BUG]  [BUGGY]  String  key  =  c.getKey()  + "': ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + "': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + "': ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
229	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.STRING;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.STRING;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.STRING;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
230	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  name: "  +  Token.name;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  name: "  +  Token.name;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  name: "  +  Token.name;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
231	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.NAME;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.NAME;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.NAME;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
232	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.SIGNATURE;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.SIGNATURE;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.SIGNATURE;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
233	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.FUNCTION;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.FUNCTION;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
234	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(hashCode));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(hashCode));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(hashCode));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(hashCode));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
235	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(childCount));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(childCount));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(childCount));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(hashCode));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
236	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(short));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(short));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(short));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(hashCode));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
237	[BUG]  [BUGGY]  char  key  =  context.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  char  key  =  context.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	char  key  =  context.getQuotedString();	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
238	[BUG]  [BUGGY]  String  key  =  context.getQuotedString()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getQuotedString()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getQuotedString()  +  1;	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
239	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase()  + ": ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase()  + ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
240	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ".: ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ".: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ".: ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
241	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()).trim()  + ": ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()).trim()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType()).trim()  + ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
242	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType())+ ": ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType())+ ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType())+ ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
243	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + ": ";  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getValue()).trim()  + ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
244	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue().length())+ ": ";  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue().length())+ ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getValue().length())+ ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
245	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";n ",  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";n ",  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";n ",  context);	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
246	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";negative ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";negative ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";negative ";	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
247	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";n ",  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";n ",  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";n ",  c);	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
248	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";n't  match ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";n't  match ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";n't  match ";	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
249	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getValue();	  String    key    =    c.getString()    +   "_   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
250	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getValue();	  String    key    =    c.getString()    +   "_   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
251	[BUG]  [BUGGY]  String  key  =  c.getKey()  + "_ "  +  c.getValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + "_ "  +  c.getValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + "_ "  +  c.getValue();	  String    key    =    c.getString()    +   "_   "    +    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
252	[BUG]  [BUGGY]  String  key  =  context.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(c));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(c));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(c));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(context));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
253	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context)+  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context)+  1);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context)+  1);	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(context));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
254	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(context));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(context));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(context));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(context));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
255	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  Integer.toHexString(Integer.toHexString(context));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  Integer.toHexString(Integer.toHexString(context));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  Integer.toHexString(Integer.toHexString(context));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(context));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
256	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context),  0);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context),  0);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context),  0);	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(context));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
257	[BUG]  [BUGGY]  Node  key  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  context.getFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  context.getFirstChild();	  Node    key    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
258	[BUG]  [BUGGY]  String  key  =  c.getNodeName();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getNodeName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getNodeName();	  String    key    =    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
259	[BUG]  [BUGGY]  String  key  =  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQualifiedName();	  String    key    =    c.getLocalName();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
260	[BUG]  [BUGGY]  String  key  =  c.getString()  + ". "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ". "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ". "  +  c.getString();	  String    key    =    c.getString()    +   "._   "    +    c.getString();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
261	[BUG]  [BUGGY]  String  key  =  c.getString()  + "/._ "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "/._ "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "/._ "  +  c.getString();	  String    key    =    c.getString()    +   "._   "    +    c.getString();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
262	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  *  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  *  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  *  1;	  String    key    =    c.getQuotedString()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
263	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  +  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  +  2;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  +  2;	  String    key    =    c.getQuotedString()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
264	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(10));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(10));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(10));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(int));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
265	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(128));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(128));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(128));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(int));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
266	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(int));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(int));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  Integer.toHexString(Integer.toHexString(int));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(int));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
267	[BUG]  [BUGGY]  String  key  =  c.getSimpleName()  + ": ";  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getSimpleName()  + ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getSimpleName()  + ": ";	  String    key    =    c.getSimpleName();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
268	[BUG]  [BUGGY]  String  key  =  c.getSimpleName()  + "' ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getSimpleName()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getSimpleName()  + "' ";	  String    key    =    c.getSimpleName();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
269	[BUG]  [BUGGY]  String  key  =  c.getString()  + "[ ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "[ ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "[ ";	  String    key    =    c.getString()    +   ".*   ";    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
270	[BUG]  [BUGGY]  String  key  =  c.getString()  + "/.* ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "/.* ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "/.* ";	  String    key    =    c.getString()    +   ".*   ";    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
271	[BUG]  [BUGGY]  Context  c  =  n.getContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  n.getContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  n.getContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
272	[BUG]  [BUGGY]  Context  c  =  context.getContext(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.getContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.getContext(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
273	[BUG]  [BUGGY]  Context  c  =  this.context.getContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  this.context.getContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  this.context.getContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
274	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getContext()  :  context;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =(context  ==  null)?  context.getContext()  :  context;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =(context  ==  null)?  context.getContext()  :  context;	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
275	[BUG]  [BUGGY]  Context  c  =  context.getContextForNode(n);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.getContextForNode(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.getContextForNode(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
276	[BUG]  [BUGGY]  Context  c  =  getContextForNoDeclaration(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoDeclaration(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoDeclaration(n);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
277	[BUG]  [BUGGY]  Context  c  =  getContextForNoDeclaration(context,  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoDeclaration(context,  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoDeclaration(context,  n);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
278	[BUG]  [BUGGY]  Context  c  =  getContextForNoDeclaration(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoDeclaration(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoDeclaration(c);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
279	[BUG]  [BUGGY]  Context  c  =  getContextForNonEmptyDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNonEmptyDeclaration(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNonEmptyDeclaration(context);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
280	[BUG]  [BUGGY]  Context  c  =  getContextForNoDeclaration(n,  context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoDeclaration(n,  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoDeclaration(n,  context);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
281	[BUG]  [BUGGY]  Context  c  =  getContextForNonDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNonDeclaration(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNonDeclaration(context);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
282	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getSourceName();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getSourceName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getSourceName();	  String    key    =    c.getString()    +   ",_   "    +    c.getString();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
283	[BUG]  [BUGGY]  String  key  =  c.getString()  + ", "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ", "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ", "  +  c.getString();	  String    key    =    c.getString()    +   ",_   "    +    c.getString();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
284	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ",' ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ",' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ",' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
285	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase()  + "' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase()  + "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
286	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ".' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ".' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ".' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
287	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()).trim()  + "' ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()).trim()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType()).trim()  + "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
288	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + "' ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getValue()).trim()  + "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
289	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType())+ "' ";  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType())+ "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType())+ "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
290	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",: "  +  Token.SCRIPT;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",: "  +  Token.SCRIPT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",: "  +  Token.SCRIPT;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
291	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".: "  +  Token.SCRIPT;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".: "  +  Token.SCRIPT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".: "  +  Token.SCRIPT;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
292	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.CATCH;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.CATCH;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.CATCH;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
293	[BUG]  [BUGGY]  String  key  =  context.getString()  + ": "  +  Token.SCRIPT;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getString()  + ": "  +  Token.SCRIPT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getString()  + ": "  +  Token.SCRIPT;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
294	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.CASE;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.CASE;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.CASE;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
295	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getChars();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",_ "  +  c.getChars();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",_ "  +  c.getChars();	  String    key    =    c.getString()    +   "_   "    +    c.getChars();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
296	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getChars();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getChars();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getChars();	  String    key    =    c.getString()    +   "_   "    +    c.getChars();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
297	[BUG]  [BUGGY]  Context  c  =  createContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
298	[BUG]  [BUGGY]  Context  c  =  getContextForNode(n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNode(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNode(n);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
299	[BUG]  [BUGGY]  Context  c  =  getContext(n);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContext(n);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
300	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ",' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ",' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ",' ";	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
301	[BUG]  [BUGGY]  String  key  =  c.getValue()  + "' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getValue()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getValue()  + "' ";	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
302	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ".' ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ".' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ".' ";	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
303	[BUG]  [BUGGY]  String  key  =  context.getKey()  + "' ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getKey()  + "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getKey()  + "' ";	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
304	[BUG]  [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getSourceName();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "._ "  +  c.getSourceName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "._ "  +  c.getSourceName();	  String    key    =    c.getString()    +   "_   "    +    c.getSourceName();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
305	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'.: ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'.: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'.: ";	  String    key    =    c.getString()    +   ".:   ";    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
306	[BUG]  [BUGGY]  String  key  =  c.getQuotedKey().toLowerCase();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedKey().toLowerCase();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedKey().toLowerCase();	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
307	[BUG]  [BUGGY]  String  key  =  c.getQuotedKey()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedKey()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedKey()  +  1;	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
308	[BUG]  [BUGGY]  Node  key  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  n.removeFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  n.removeFirstChild();	  Node    key    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
309	[BUG]  [BUGGY]  Node  key  =  n.firstChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  n.firstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  n.firstChild();	  Node    key    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
310	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "+key;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "+key;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "+key;	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
311	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  n);	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
312	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "+name;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "+name;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "+name;	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
313	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";: "  +  c.getName();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";: "  +  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";: "  +  c.getName();	  String    key    =    c.getString()    +   ".:   "    +    c.getName();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
314	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getChars(0,  c.getLineno());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getChars(0,  c.getLineno());  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getChars(0,  c.getLineno());	  String    key    =    c.getString()    +   ":   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  add(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  add(n);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  add(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  add(n);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(context);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(context);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
318	[BUG]  [BUGGY]  String  key  =  c.getString().replace('.',  '/')+  1;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('.',  '/')+  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('.',  '/')+  1;	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
319	[BUG]  [BUGGY]  String  key  =  c.getString().split( "n ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().split( "n ");  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().split( "n ");	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
320	[BUG]  [BUGGY]  Context  c  =  context.getContextForNoChild(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.getContextForNoChild(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.getContextForNoChild(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
321	[BUG]  [BUGGY]  Context  c  =  getContextForNode(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNode(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNode(context);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
322	[BUG]  [BUGGY]  Context  c  =  context.createChildContext(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.createChildContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.createChildContext(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.GET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
324	[BUG]  [BUGGY]  String  key  =  c.getKey()  + "',' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + "',' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + "',' ";	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
325	[BUG]  [BUGGY]  String  key  =  c.getKey()  + "' ",  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + "' ",  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + "' ",  n);	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
326	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ": "  +  Token.name;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ": "  +  Token.name;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ": "  +  Token.name;	  String    key    =    c.getKey()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
327	[BUG]  [BUGGY]  String  key  =  c.getString()  + "* ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "* ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "* ";	  String    key    =    c.getString()    +   ".*   ";    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
328	[BUG]  [BUGGY]  Context  c  =  findCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  findCurrentContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  findCurrentContext();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
329	[BUG]  [BUGGY]  Context  c  =  getCurrentContextIn();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContextIn();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContextIn();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
330	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNode();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContextForNode();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContextForNode();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
331	[BUG]  [BUGGY]  String  key  =  c.getQuotedString().toString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString().toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString().toString();	  String    key    =    c.getLastChild().toString();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
332	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".(' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".(' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".(' ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
333	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'('] ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'('] ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'('] ";	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
334	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ ": ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType()  -  1)+ ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
335	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getChildCount()  -  1)+ ": ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getChildCount()  -  1)+ ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getChildCount()  -  1)+ ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
336	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  body ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  body ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  body ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
337	[BUG]  [BUGGY]  String  key  =  c.getString()  + "  name ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "  name ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "  name ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
338	[BUG]  [BUGGY]  String  key  =  c.getSimpleName()  + "_ "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getSimpleName()  + "_ "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getSimpleName()  + "_ "  +  c.getString();	  String    key    =    c.getSimpleName();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
339	[BUG]  [BUGGY]  String  key  =  c.getSimpleName()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getSimpleName()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getSimpleName()  + ": "  +  c.getString();	  String    key    =    c.getSimpleName();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
340	[BUG]  [BUGGY]  String  key  =  c.getSimpleName()  + "_ "  +  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getSimpleName()  + "_ "  +  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getSimpleName()  + "_ "  +  c.getQuotedString();	  String    key    =    c.getSimpleName();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
341	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "# ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "# ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "# ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
342	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "   ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "   ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "   ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
343	[BUG]  [BUGGY]  String  key  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getFirstChild();	  String    key    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
344	[BUG]  [BUGGY]  Context  c  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  this.context.getCurrentContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  this.context.getCurrentContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
345	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",' "+key;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",' "+key;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",' "+key;	  String    key    =    c.getString()    +   ",'   ";    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
346	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",' "  +  name;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",' "  +  name;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",' "  +  name;	  String    key    =    c.getString()    +   ",'   ";    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
347	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "': ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "': ";	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
348	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "',' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "',' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "',' ";	  String    key    =    c.getQuotedString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
349	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context,  null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(context,  null);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(context,  null);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
350	[BUG]  [BUGGY]  Node  key  =  c.getChildCount();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getChildCount();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getChildCount();	  Node    key    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.CATCH);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.NAME);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
353	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getString();	  String    key    =    c.getString()    +   "._   "    +    c.getString();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
354	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";neighbor ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";neighbor ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";neighbor ";	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
355	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";n't  match ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";n't  match ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";n't  match ";	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
356	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";n ",  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";n ",  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";n ",  c);	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
357	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";n: ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";n: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";n: ";	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
358	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";neighbor ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";neighbor ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";neighbor ";	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
359	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getLength();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getLength();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getLength();	  String    key    =    c.getString()    +   "_   "    +    c.getChars();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
360	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getChars(0,  c.getLineno());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getChars(0,  c.getLineno());  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getChars(0,  c.getLineno());	  String    key    =    c.getString()    +   "_   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
361	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getName();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getName();	  String    key    =    c.getString()    +   "._   "    +    c.getName();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
362	[BUG]  [BUGGY]  String  key  =  n.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(c.getType()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(c.getType()));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(c.getType()));	  String    key    =    n.getString()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
363	[BUG]  [BUGGY]  String  key  =  n.getString()  + ": "  +  Integer.toHexString(c.getInitialValue());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + ": "  +  Integer.toHexString(c.getInitialValue());  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + ": "  +  Integer.toHexString(c.getInitialValue());	  String    key    =    n.getString()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
364	[BUG]  [BUGGY]  String  key  =  n.getQuotedString()  + "n ";  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getQuotedString()  + "n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getQuotedString()  + "n ";	  String    key    =    n.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
365	[BUG]  [BUGGY]  String  key  =  n.getQuotedString().trim();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getQuotedString().trim();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getQuotedString().trim();	  String    key    =    n.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
366	[BUG]  [BUGGY]  String  key  =  c.getString()  + "': "  +  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "': "  +  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "': "  +  n);	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
367	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ "' ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType()  -  1)+ "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
368	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getChildCount()  -  1)+ "' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getChildCount()  -  1)+ "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getChildCount()  -  1)+ "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
369	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(last));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(last));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(last));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(hashCode));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
370	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(string));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(string));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(string));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(hashCode));    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
371	[BUG]  [BUGGY]  String  key  =  c.getAsString().trim();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getAsString().trim();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getAsString().trim();	  String    key    =    c.getAsString();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
372	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'.n ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'.n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'.n ";	  String    key    =    c.getString()    +   "..   ";    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
373	[BUG]  [BUGGY]  String  key  =  c.getValue()  +  1;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getValue()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getValue()  +  1;	  String    key    =    c.getValue();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
374	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(boolean));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(boolean));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(boolean));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(int));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
375	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  null "  +  Token.SCRIPT;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  null "  +  Token.SCRIPT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  null "  +  Token.SCRIPT;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
376	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",   "  +  Token.SCRIPT;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",   "  +  Token.SCRIPT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",   "  +  Token.SCRIPT;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
377	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".s.IFJDCS "  +  Integer.toHexString(Integer.toHexString(value));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".s.IFJDCS "  +  Integer.toHexString(Integer.toHexString(value));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".s.IFJDCS "  +  Integer.toHexString(Integer.toHexString(value));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
378	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(value),  context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(value),  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(value),  context);	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(value));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
379	[BUG]  [BUGGY]  String  key  =  c.getLastChild().getString()  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getLastChild().getString()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getLastChild().getString()  +  1;	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
380	[BUG]  [BUGGY]  String  key  =  c.getNext().getString();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getNext().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getNext().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
381	[BUG]  [BUGGY]  String  key  =  context.getQuotedString()  &&  NodeUtil.isEmpty(n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getQuotedString()  &&  NodeUtil.isEmpty(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getQuotedString()  &&  NodeUtil.isEmpty(n);	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
382	[BUG]  [BUGGY]  String  key  =  context.getQuotedString()  + ": "  +  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getQuotedString()  + ": "  +  c.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getQuotedString()  + ": "  +  c.getLastChild();	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
383	[BUG]  [BUGGY]  String  key  =  context.getQuotedString()  &&  NodeUtil.isLatin(key);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  context.getQuotedString()  &&  NodeUtil.isLatin(key);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  context.getQuotedString()  &&  NodeUtil.isLatin(key);	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
384	[BUG]  [BUGGY]  String  key  =  c.getString()  + "(' ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "(' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "(' ";	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
385	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".( ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".( ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".( ";	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
386	[BUG]  [BUGGY]  String  key  =  c.getString()  + "( ",  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "( ",  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "( ",  n);	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
387	[BUG]  [BUGGY]  Context  c  =  getContextForNoDeclaration(context,  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoDeclaration(context,  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoDeclaration(context,  c);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
388	[BUG]  [BUGGY]  Context  c  =  getContextForStatement(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForStatement(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForStatement(context);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
389	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.toString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.toString();	  String    key    =    c.getString()    +   ":   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
390	[BUG]  [BUGGY]  String  key  =  c.getString()  + ":' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ":' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ":' ";	  String    key    =    c.getString()    +   ".'   ";    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
391	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ",  body ";  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ",  body ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ",  body ";	  String    key    =    c.getString().trim()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
392	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ "n ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ "n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType()  -  1)+ "n ";	  String    key    =    c.getString().trim()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
393	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator();	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
394	[BUG]  [BUGGY]  Context  c  =  getContextForNoChild(n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoChild(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoChild(n);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
395	[BUG]  [BUGGY]  Context  c  =  getContextForNoChild(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoChild(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoChild(context);	  Context    c    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
396	[BUG]  [BUGGY]  Context  c  =  createContext(context,  rhsContext);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(context,  rhsContext);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(context,  rhsContext);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
397	[BUG]  [BUGGY]  Context  c  =  createContext(context,  context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(context,  context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(context,  context);	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
398	[BUG]  [BUGGY]  Node  key  =  c.getLocalPart();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getLocalPart();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getLocalPart();	  Node    key    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
399	[BUG]  [BUGGY]  Node  key  =  c.getLocalName();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getLocalName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getLocalName();	  Node    key    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
400	[BUG]  [BUGGY]  Node  c  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  n.getNext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  n.getNext();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
401	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context),  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context),  1);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(context),  1);	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(context));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
402	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ ",   ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getType()  -  1)+ ",   ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getType()  -  1)+ ",   ";	  String    key    =    c.getString().trim()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
403	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ".   ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ".   ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ".   ";	  String    key    =    c.getString().trim()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
404	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + ",   ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + ",   ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getValue()).trim()  + ",   ";	  String    key    =    c.getString().trim()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.SET  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.STRING)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
408	[BUG]  [BUGGY]  String  key  =  c.getString()  + "#n ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "#n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "#n ";	  String    key    =    c.getString()    +   "#   ";    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
409	[BUG]  [BUGGY]  String  key  =  c.getString()  + "  ':' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "  ':' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "  ':' ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
410	[BUG]  [BUGGY]  String  key  =  c.getString()  + "': "+key;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "': "+key;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "': "+key;	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
411	[BUG]  [BUGGY]  String  key  =  c.getString()  + "': "  +  Token.name;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "': "  +  Token.name;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "': "  +  Token.name;	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
412	[BUG]  [BUGGY]  String  key  =  n.getString()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + ": "  +  c.getString();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
413	[BUG]  [BUGGY]  String  key  =  n.getString()  + ": "  +  c.toString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + ": "  +  c.toString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + ": "  +  c.toString();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
414	[BUG]  [BUGGY]  String  key  =  n.getString()  + "_ "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "_ "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "_ "  +  c.getString();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
415	[BUG]  [BUGGY]  String  key  =  c.getText()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getText()  +  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getText()  +  1;	  String    key    =    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
416	[BUG]  [BUGGY]  Keyword  key  =  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Keyword  key  =  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Keyword  key  =  c.getQuotedString();	  String    key    =    c.getQuotedString()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
417	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.BLOCK;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.BLOCK;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.BLOCK;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
418	[BUG]  [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =(context  ==  null)?  context.getCurrentContext()  :  context.getRootContext();	  Context    c    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
419	[BUG]  [BUGGY]  String  key  =  n.getString()  + "_ "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "_ "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "_ "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   "_   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
420	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getDescription();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getDescription();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getDescription();	  String    key    =    c.getString()    +   ":   "    +    c.getText();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
421	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";no ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";no ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";no ";	  String    key    =    c.getString()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
422	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",' "+context.getMessage();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",' "+context.getMessage();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",' "+context.getMessage();	  String    key    =    c.getString()    +   ",'   ";    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
423	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(context,  n.getFirstChild());  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(context,  n.getFirstChild());	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
424	[BUG]  [BUGGY]  Context  c  =  getContextForNoInOperator(context,  node);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getContextForNoInOperator(context,  node);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getContextForNoInOperator(context,  node);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
425	[BUG]  [BUGGY]  Context  c  =  createContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContextForNoInOperator(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContextForNoInOperator(context);	  Context    c    =    getContextForNoInOperator(context);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
426	[BUG]  [BUGGY]  String  key  =  n.getString()  + "_ "  +  c.getName();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "_ "  +  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "_ "  +  c.getName();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
427	[BUG]  [BUGGY]  String  key  =  n.getString()  + "= "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "= "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "= "  +  c.getString();	  String    key    =    n.getString();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
428	[BUG]  [BUGGY]  String  key  =  n.getString()  + ": "+c.getName();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + ": "+c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + ": "+c.getName();	  String    key    =    n.getString()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
429	[BUG]  [BUGGY]  String  key  =  c.getString()  + "# ",  c.getModule();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "# ",  c.getModule();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "# ",  c.getModule();	  String    key    =    c.getString()    +   "#   ";    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  add(n);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  add(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  add(n);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(n);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
431	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.ASSIGN;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.ASSIGN;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.ASSIGN;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
432	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.SEMI;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.SEMI;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.SEMI;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
433	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.SHORT;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Token.SHORT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Token.SHORT;	  String    key    =    c.getString()    +   ":   "    +    Token.name;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
434	[BUG]  [BUGGY]  String  key  =  c.getString().replace('.',  '_');  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('.',  '_');  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('.',  '_');	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
435	[BUG]  [BUGGY]  String  key  =  c.getString().replace('.',  '/');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('.',  '/');  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('.',  '/');	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
436	[BUG]  [BUGGY]  String  key  =  c.getString().replace('.',  '_')+  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('.',  '_')+  1;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('.',  '_')+  1;	  String    key    =    c.getString().trim()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
437	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",' ",  n);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",' ",  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",' ",  n);	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
438	[BUG]  [BUGGY]  String  key  =  c.getString()  + "' ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "' ");  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "' ");	  String    key    =    c.getString()    +   "'   ",    n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
439	[BUG]  [BUGGY]  Node  c  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  c  =  n.removeFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  c  =  n.removeFirstChild();	  Node    c    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
440	[BUG]  [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "null ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "null ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "null ";	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
441	[BUG]  [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context  :  c.getQuotedString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context  :  c.getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =(c.getQuotedString()  ==  null)?  context  :  c.getQuotedString();	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
442	[BUG]  [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "  <  unknown> ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "  <  unknown> ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "  <  unknown> ";	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
443	[BUG]  [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : " ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : " ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : " ";	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
444	[BUG]  [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "[null] ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "[null] ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =(c.getQuotedString()  ==  null)?  context.getQuotedString()  : "[null] ";	  String    key    =    context.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
445	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getCharacterIndex();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  c.getCharacterIndex();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  c.getCharacterIndex();	  String    key    =    c.getString()    +   ":   "    +    c.getQuotedString();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
446	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".. "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".. "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".. "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
447	[BUG]  [BUGGY]  String  key  =  c.getQualifiedName()  + ".: "  +  c.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQualifiedName()  + ".: "  +  c.getQualifiedName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQualifiedName()  + ".: "  +  c.getQualifiedName();	  String    key    =    c.getString()    +   ":   "    +    c.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
448	[BUG]  [BUGGY]  String  key  =  c.getKey()  + "'(' ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + "'(' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + "'(' ";	  String    key    =    c.getKey()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
449	[BUG]  [BUGGY]  Node  key  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  n.getFirstChild().getNext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  n.getFirstChild().getNext();	  Node    key    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
450	[BUG]  [BUGGY]  Node  key  =  c.getAssignedValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.getAssignedValue();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.getAssignedValue();	  Node    key    =    c.getNext();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkArgument(c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
453	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContextForNoInOperator();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContextForNoInOperator();	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
454	[BUG]  [BUGGY]  Context  c  =  getCurrentContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  getCurrentContextForNoInOperator(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  getCurrentContextForNoInOperator(context);	  Context    c    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.BLOCK  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.SET)  {  add(c);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.SET)  {  add(c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.EXPR_RESULT  ||  c.getType()  ==  Token.SET)  {  add(c);	  Preconditions.checkState(c.getType()    ==    Token.GET    ||    c.getType()    ==    Token.SET)    {    add(c);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
457	[BUG]  [BUGGY]  String  key  =  c.getString()  + "(null);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "(null);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "(null);	  String    key    =    c.getString()    +   "(   ";    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
458	[BUG]  [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(16));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(16));  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ": "  +  Integer.toHexString(Integer.toHexString(16));	  String    key    =    c.getString()    +   ":   "    +    Integer.toHexString(Integer.toHexString(int));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
459	[BUG]  [BUGGY]  Context  c  =  createContext(context,  c.getSourceReference());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContext(context,  c.getSourceReference());  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContext(context,  c.getSourceReference());	  Context    c    =    createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
460	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getChars(0,  n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getChars(0,  n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getChars(0,  n);	  String    key    =    c.getString()    +   "_   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
461	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getCharacterIndex();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ "  +  c.getCharacterIndex();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ "  +  c.getCharacterIndex();	  String    key    =    c.getString()    +   "_   "    +    c.getLineno();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
462	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + "n ";  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue()).trim()  + "n ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getValue()).trim()  + "n ";	  String    key    =    c.getString().trim()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
463	[BUG]  [BUGGY]  Context  c  =  createContextForNoDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  createContextForNoDeclaration(context);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  createContextForNoDeclaration(context);	  Context    c    =    getContextForNoDeclaration(context);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
464	[BUG]  [BUGGY]  Node  key  =  c.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Node  key  =  c.removeFirstChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Node  key  =  c.removeFirstChild();	  Node    key    =    c.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
465	[BUG]  [BUGGY]  String  key  =  n.getString()  + "  value ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "  value ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "  value ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
466	[BUG]  [BUGGY]  String  key  =  c.getString()  + ",  name ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ",  name ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ",  name ";	  String    key    =    c.getString()    +   "    value   ";    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
467	[BUG]  [BUGGY]  String  key  =  c.getQuotedString().getString();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString().getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString().getString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
468	[BUG]  [BUGGY]  String  key  =  c.getLastChild().getQuotedString();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getLastChild().getQuotedString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getLastChild().getQuotedString();	  String    key    =    c.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
469	[BUG]  [BUGGY]  String  key  =  c.getQuotedString()  + "= ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedString()  + "= ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedString()  + "= ";	  String    key    =    c.getQuotedString()    +   "n   ";    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
470	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";no ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";no ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";no ";	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
471	[BUG]  [BUGGY]  String  key  =  c.getString().trim()  + ";n't  match. ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().trim()  + ";n't  match. ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().trim()  + ";n't  match. ";	  String    key    =    c.getString().trim()    +   ";n   ";    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
472	[BUG]  [BUGGY]  Keyword  key  =  c.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Keyword  key  =  c.getLastChild();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Keyword  key  =  c.getLastChild();	  String    key    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
473	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkState(c.getType()  ==  Token.STRING,  c.getString());	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
474	[BUG]  [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Preconditions.checkArgument(c.getType()  ==  Token.STRING);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Preconditions.checkArgument(c.getType()  ==  Token.STRING);	  Preconditions.checkState(c.getType()    ==    Token.STRING);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
475	[BUG]  [BUGGY]  String  key  =  n.getString()  + "',' ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  n.getString()  + "',' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  n.getString()  + "',' ";	  String    key    =    n.getString()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
476	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_' ";	  String    key    =    c.getString()    +   ".'   ";    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
477	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".*': ";  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".*': ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".*': ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
478	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'(':' ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'(':' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'(':' ";	  String    key    =    c.getString()    +   "':   ";    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
479	[BUG]  [BUGGY]  String  key  =  c.getString()  + ";: ";  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ";: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ";: ";	  String    key    =    c.getString()    +   ".:   ";    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
480	[BUG]  [BUGGY]  String  key  =  c.getAsString()  + "_ "  +  c.getName();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getAsString()  + "_ "  +  c.getName();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getAsString()  + "_ "  +  c.getName();	  String    key    =    c.getAsString();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
481	[BUG]  [BUGGY]  Context  c  =  context.createChildObjectContext(n);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.createChildObjectContext(n);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.createChildObjectContext(n);	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
482	[BUG]  [BUGGY]  Context  c  =  context.createChildObjectContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  Context  c  =  context.createChildObjectContext();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	Context  c  =  context.createChildObjectContext();	  Context    c    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
483	[BUG]  [BUGGY]  String  key  =  c.getString().replace('.',  '/')+ "' ";  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('.',  '/')+ "' ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('.',  '/')+ "' ";	  String    key    =    c.getString().trim()    +   "'   ";    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
484	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c);	  String    key    =    c.getString()    +   "_   ";    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
485	[BUG]  [BUGGY]  String  key  =  c.getString()  + "'(')';  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "'(')';  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "'(')';	  String    key    =    c.getString()    +   "'('   ";    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
486	[BUG]  [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getKey();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + "_ ",  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + "_ ",  c.getKey();	  String    key    =    c.getString()    +   "_   "    +    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
487	[BUG]  [BUGGY]  String  key  =  c.getQuotedKey()  + "_ "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedKey()  + "_ "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedKey()  + "_ "  +  c.getString();	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
488	[BUG]  [BUGGY]  String  key  =  c.getQuotedKey()  + ": "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedKey()  + ": "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedKey()  + ": "  +  c.getString();	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
489	[BUG]  [BUGGY]  String  key  =  c.getQuotedKey()  + "= "  +  c.getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getQuotedKey()  + "= "  +  c.getString();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getQuotedKey()  + "= "  +  c.getString();	  String    key    =    c.getQuotedKey();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
490	[BUG]  [BUGGY]  String  key  =  c.getString().toLowerCase()  + ".: ";  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().toLowerCase()  + ".: ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().toLowerCase()  + ".: ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
491	[BUG]  [BUGGY]  String  key  =  c.getString().replace('.',  '/')+ ": ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().replace('.',  '/')+ ": ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().replace('.',  '/')+ ": ";	  String    key    =    c.getString().trim()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
492	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".s.SCRIPT ";  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".s.SCRIPT ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".s.SCRIPT ";	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
493	[BUG]  [BUGGY]  String  key  =  c.getString()  + ".Size: "  +  Token.SCRIPT;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString()  + ".Size: "  +  Token.SCRIPT;  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString()  + ".Size: "  +  Token.SCRIPT;	  String    key    =    c.getString()    +   ":   "    +    Token.SCRIPT;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
494	[BUG]  [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue().length()  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getString().substring(0,  c.getValue().length()  -  1);  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getString().substring(0,  c.getValue().length()  -  1);	  String    key    =    c.getString().trim()    +   ",   ";    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
495	[BUG]  [BUGGY]  CharKey  key  =  c.getKey();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  CharKey  key  =  c.getKey();  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	CharKey  key  =  c.getKey();	  char    key    =    c.getKey();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
496	[BUG]  [BUGGY]  String  key  =  c.getKey()  + ".* ";  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (c.getType()  ==  Token.GET  ||  c.getType()  ==  Token.SET)  {  add(c);  }  else  {  Preconditions.checkState(c.getType()  ==  Token.STRING);      [BUGGY]  String  key  =  c.getKey()  + ".* ";  [BUGGY]        if  (!c.isQuotedString()  &&  !TokenStream.isKeyword(key)  &&  TokenStream.isJSIdentifier(key)  &&    NodeUtil.isLatin(key))  {  add(key);  }  else  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.35355339059327373	662	662	1	replace	String  key  =  c.getKey()  + ".* ";	  String    key    =    c.getKey()    +   ":   ";    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
