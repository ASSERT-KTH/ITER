bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)+(long)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)+(double)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)+(long)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)*(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(long)Math.rint(s)*(long)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)*(long)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  +  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  1);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  +  2);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  2);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  return  l  <  0?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  <  0?  Double.NaN  :  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  0?  Double.NaN  :  l;	  return    l    >    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  return  l  >  0?  Double.NaN  :  l  +  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  >  0?  Double.NaN  :  l  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >  0?  Double.NaN  :  l  +  1;	  return    l    >    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  return  l  ==  0?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  ==  0?  Double.NaN  :  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Double.NaN  :  l;	  return    l    >    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)).doubleValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).doubleValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
17	[BUG]  [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
18	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)).longValue()  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).longValue()  +  1;	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  return  long.parseLong(s)+(Long.parseLong(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  long.parseLong(s)+(Long.parseLong(l)).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long.parseLong(s)+(Long.parseLong(l)).longValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
20	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)).longValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
21	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).intValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)).intValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).intValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
22	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  return  l  +  2;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +  2;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  2;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  return  l  *  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  1;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  return  l  +  4;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +  4;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  4;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  return  l  +  3;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +  3;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  3;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  return  l  +  1L;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +  1L;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1L;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  return  l  /  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  /  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  1;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(long)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
36	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)+(long)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(int)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)+(int)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Long.parseLong(s)+(int)Long.parseInt(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)+(int)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)+  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1);	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)+  2);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  2);	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s));	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  return  Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s));	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)+  4);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  4);	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s)+  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)+  1;	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).longValue();	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s)+  2;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)+  2;	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s  +  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s  +  1);	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  /  Long.parseLong(s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s);	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
50	[BUG]  [BUGGY]  return  Long.parseLong(l);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(l);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l);	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  /  Long.MAX_VALUE;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MAX_VALUE  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  +  1;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
55	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MIN_VALUE;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  +  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MAX_VALUE  +  2;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  +  2;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  +  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  +  1);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
63	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
65	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
68	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
69	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
70	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  return  l  <  0?  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  <  0?  Long.parseLong(l):  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  0?  Long.parseLong(l):  l;	  return    l    >    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
74	[BUG]  [BUGGY]  return  l  ==  0?  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  ==  0?  Long.parseLong(l):  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Long.parseLong(l):  l;	  return    l    >    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
75	[BUG]  [BUGGY]  return  l  >=  0?  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  >=  0?  Long.parseLong(l):  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >=  0?  Long.parseLong(l):  l;	  return    l    >    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
76	[BUG]  [BUGGY]  return  l  >  0?  Long.parseLong(s):  l;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  >  0?  Long.parseLong(s):  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >  0?  Long.parseLong(s):  l;	  return    l    >    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
77	[BUG]  [BUGGY]  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  l  =  Long.parseLong(s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  long  l  =  Long.parseLong(s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(l);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(l);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(l);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.reportCodeChange();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
85	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  +  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  +  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  +  1);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  s);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
92	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
93	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
94	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)+(long)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
96	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(int)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
98	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)+(int)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Long.parseLong(s)+(int)Long.parseInt(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)+(int)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
99	[BUG]  [BUGGY]  return  l!=  0?  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l!=  0?  Long.parseLong(l):  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Long.parseLong(l):  l;	  return    l    >    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
100	[BUG]  [BUGGY]  return  l  >  0?  Long.parseLong(l):  l  +  1;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  >  0?  Long.parseLong(l):  l  +  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >  0?  Long.parseLong(l):  l  +  1;	  return    l    >    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
101	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s).doubleValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).doubleValue();	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)-  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s)-  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)-  1;	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(double)Math.pow(10,  l);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  -  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  1);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  return  l  >=  0?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  >=  0?  Double.NaN  :  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >=  0?  Double.NaN  :  l;	  return    l    >    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  return  l!=  0?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l!=  0?  Double.NaN  :  l;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Double.NaN  :  l;	  return    l    >    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
108	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)-  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)-  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(l)-  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
109	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)+  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(l)+  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
110	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
111	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
112	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
113	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
114	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
115	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  4);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  4);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  4);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
118	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(l);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(l);  }  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(l);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
121	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
122	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  1);	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
123	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l).doubleValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l).doubleValue();	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
124	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  -  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
125	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  4);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  +  4);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  4);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
126	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  +  3);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  3);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l)+  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)+  1;	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
128	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MAX_VALUE  -  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  -  1;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
129	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE;	  return    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
130	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)-  1);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)-  1);	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
131	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s),  0);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s),  0);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s),  0);	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
132	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  long  *(Long.parseLong(s)).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)).longValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
133	[BUG]  [BUGGY]  return  l  *(Long.parseDouble(s)).longValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseDouble(s)).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseDouble(s)).longValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
134	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).longValue();  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
135	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
136	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
137	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
138	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)/(long)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)-(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.rint(s)-(int)Math.rint(l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)-(int)Math.rint(l));	  return    l    +(int)Math.rint(s)+(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(long)Math.pow(10,  l);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  4);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  -  4);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  4);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
142	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(int)Math.pow(10,  l  -  2);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  2);	  return    l    +(int)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
143	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Long.parseLong(s)/  2;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  2;	  return    l    *    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
144	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
145	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
146	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
147	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE);	  return    l    *    Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
148	[BUG]  [BUGGY]  return  l  *  2;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *  2;  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2;	  return    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
149	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
150	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  l));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
151	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)/  2);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2);	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
152	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  return  l  *(Long.parseLong(s)+  1));  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1));	  return    l    *(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
153	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
154	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {    [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s);  [BUGGY]    }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(s);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
