bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)-(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)-(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)-(long)Math.rint(l));	  return    l    +(int)Math.rint(s)-(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
2	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)-(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)-(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)-(long)Math.rint(l));	  return    l    +(int)Math.rint(s)-(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
3	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)-(int)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)-(int)Math.rint(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)-(int)Math.rint(l)+  1);	  return    l    +(int)Math.rint(s)-(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
4	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)-(int)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)-(int)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)-(int)Math.rint(s));	  return    l    +(int)Math.rint(s)-(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
5	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)-(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.rint(s)-(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)-(double)Math.rint(l));	  return    l    +(int)Math.rint(s)-(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
6	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
7	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER,  s);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
8	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER,  s  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER,  s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER,  s  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
9	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER,  s)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
10	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_INTEGER_NUMBER,  s);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
11	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_SIZE,  s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_SIZE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_SIZE,  s);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
12	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  2);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  +  2);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
13	[BUG]  [BUGGY]  return  Long.MAX_VALUE_NUMBER  *(Long.MAX_VALUE_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_NUMBER  *(Long.MAX_VALUE_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_NUMBER  *(Long.MAX_VALUE_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
14	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
15	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
16	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  +  3);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
17	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  +  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  +  4);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
18	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE,  s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE,  s);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE  +  1);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
20	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE)+  1;	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
21	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE,  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE,  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MIN_VALUE,  0);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  return  l  ==  0?  Long.parseLong(l):  l  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Long.parseLong(l):  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Long.parseLong(l):  l  +  1;	  return    l    >    0?    Long.parseLong(l):    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
24	[BUG]  [BUGGY]  return  l  <  0?  Long.parseLong(l):  l  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <  0?  Long.parseLong(l):  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  0?  Long.parseLong(l):  l  +  1;	  return    l    >    0?    Long.parseLong(l):    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
25	[BUG]  [BUGGY]  return  l  >=  0?  Long.parseLong(l):  l  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  >=  0?  Long.parseLong(l):  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >=  0?  Long.parseLong(l):  l  +  1;	  return    l    >    0?    Long.parseLong(l):    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
26	[BUG]  [BUGGY]  return  l!=  0?  Long.parseLong(l):  l  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l!=  0?  Long.parseLong(l):  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Long.parseLong(l):  l  +  1;	  return    l    >    0?    Long.parseLong(l):    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
27	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  return  cc.getSimpleNumber(l);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  return  cc.getSimpleNumber(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  return  cc.getSimpleNumber(l);	  Context    cc    =    Context.getCurrentContext();    return    cc.getSimpleNumber(l);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
28	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  return  cc.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  return  cc.getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  return  cc.getSimpleNumber(s);	  Context    cc    =    Context.getCurrentContext();    return    cc.getSimpleNumber(l);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
29	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(l,  s);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(l,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(l,  s);	  Context    cc    =    Context.getCurrentContext();    return    cc.getSimpleNumber(l);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
30	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(l);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(l);	  Context    cc    =    Context.getCurrentContext();    return    cc.getSimpleNumber(l);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
31	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  3);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  3);	  return    l    *    Math.pow(10,    l    +    3);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
32	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  5);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  +  5);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  5);	  return    l    *    Math.pow(10,    l    +    3);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
33	[BUG]  [BUGGY]  return  Math.pow(10,  l  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  +  1);	  return    l    *    Math.pow(10,    l    +    3);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
34	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
35	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
36	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
37	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
38	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
39	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
40	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(l)-  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)+(long)Math.rint(l)-  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
41	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
42	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)-  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(l)-  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
43	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  2);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
44	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l)-  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)+(long)Math.rint(l)-  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
45	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(l)-  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)+(double)Math.rint(l)-  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
46	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)-  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
50	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
52	[BUG]  [BUGGY]  return  l  >>  0?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  >>  0?  Double.NaN  :  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >>  0?  Double.NaN  :  l;	  return    l    >=    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
53	[BUG]  [BUGGY]  return  l  <  0?  Long.parseLong(s):  l;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <  0?  Long.parseLong(s):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  0?  Long.parseLong(s):  l;	  return    l    <    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
54	[BUG]  [BUGGY]  return  l  <=  0?  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <=  0?  Long.parseLong(l):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <=  0?  Long.parseLong(l):  l;	  return    l    <    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
55	[BUG]  [BUGGY]  return  l  <  0  |  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <  0  |  Long.parseLong(l):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  0  |  Long.parseLong(l):  l;	  return    l    <    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
56	[BUG]  [BUGGY]  return  l  ==  0?  Long.parseLong(l):  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Long.parseLong(l):  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Long.parseLong(l):  Long.parseLong(s);	  return    l    ==    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
57	[BUG]  [BUGGY]  return  l  ==  0?  Long.parseLong(l):  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Long.parseLong(l):  Integer.parseInt(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Long.parseLong(l):  Integer.parseInt(s);	  return    l    ==    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
58	[BUG]  [BUGGY]  return  l  ==  0?  Long.parseLong(s):  l;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Long.parseLong(s):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Long.parseLong(s):  l;	  return    l    ==    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
59	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)+(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)+(int)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)+(int)Math.rint(l));	  return    l    +(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  return  l  *(double.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(double.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(double.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
61	[BUG]  [BUGGY]  return  l  *(Double.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Double.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Double.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
62	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    l    *(long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
63	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)+(long)Math.rint(l)+  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
64	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(l)+  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
65	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)*  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)*  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(l)*  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
66	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)/  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(l)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(l)/  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
67	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)+(long)Math.rint(l)+  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
68	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)+(double)Math.rint(l)+  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
69	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
70	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE,  s);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
71	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  l  *  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
72	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
73	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MIN_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
74	[BUG]  [BUGGY]  return  Long.parseLong(l)*(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
75	[BUG]  [BUGGY]  return  long  *(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
76	[BUG]  [BUGGY]  return  l  *(int)Long.parseLong(s)+(int)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Long.parseLong(s)+(int)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Long.parseLong(s)+(int)Long.parseLong(l));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
77	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)+(int)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Long.parseLong(s)+(int)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)+(int)Long.parseLong(l));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
78	[BUG]  [BUGGY]  return(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
79	[BUG]  [BUGGY]  return  l  *(double)Long.parseLong(s)+(double)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(double)Long.parseLong(s)+(double)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(double)Long.parseLong(s)+(double)Long.parseLong(l));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
80	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)+  4;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)+  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)+  4;	  return    l    *    Long.parseLong(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
81	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)+  3;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)+  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)+  3;	  return    l    *    Long.parseLong(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
82	[BUG]  [BUGGY]  return  Long.parseLong(l)+  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+  2;	  return    l    *    Long.parseLong(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
83	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)+  2  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)+  2  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)+  2  +  1;	  return    l    *    Long.parseLong(s)+    2;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
84	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)+  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
85	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
86	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
87	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
88	[BUG]  [BUGGY]  return  Long.MAX_VALUE_NUMBER  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_NUMBER  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_NUMBER  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
89	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  2  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  2  +  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
90	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  1;	  return    l    *    Long.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
91	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  +  4;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  +  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  +  4;	  return    l    *    Long.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
92	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  +  3;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  +  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  +  3;	  return    l    *    Long.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
93	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  +  1;	  return    l    *    Long.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
94	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  4);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  4);	  return    l    +(int)Math.pow(10,    l    -    4);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
95	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  4);	  return    l    +(int)Math.pow(10,    l    -    4);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
96	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  4);	  return    l    +(int)Math.pow(10,    l    -    4);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
97	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(int)Long.parseLong(l));	  return    l    +(long)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
98	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(int)Long.parseInt(l));	  return    l    +(long)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
99	[BUG]  [BUGGY]  return  Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(long)Long.parseLong(l));	  return    l    +(long)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
100	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)+(int)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Long.parseLong(s)+(int)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)+(int)Long.parseLong(l));	  return    l    +(long)Long.parseLong(s)+(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
101	[BUG]  [BUGGY]  return  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
102	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)/  Long.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)/  Long.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)/  Long.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
103	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER  +  1);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
104	[BUG]  [BUGGY]  return  Long.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
105	[BUG]  [BUGGY]  return  l  *  Long.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)+  1;	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
107	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
108	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)-  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)-  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
109	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
110	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER.parseLong(l)-  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER.parseLong(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER.parseLong(l)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
111	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
112	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(long)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
113	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)+(long)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
114	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)/(int)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
115	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(long)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
116	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
117	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)+  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)+  2;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
118	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)/  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l)/  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)/  1;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
119	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)+  3;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l)+  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)+  3;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
120	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)+  4;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l)+  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)+  4;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
121	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  1)+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  +  1)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  1)+  1;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
122	[BUG]  [BUGGY]  return  Math.pow(10,  l)+  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l)+  1;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
123	[BUG]  [BUGGY]  return  l  +  1,  l  =  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  =  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  =  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
124	[BUG]  [BUGGY]  return  l  +  1L  *  Long.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1L  *  Long.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1L  *  Long.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
125	[BUG]  [BUGGY]  return  l  +  1,  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  =  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  =  Long.parseLong(s);	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
126	[BUG]  [BUGGY]  return  l  +  1,  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  =  Long.parseLong(s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  =  Long.parseLong(s).longValue();	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
127	[BUG]  [BUGGY]  return  l  +  1,  l  =  Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  =  Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  =  Long.parseLong(s));	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
128	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  Long.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
129	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE,  s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE,  s);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
130	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE),  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE),  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE),  s);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
131	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
132	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  s  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
133	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Math.pow(10,  l  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Math.pow(10,  l  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Math.pow(10,  l  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
134	[BUG]  [BUGGY]  return  Math.pow(10,  l  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
135	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
136	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  l)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  l)+  1);	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
137	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s  +  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s  +  2);	  return    l    *    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
138	[BUG]  [BUGGY]  return  Long.parseLong(l  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l  +  1);	  return    l    *    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
139	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s  +  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s  +  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s  +  3);	  return    l    *    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
140	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s  +  4);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s  +  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s  +  4);	  return    l    *    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
141	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
142	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(l));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
143	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
144	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
145	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
146	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
147	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  s  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  s  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  s  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
148	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  s);	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
149	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  s  +  1);	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
150	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  s).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  s).longValue();	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
151	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
152	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
153	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
154	[BUG]  [BUGGY]  return  l  >>  0?  Long.parseLong(l):  l;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  >>  0?  Long.parseLong(l):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >>  0?  Long.parseLong(l):  l;	  return    l    >=    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
155	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(l);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(l);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(l);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(l);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
156	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(l);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(l);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(l);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(l);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
157	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(l);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(l);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(l);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(l);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
158	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(l);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
159	[BUG]  [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  l  *(Long.parseLong(s)).doubleValue();	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
160	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s)).doubleValue();	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
161	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)).doubleValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).doubleValue()  +  1;	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
162	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.parseLong(l)).doubleValue();	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
163	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).doubleValue()  +  Long.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)).doubleValue()  +  Long.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).doubleValue()  +  Long.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
164	[BUG]  [BUGGY]  return  Long.parseLong(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s).doubleValue();	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
165	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l)).intValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l)).intValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.parseLong(l)).intValue();	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
166	[BUG]  [BUGGY]  return  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s).longValue();	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
167	[BUG]  [BUGGY]  return  long.parseLong(s)+(Long.parseLong(l)).intValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long.parseLong(s)+(Long.parseLong(l)).intValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long.parseLong(s)+(Long.parseLong(l)).intValue();	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
168	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)).intValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).intValue()  +  1;	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
169	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  2);	  return    l    +(int)Math.pow(10,    l    -    2);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
170	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  2);	  return    l    +(int)Math.pow(10,    l    -    2);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
171	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  2);	  return    l    +(int)Math.pow(10,    l    -    2);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
172	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  -  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
173	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND  -  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
174	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MAX_POSITIVE_INTEGER_NUMBER  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MAX_POSITIVE_INTEGER_NUMBER  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MAX_POSITIVE_INTEGER_NUMBER  -  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
175	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
176	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  Math.pow(10,  l  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  Math.pow(10,  l  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  Math.pow(10,  l  -  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
177	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
178	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
179	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
180	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER,  l);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER,  l);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
181	[BUG]  [BUGGY]  return  Long.parseLong(s)-(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)-(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)-(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
182	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
183	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER,  l);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER,  l);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
184	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
185	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
186	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
187	[BUG]  [BUGGY]  return  Long.parseLong(l)/(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/(long)Long.parseLong(s));	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
188	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Long.parseLong(s)+  1);	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
189	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Short.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Short.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Short.parseLong(s));	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
190	[BUG]  [BUGGY]  return  Long.parseLong(l)+(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(int)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(int)Long.parseLong(s));	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
191	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  1;	  return    l    *    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
192	[BUG]  [BUGGY]  return  Long.parseLong(l)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+  1;	  return    l    *    Long.parseLong(s)+    1;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
193	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  4);	  return    l    *    Math.pow(10,    l    +    4);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
194	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  1,  s.length);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  +  1,  s.length);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  1,  s.length);	  return    l    *    Math.pow(10,    l    +    4);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
195	[BUG]  [BUGGY]  return  l  *  4;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  4;	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
196	[BUG]  [BUGGY]  return  l  *  3;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  3;	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
197	[BUG]  [BUGGY]  return  l  *  10;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  10;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  10;	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
198	[BUG]  [BUGGY]  return  l  *  100;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  100;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  100;	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
199	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
200	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
201	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.MAX_VALUE_INT_NUMBER.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.MAX_VALUE_INT_NUMBER.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.MAX_VALUE_INT_NUMBER.parseLong(l));	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
202	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
203	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
204	[BUG]  [BUGGY]  return  Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  2;	  return    l    *(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
205	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  3);	  return    l    *(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
206	[BUG]  [BUGGY]  return  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  1;	  return    l    *(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
207	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
208	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
209	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
210	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
211	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER.parseLong(s));	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
212	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  2;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
213	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
214	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
215	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
216	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  4;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  4;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
217	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  3;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+  3;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
218	[BUG]  [BUGGY]  return  long  /(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  /(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  /(Long.parseLong(s)).longValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
219	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(s)).longValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
220	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)).doubleValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
221	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
222	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER,  s);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
223	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
224	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  ||  Long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  ||  Long.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  ||  Long.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
225	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
226	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  1);	  return    l    *(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
227	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
228	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
229	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
230	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Long.parseLong(s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s)+  1;	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
231	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Long.parseLong(s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s).longValue();	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
232	[BUG]  [BUGGY]  long  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Integer.parseInt(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Integer.parseInt(s);	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
233	[BUG]  [BUGGY]  int  l  =  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  int  l  =  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	int  l  =  Long.parseLong(s);	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
234	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)-  1;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Long.parseLong(s)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s)-  1;	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
235	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Long.parseLong(s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s  +  1);	  long    l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
236	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).floatValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s).floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).floatValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
237	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).intValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s).intValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).intValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
238	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).longValue()  +  1;	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
239	[BUG]  [BUGGY]  return  l  +  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  Long.parseLong(s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  Long.parseLong(s).longValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
240	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  1;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
241	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  /  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  /  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  /  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
242	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  2;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
243	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  4;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  4;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
244	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  3;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Double.MIN_VALUE  +  3;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
245	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  +  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  +  Double.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  +  Double.MIN_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
246	[BUG]  [BUGGY]  return  Long.parseLong(l)-  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)-  1;	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
247	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)-  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)-  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)-  2);	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
248	[BUG]  [BUGGY]  return  Long.parseLong(s)-  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)-  1;	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
249	[BUG]  [BUGGY]  return  long  l  *(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  l  *(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  l  *(Long.parseLong(s)-  1);	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
250	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s  +  1);	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
251	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s  -  1);	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
252	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s)+  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s)+  1;	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
253	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s  +  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s  +  2);	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
254	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s  +  3);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s  +  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s  +  3);	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
255	[BUG]  [BUGGY]  return  l  >=  0?  Long.parseLong(s):  l;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  >=  0?  Long.parseLong(s):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >=  0?  Long.parseLong(s):  l;	  return    l    >    0?    Long.parseLong(s):    l;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
256	[BUG]  [BUGGY]  return  l!=  0?  Long.parseLong(s):  l;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l!=  0?  Long.parseLong(s):  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Long.parseLong(s):  l;	  return    l    >    0?    Long.parseLong(s):    l;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
257	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  1);	  return    l    +(int)Math.pow(10,    l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
258	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  +  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  +  2);	  return    l    +(int)Math.pow(10,    l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
259	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  2  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  2  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  2  -  1);	  return    l    +(int)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
260	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  10  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  10  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  10  -  1);	  return    l    +(int)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
261	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  -  1);	  return    l    +(int)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
262	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)/(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Long.parseLong(s)/(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)/(long)Long.parseLong(l));	  return    long    +(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
263	[BUG]  [BUGGY]  return  long  -(long)Long.parseLong(s)+(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  -(long)Long.parseLong(s)+(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  -(long)Long.parseLong(s)+(long)Long.parseLong(l));	  return    long    +(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
264	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
265	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER  +  1);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
266	[BUG]  [BUGGY]  return  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
267	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)+  1;	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
268	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  0);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
269	[BUG]  [BUGGY]  return  l  *  NodeUtil.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  NodeUtil.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  NodeUtil.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
270	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  ||  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  ||  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  ||  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    *    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
271	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  /  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  /  Long.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  /  Long.MIN_VALUE;	  return    l    *    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
272	[BUG]  [BUGGY]  return  l  /  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MIN_VALUE;	  return    l    *    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
273	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  /  Long.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  /  Long.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  /  Long.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    *    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
274	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  +(l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  +(l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  +(l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
275	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
276	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE,  s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE,  s);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
277	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE,  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE,  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE,  0);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
278	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
279	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  2);	  return    l    *    Math.pow(10,    l    +    2);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
280	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  1,  l);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  +  1,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  1,  l);	  return    l    *    Math.pow(10,    l    +    2);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
281	[BUG]  [BUGGY]  return  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s);	  return    Long.parseLong(l);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
282	[BUG]  [BUGGY]  return  Integer.parseInt(l);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Integer.parseInt(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Integer.parseInt(l);	  return    Long.parseLong(l);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
283	[BUG]  [BUGGY]  return  Long.parseLong(l,  s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l,  s);	  return    Long.parseLong(l);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
284	[BUG]  [BUGGY]  return  Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(long)Long.parseLong(s));	  return    long    +(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
285	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)+(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Long.parseLong(s)+(int)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)+(int)Long.parseLong(s));	  return    long    +(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
286	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INTEGER_NUMBER,  s);	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
287	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
288	[BUG]  [BUGGY]  return  l  /(Number.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Number.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Number.MAX_VALUE_INTEGER_NUMBER);	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
289	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
290	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
291	[BUG]  [BUGGY]  return  l  /(long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(long.MAX_VALUE_INTEGER_NUMBER);	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
292	[BUG]  [BUGGY]  return  l  /  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  2;	  return    l    /    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
293	[BUG]  [BUGGY]  return  l  /  4;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  4;	  return    l    /    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
294	[BUG]  [BUGGY]  return  l  /  2.0;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  2.0;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  2.0;	  return    l    /    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
295	[BUG]  [BUGGY]  return  l  /  3;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  3;	  return    l    /    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
296	[BUG]  [BUGGY]  return  l  /  1L;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  1L;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  1L;	  return    l    /    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
297	[BUG]  [BUGGY]  return  l  /  10;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  10;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  10;	  return    l    /    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
298	[BUG]  [BUGGY]  l  =  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  l  =  Long.parseLong(s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Long.parseLong(s)+  1;	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
299	[BUG]  [BUGGY]  l  =  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  l  =  Long.parseLong(s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Long.parseLong(s).longValue();	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
300	[BUG]  [BUGGY]  l  =  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  l  =  Integer.parseInt(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Integer.parseInt(s);	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
301	[BUG]  [BUGGY]  l  =  Long.parseLong(s)-  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  l  =  Long.parseLong(s)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Long.parseLong(s)-  1;	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
302	[BUG]  [BUGGY]  l  =  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  l  =  Long.parseLong(s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Long.parseLong(s  +  1);	  l    =    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
303	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(l);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(l);	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
304	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s,  l);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(s,  l);	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
305	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(s).doubleValue();	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
306	[BUG]  [BUGGY]  return  l  *(int)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.pow(10,  l);	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
307	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  +  1);	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
308	[BUG]  [BUGGY]  return  l  *(double)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(double)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(double)Math.pow(10,  l);	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
309	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l).doubleValue();	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
310	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  s);	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
311	[BUG]  [BUGGY]  return  Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l);	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
312	[BUG]  [BUGGY]  return  l  <  0?  Double.NaN  :  l  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <  0?  Double.NaN  :  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  0?  Double.NaN  :  l  +  1;	  return    l    >    0?    Double.NaN    :    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
313	[BUG]  [BUGGY]  return  l  ==  0?  Double.NaN  :  l  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Double.NaN  :  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Double.NaN  :  l  +  1;	  return    l    >    0?    Double.NaN    :    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
314	[BUG]  [BUGGY]  return  l  >=  0?  Double.NaN  :  l  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  >=  0?  Double.NaN  :  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >=  0?  Double.NaN  :  l  +  1;	  return    l    >    0?    Double.NaN    :    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
315	[BUG]  [BUGGY]  return  l  +  5;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  5;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  5;	  return    l    +    2;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
316	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
317	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
318	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
319	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
320	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
321	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
322	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)-  2;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)-  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)-  2;	  return    l    *    Long.parseLong(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
323	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)-  3;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)-  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)-  3;	  return    l    *    Long.parseLong(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
324	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)-  4;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)-  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)-  4;	  return    l    *    Long.parseLong(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
325	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  2);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
326	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
327	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  3);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  3);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
328	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_INTEGER_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
329	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  1,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  +  1,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  1,  s);	  return    l    *    Math.pow(10,    l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
330	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  2  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  2  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  2  +  1);	  return    l    *    Math.pow(10,    l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
331	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  2  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  2  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  2  +  1;	  return    l    *    Long.parseLong(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
332	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  4;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  4;	  return    l    *    Long.parseLong(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
333	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  3;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  3;	  return    l    *    Long.parseLong(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
334	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  2  +  4;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  2  +  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  2  +  4;	  return    l    *    Long.parseLong(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
335	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  2  +  3;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  2  +  3;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  2  +  3;	  return    l    *    Long.parseLong(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
336	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  10;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  10;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  10;	  return    l    *    Long.parseLong(s)/    2;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
337	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  1;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
338	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  2;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
339	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  4;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Long.MAX_VALUE  +  4;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
340	[BUG]  [BUGGY]  return  Long.MAX_VALUE  *  Long.MAX_VALUE  /  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE  *  Long.MAX_VALUE  /  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE  *  Long.MAX_VALUE  /  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
341	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  +  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  +  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  +  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
342	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  -  1);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
343	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  +  1);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
344	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY)+  1;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
345	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  /  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  /  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  /  2);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
346	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_DAY);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_DAY);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
347	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  /  10);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  /  10);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_DAY  /  10);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
348	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)).doubleValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
349	[BUG]  [BUGGY]  return  Long.parseLong(l)/(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/(Long.parseLong(s)).longValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
350	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  0).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  0).longValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
351	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).floatValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)).floatValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
352	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).intValue();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)).intValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)).intValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
353	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  +  1);	  return    l    +(double)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
354	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.parseLong(s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s)+  1;	  return    l    /    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
355	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.parseLong(s).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s).longValue();	  return    l    /    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
356	[BUG]  [BUGGY]  return  l  +  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  Long.parseLong(s);	  return    l    /    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
357	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.parseLong(s)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s)+  2;	  return    l    /    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
358	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(l);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext(l);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
359	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
360	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
361	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextInstance();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContextInstance();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContextInstance();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
362	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.currentContext();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.currentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
363	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeGenerator(l);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeGenerator(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContextForCodeGenerator(l);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
364	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)+(long)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(long)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
365	[BUG]  [BUGGY]  return  l  +(int)Long.parseInt(s)+(int)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Long.parseInt(s)+(int)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseInt(s)+(int)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
366	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Long.parseLong(s)+(long)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)+(long)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
367	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)/(int)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
368	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)+(int)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)+(int)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
369	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)/(long)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Long.parseLong(s)/(long)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)/(long)Long.parseLong(l));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
370	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(double)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(double)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(double)Long.parseLong(l));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
371	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX  +  1);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
372	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_PREFIX);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_PREFIX);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_PREFIX);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
373	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX  +  2);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
374	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX  +  4);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
375	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_PREFIX);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_PREFIX);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_PREFIX);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
376	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_PREFIX);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_PREFIX);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_PREFIX);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
377	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
378	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER,  s);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
379	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
380	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  |  Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  |  Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  |  Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
381	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  ||  Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  ||  Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  ||  Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
382	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
383	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND  +  1);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
384	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_EXPR);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_EXPR);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_EXPR);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
385	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND)+  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND)+  1;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
386	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND,  s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND,  s);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
387	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_SECOND);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_SECOND);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_SECOND);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
388	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Number.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
389	[BUG]  [BUGGY]  return  l  *(Number.MIN_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MIN_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MIN_VALUE_INTEGER_NUMBER);	  return    l    *(Number.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
390	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_LONG);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_LONG);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_LONG);	  return    l    *(Number.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
391	[BUG]  [BUGGY]  return  Long.parseLong(l)/(Long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/(Long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/(Long)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)/(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
392	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  5);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  5);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  5);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    4);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
393	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  10);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  10);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  10);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    4);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
394	[BUG]  [BUGGY]  return  l  *  2  +  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +  Long.parseLong(s);	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
395	[BUG]  [BUGGY]  return  l  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +  1;	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
396	[BUG]  [BUGGY]  return  l  *  2  +  getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +  getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +  getSimpleNumber(s);	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
397	[BUG]  [BUGGY]  return  l  *  2  +(long)Math.rint(s)+(long)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +(long)Math.rint(s)+(long)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +(long)Math.rint(s)+(long)Math.rint(s));	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
398	[BUG]  [BUGGY]  return  l  *  2  +  Long.parseLong(s)+  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +  Long.parseLong(s)+  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +  Long.parseLong(s)+  Long.parseLong(s);	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
399	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  Long.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
400	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE,  s);	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
401	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  Long.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
402	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE)+  1;	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
403	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(l);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(l);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
404	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(s);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
405	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
406	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
407	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(n);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(n);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(n);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
408	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(null);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(null);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(null);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
409	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MAX_VALUE  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE  +  1;	  return    l    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
410	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE;	  return    l    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
411	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE  +  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MAX_VALUE  +  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE  +  2;	  return    l    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
412	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE  +  4;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MAX_VALUE  +  4;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE  +  4;	  return    l    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
413	[BUG]  [BUGGY]  return  long  *(long)Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(long)Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(long)Long.parseLong(s)+(long)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
414	[BUG]  [BUGGY]  return  l  *(int)Long.parseLong(s)+(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Long.parseLong(s)+(int)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Long.parseLong(s)+(int)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
415	[BUG]  [BUGGY]  return  Long.parseLong(l)*(long)Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(long)Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(long)Long.parseLong(s)+(long)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
416	[BUG]  [BUGGY]  return  Long.parseLong(l)*(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(long)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
417	[BUG]  [BUGGY]  return(long)Long.parseLong(s)+(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(long)Long.parseLong(s)+(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(long)Long.parseLong(s)+(long)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
418	[BUG]  [BUGGY]  return  Long.parseLong(s)*(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(long)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
419	[BUG]  [BUGGY]  return  l  *(Long.parseDouble(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseDouble(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseDouble(s)).doubleValue();	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
420	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.parseDouble(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.parseDouble(l)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.parseDouble(l)).longValue();	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
421	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseDouble(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseDouble(l)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseDouble(l)).longValue();	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
422	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
423	[BUG]  [BUGGY]  Context  cc  =  getContext(l);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext(l);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
424	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext().getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
425	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext().getCurrentToken();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext().getCurrentToken();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
426	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentStructure();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext().getCurrentStructure();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext().getCurrentStructure();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
427	[BUG]  [BUGGY]  Context  cc  =  getContextInput();  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContextInput();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContextInput();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
428	[BUG]  [BUGGY]  return  l  *(int)Math.rint(s)+(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.rint(s)+(int)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.rint(s)+(int)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
429	[BUG]  [BUGGY]  return  Math.rint(l)*(long)Math.rint(s)+(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.rint(l)*(long)Math.rint(s)+(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.rint(l)*(long)Math.rint(s)+(long)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
430	[BUG]  [BUGGY]  return  l  *(double)Math.rint(s)+(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(double)Math.rint(s)+(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(double)Math.rint(s)+(double)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
431	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)/(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)/(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)/(long)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
432	[BUG]  [BUGGY]  return  long  *(long)Math.rint(s)+(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(long)Math.rint(s)+(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(long)Math.rint(s)+(long)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
433	[BUG]  [BUGGY]  return  long  /(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  /(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  /(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
434	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.MAX_VALUE_INTEGER_NUMBER.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.MAX_VALUE_INTEGER_NUMBER.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.MAX_VALUE_INTEGER_NUMBER.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
435	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s),  l);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s),  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s),  l);	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
436	[BUG]  [BUGGY]  return(long)(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(long)(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(long)(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
437	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
438	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.parseLong(l)+  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.parseLong(l)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.parseLong(l)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
439	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(l)+  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(l)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(l)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
440	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
441	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
442	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
443	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  s  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
444	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s  +  1);	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
445	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  s  *  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s  *  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
446	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(int)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
447	[BUG]  [BUGGY]  return  long  +(long)Long.parseLong(s)/(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Long.parseLong(s)/(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Long.parseLong(s)/(long)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
448	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)/(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Long.parseLong(s)/(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)/(long)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
449	[BUG]  [BUGGY]  return  Long.parseLong(s)/(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(long)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
450	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(int)Long.parseInt(s));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
451	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2  +  1);	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
452	[BUG]  [BUGGY]  return  Long.parseLong(s)/  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/  2;	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
453	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  4);	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
454	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2.0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2.0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2.0);	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
455	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  3);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  3);	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
456	[BUG]  [BUGGY]  return  Long.parseLong(l)/  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/  2;	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
457	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)+  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
458	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
459	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
460	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  4);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  4);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
461	[BUG]  [BUGGY]  return  l!=  0?  Long.parseLong(l):  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l!=  0?  Long.parseLong(l):  Integer.parseInt(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Long.parseLong(l):  Integer.parseInt(s);	  return    l!=    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
462	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
463	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);	  return    l    +(int)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
464	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
465	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
466	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
467	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER,  s);	  return    l    +(long)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
468	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
469	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE,  s);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
470	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE  +  1);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
471	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MILLIS);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MILLIS);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MILLIS);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
472	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_MINUTE)+  1;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
473	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  DateTimeConstants.SECONDS_PER_MINUTE);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  DateTimeConstants.SECONDS_PER_MINUTE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  DateTimeConstants.SECONDS_PER_MINUTE);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
474	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_SECOND);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_SECOND);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_SECOND);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
475	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_NUMBER);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
476	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
477	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
478	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
479	[BUG]  [BUGGY]  return  Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
480	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  l  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
481	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER,  s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER,  s);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
482	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE  -  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE  -  1;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
483	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  -  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  -  1;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
484	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MAX_VALUE  -  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE  -  1;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
485	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  -  2;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  -  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  -  2;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
486	[BUG]  [BUGGY]  return  Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
487	[BUG]  [BUGGY]  return  Integer.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Integer.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Integer.parseInt(s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
488	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
489	[BUG]  [BUGGY]  return  l  <  Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <  Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <  Long.parseLong(s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
490	[BUG]  [BUGGY]  return  Double.parseDouble(s));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Double.parseDouble(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Double.parseDouble(s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
491	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.parseLong(l)).longValue();	  return    long.parseLong(s)+(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
492	[BUG]  [BUGGY]  return  long.parseLong(s)+(Long.parseLong(l)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long.parseLong(s)+(Long.parseLong(l)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long.parseLong(s)+(Long.parseLong(l)).doubleValue();	  return    long.parseLong(s)+(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
493	[BUG]  [BUGGY]  return  l  +(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(Long.parseLong(s)).longValue();	  return    long.parseLong(s)+(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
494	[BUG]  [BUGGY]  return  long.parseLong(s)/(Long.parseLong(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long.parseLong(s)/(Long.parseLong(l)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long.parseLong(s)/(Long.parseLong(l)).longValue();	  return    long.parseLong(s)+(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
495	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s)).longValue();	  return    long.parseLong(s)+(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
496	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)+(long)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)+(long)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
497	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
498	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)+(long)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
499	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.rint(s)+(double)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)+(double)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
500	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)*(int)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)*(int)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)*(int)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
501	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  1);	  return    l    +(long)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
502	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  2  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  2  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  2  -  1);	  return    l    +(long)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
503	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  1000  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  1000  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  1000  -  1);	  return    l    +(long)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
504	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(s);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(s);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(s);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
505	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(s);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
506	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l).doubleValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l).doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
507	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l),  s.doubleValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l),  s.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l),  s.doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
508	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  s).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s).doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
509	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l).doubleValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l).doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
510	[BUG]  [BUGGY]  return  long  +(long)Math.pow(10,  l).doubleValue();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  +(long)Math.pow(10,  l).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  +(long)Math.pow(10,  l).doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
511	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(s)+  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)/(int)Math.rint(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)/(int)Math.rint(s)+  1);	  return    l    +(int)Math.rint(s)/(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
512	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)/(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.rint(s)/(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)/(double)Math.rint(l));	  return    l    +(int)Math.rint(s)/(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
513	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2.0).doubleValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
514	[BUG]  [BUGGY]  return  Long.parseLong(s)/  2.0.longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/  2.0.longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/  2.0.longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
515	[BUG]  [BUGGY]  return  Long.parseLong(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
516	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2.0).longValue()  +  1;	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
517	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
518	[BUG]  [BUGGY]  return  Long.parseLong(l)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
519	[BUG]  [BUGGY]  return  l  ==  0?  Double.NaN  :  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Double.NaN  :  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Double.NaN  :  Long.parseLong(s);	  return    l    ==    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
520	[BUG]  [BUGGY]  return  l  +  10;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  10;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  10;	  return    l    +    4;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
521	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)/(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)/(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)/(double)Math.rint(l));	  return    l    +(long)Math.rint(s)/(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
522	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)/(long)Math.rint(s));	  return    l    +(long)Math.rint(s)/(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
523	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l)+  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)/(long)Math.rint(l)+  1);	  return    l    +(long)Math.rint(s)/(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
524	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  +  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  +  2);	  return    l    +(long)Math.pow(10,    l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
525	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
526	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
527	[BUG]  [BUGGY]  return  long  /(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  /(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  /(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
528	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+  1);	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
529	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s),  l);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s),  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s),  l);	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
530	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  0);	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
531	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s),  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s),  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s),  1);	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
532	[BUG]  [BUGGY]  return  Long.parseLong(s),  l  *(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s),  l  *(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s),  l  *(Long.parseLong(s));	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
533	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1,  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  1,  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1,  0);	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
534	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s),  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s),  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s),  2);	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
535	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s)+  1);	  return    Long.parseLong(l)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
536	[BUG]  [BUGGY]  return  Long.parseLong(l)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/(Long.parseLong(s));	  return    Long.parseLong(l)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
537	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s),  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s),  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s),  0);	  return    Long.parseLong(l)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
538	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.parseLong(l));	  return    Long.parseLong(l)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
539	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s)-  1);	  return    Long.parseLong(l)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
540	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
541	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
542	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(l));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
543	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
544	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  &&  l  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  &&  l  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  &&  l  *  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    ||    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
545	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  ||  l  *  Long.MAX_VALUE  +  1;	  return    l    *    Long.MAX_VALUE    ||    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
546	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  ||  l  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  ||  l  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  ||  l  *  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    ||    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
547	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  -(l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  -(l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  -(l  *  Long.MAX_VALUE);	  return    l    *    Long.MAX_VALUE    ||    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
548	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  -  1  ||  l  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  -  1  ||  l  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  -  1  ||  l  *  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    ||    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
549	[BUG]  [BUGGY]  return  Long.parseLong(l)+  l  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+  l  *(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+  l  *(Long.parseLong(s)).longValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
550	[BUG]  [BUGGY]  return  Long.parseLong(l)+  l  *(Long.parseLong(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+  l  *(Long.parseLong(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+  l  *(Long.parseLong(s)).doubleValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
551	[BUG]  [BUGGY]  return  Long.parseLong(s)/  l  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/  l  *(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/  l  *(Long.parseLong(s)).longValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
552	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
553	[BUG]  [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).floatValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  l  *(Long.parseLong(s)).floatValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
554	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  1));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  1));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  1));	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
555	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  2));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  2));	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
556	[BUG]  [BUGGY]  return  Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  1);	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
557	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1),  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  1),  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1),  s);	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
558	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)+  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)+  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)+  4);	  return    l    *(Long.parseLong(s)+    4);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
559	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(s,  l);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(s,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext();  return  cc.getSimpleNumber(s,  l);	  Context    cc    =    Context.getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
560	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  return  cc.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getContext();  return  cc.getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getContext();  return  cc.getSimpleNumber(s);	  Context    cc    =    Context.getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
561	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  0);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  0);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
562	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  Integer.MAX_VALUE);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
563	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  Double.POSITIVE_INIT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  Double.POSITIVE_INIT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  Double.POSITIVE_INIT_NUMBER);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
564	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  cc);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  cc);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  cc);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
565	[BUG]  [BUGGY]  return  l  *(int)Math.rint(s)*(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.rint(s)*(int)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.rint(s)*(int)Math.rint(l));	  return    l    *(long)Math.rint(s)*(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
566	[BUG]  [BUGGY]  return  l  *(double)Math.rint(s)*(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(double)Math.rint(s)*(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(double)Math.rint(s)*(double)Math.rint(l));	  return    l    *(long)Math.rint(s)*(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
567	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)*(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)*(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)*(double)Math.rint(l));	  return    l    *(long)Math.rint(s)*(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
568	[BUG]  [BUGGY]  return  long  *(long)Math.rint(s)*(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(long)Math.rint(s)*(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(long)Math.rint(s)*(long)Math.rint(l));	  return    l    *(long)Math.rint(s)*(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
569	[BUG]  [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  l  *(Long.parseLong(s)).longValue()  +  1;	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
570	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s)).longValue()  +  1;	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
571	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)).longValue()  +  1;	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
572	[BUG]  [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(l)+  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(l)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
573	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.parseLong(l)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.parseLong(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.parseLong(l)+  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
574	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  2;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  2;	  return    l    *    Long.MAX_VALUE    +    2;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
575	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  +  2;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  +  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  +  2;	  return    l    *    Long.MAX_VALUE    +    2;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
576	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(double)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(double)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(double)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)/(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
577	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s).doubleValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).doubleValue()  +  1;	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
578	[BUG]  [BUGGY]  return  l  +  Long.parseLong(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  Long.parseLong(s).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  Long.parseLong(s).doubleValue();	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
579	[BUG]  [BUGGY]  return  Long.parseLong(l).doubleValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l).doubleValue();	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
580	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s).doubleValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s).doubleValue()  +  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s).doubleValue()  +  2;	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
581	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  Integer.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
582	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE,  s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE,  s);	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
583	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE,  0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE,  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE,  0);	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
584	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Integer.MIN_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
585	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l),  IN_FOR_INIT_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l),  IN_FOR_INIT_CLAUSE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l),  IN_FOR_INIT_CLAUSE);	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
586	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
587	[BUG]  [BUGGY]  Context.report(JSError.make(Long.valueOf(l)));  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(Long.valueOf(l)));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(Long.valueOf(l)));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
588	[BUG]  [BUGGY]  Context.report(JSError.make(l,  ESCAPED_JS_STRINGS,  s));  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(l,  ESCAPED_JS_STRINGS,  s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(l,  ESCAPED_JS_STRINGS,  s));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
589	[BUG]  [BUGGY]  Context.report(JSError.make(l,  ESCAPED_JS_STRINGS));  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(l,  ESCAPED_JS_STRINGS));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(l,  ESCAPED_JS_STRINGS));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
590	[BUG]  [BUGGY]  Context.report(JSError.make(GLOBAL_NUMBER,  l));  [CE]  illegal  start  of  expression  [FE]                                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(GLOBAL_NUMBER,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(GLOBAL_NUMBER,  l));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
591	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s,  l);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s,  l);	  Context    cc    =    getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
592	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s).doubleValue();	  Context    cc    =    getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
593	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)+(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)+(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)+(double)Math.rint(l));	  return    l    +(double)Math.rint(s)+(double)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
594	[BUG]  [BUGGY]  return  l  +(double)Math.rint(s)  *(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.rint(s)  *(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.rint(s)  *(double)Math.rint(l));	  return    l    +(double)Math.rint(s)+(double)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
595	[BUG]  [BUGGY]  return  l  <=  0?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  <=  0?  Double.NaN  :  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  <=  0?  Double.NaN  :  l;	  return    l    <    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
596	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  /  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  /  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  /  1);	  return    l    +(int)Math.pow(10,    l    +    1);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
597	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
598	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MIN_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
599	[BUG]  [BUGGY]  return  Integer.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Integer.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Integer.parseInt(l));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
600	[BUG]  [BUGGY]  return  Long.parseLong(l  -  s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l  -  s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l  -  s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
601	[BUG]  [BUGGY]  return  Long.parseLong(l,  s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l,  s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l,  s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
602	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
603	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+  2;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
604	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MIN_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MIN_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
605	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
606	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)+(int)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Long.parseLong(s)+(int)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)+(int)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)+(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
607	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s).doubleValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.parseLong(s).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s).doubleValue();	  return    l    /    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
608	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.parseLong(s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s  +  1);	  return    l    /    Long.parseLong(s);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
609	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  Long.MIN_VALUE);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
610	[BUG]  [BUGGY]  return  Math.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  *  Long.MIN_VALUE);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
611	[BUG]  [BUGGY]  return  Long.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.pow(10,  l  *  Long.MIN_VALUE);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
612	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)-  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)-  1;	  return    l    *    Math.pow(10,    l)+    1;    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
613	[BUG]  [BUGGY]  return  l  +(double)Long.parseLong(s)+(double)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Long.parseLong(s)+(double)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Long.parseLong(s)+(double)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
614	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeInsertion(l);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContextForCodeInsertion(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContextForCodeInsertion(l);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
615	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
616	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext().getCurrentNode();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext().getCurrentNode();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
617	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
618	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2  +  4);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2  +  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2  +  4);	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
619	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1),  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  1),  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1),  0);	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
620	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  1)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1)+  1;	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
621	[BUG]  [BUGGY]  return  Long.parseLong(l)*(long)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(long)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(long)Math.pow(10,  l);	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
622	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+(int)Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+(int)Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+(int)Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
623	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+  1;	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
624	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+  Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+  Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MAX_VALUE)+  Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
625	[BUG]  [BUGGY]  return  Long.parseLong(l  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l  -  1);	  return    Long.parseLong(l);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
626	[BUG]  [BUGGY]  return  l  *(long.parseLong(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.parseLong(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.parseLong(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
627	[BUG]  [BUGGY]  return(long)(Long.parseLong(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(long)(Long.parseLong(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(long)(Long.parseLong(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
628	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_LONG);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_LONG);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_LONG);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
629	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_BLOCK);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_BLOCK);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_BLOCK);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
630	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_DANGLING_ELSE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.SECONDS_PER_DANGLING_ELSE);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
631	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(l);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContextForCodeInsertion(l);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
632	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext(context);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
633	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext(Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext(Long.MAX_VALUE);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
634	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext(Locale.ENGLISH);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContext(Locale.ENGLISH);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
635	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  Double.doubleValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  Double.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  Double.doubleValue();	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
636	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INTEGER_NUMBER)+  1;	  return    l    /(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
637	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s  /  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s  /  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s  /  1);	  return    l    *    Long.parseLong(s    +    1);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
638	[BUG]  [BUGGY]  return  l  /  Long.parseLong(s)-  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.parseLong(s)-  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.parseLong(s)-  1;	  return    l    *    Long.parseLong(s)-    1;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
639	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  -  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  -  2);	  return    l    +(int)Math.pow(10,    l    -    2);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
640	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  2);	  return    l    *    Math.pow(10,    l    +    2);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
641	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  2);	  return    l    *    Math.pow(10,    l    +    2);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
642	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(l,  s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(l,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(l,  s);	  Context    cc    =    getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
643	[BUG]  [BUGGY]  Context  cc  =  startCurrentContext();  return  cc.getSimpleNumber(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  startCurrentContext();  return  cc.getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  startCurrentContext();  return  cc.getSimpleNumber(s);	  Context    cc    =    getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
644	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
645	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER)/(Long.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
646	[BUG]  [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(l));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
647	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  16);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  16);	  return    l    *(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
648	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  Long.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
649	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
650	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
651	[BUG]  [BUGGY]  return  Integer.parseInt(s)*(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Integer.parseInt(s)*(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Integer.parseInt(s)*(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
652	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
653	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  -  1  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  -  1  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  -  1  +  1;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
654	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(s)+  1);	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
655	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_NUMBER);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
656	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_LONG);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_LONG);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_LONG);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
657	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
658	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX,  s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX,  s);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
659	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
660	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
661	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  s  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  s  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  s  -  1);	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
662	[BUG]  [BUGGY]  return  l!=  0?  Long.parseLong(l):  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l!=  0?  Long.parseLong(l):  Integer.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Long.parseLong(l):  Integer.MAX_VALUE;	  return    l!=    0?    Long.parseLong(l):    l;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
663	[BUG]  [BUGGY]  return  l  *  2  +  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +  Double.parseDouble(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +  Double.parseDouble(s);	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
664	[BUG]  [BUGGY]  return  l  *  2  +  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +  Integer.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +  Integer.MAX_VALUE;	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
665	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_NUMBER)/(Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_NUMBER)/(Long.parseLong(s)+  1);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
666	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  4);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
667	[BUG]  [BUGGY]  return  l  /  Long.MAX_VALUE  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /  Long.MAX_VALUE  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /  Long.MAX_VALUE  *  Long.MAX_VALUE;	  return    l    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
668	[BUG]  [BUGGY]  return  Integer.parseInt(s)/(Long.parseLong(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Integer.parseInt(s)/(Long.parseLong(l)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Integer.parseInt(s)/(Long.parseLong(l)).longValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
669	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Long.MAX_VALUE)+  1;	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
670	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  Long.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
671	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
672	[BUG]  [BUGGY]  return  Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  /  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
673	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(null);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(null);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(null);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(l);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
674	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(s);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  context.getCurrentContext();  if(cc  ==  null)  {  return  cc.getSimpleNumber(s);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(s);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
675	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)+(long)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
676	[BUG]  [BUGGY]  return  l  +(long)Long.parseInt(s)+(long)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseInt(s)+(long)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseInt(s)+(long)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
677	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l),  Double.NaN.doubleValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l),  Double.NaN.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l),  Double.NaN.doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
678	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l),  Double.NaN).doubleValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l),  Double.NaN).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l),  Double.NaN).doubleValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
679	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
680	[BUG]  [BUGGY]  return  long  *(Long.parseLong(l)).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(l)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(l)).longValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
681	[BUG]  [BUGGY]  return  l  *(Long.parseInt(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseInt(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseInt(s)).longValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
682	[BUG]  [BUGGY]  return(long)(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(long)(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(long)(Long.parseLong(s)).longValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
683	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  &&  l  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  &&  l  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  &&  l  *  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    ||    l    *    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
684	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l)+  1L);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l)+  1L);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)/(long)Math.rint(l)+  1L);	  return    l    +(long)Math.rint(s)/(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
685	[BUG]  [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(s)+  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(s)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseLong(s)/(int)Long.parseLong(s)+  1);	  return    l    +(int)Long.parseLong(s)/(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
686	[BUG]  [BUGGY]  return  Long.parseLong(l).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l).longValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
687	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  longValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
688	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)+  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)+  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)+  2);	  return    l    *(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
689	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s  -  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s  -  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s  -  2);	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
690	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  s  -  4);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  s  -  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  s  -  4);	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
691	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  2  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(l)/  2  +  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)+    1);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
692	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
693	[BUG]  [BUGGY]  return  l  *(int.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
694	[BUG]  [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(s)+1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.rint(s)+(int)Math.rint(s)+1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.rint(s)+(int)Math.rint(s)+1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
695	[BUG]  [BUGGY]  return  l  *(int)Math.rint(s)+(int)Math.rint(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.rint(s)+(int)Math.rint(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.rint(s)+(int)Math.rint(s));	  return    l    +(int)Math.rint(s)+(int)Math.rint(s));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
696	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  16);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  +  16);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    4);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
697	[BUG]  [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  +  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.MAX_VALUE_INTEGER_NUMBER  +  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.MAX_VALUE_INTEGER_NUMBER  +  4);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    +    4);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
698	[BUG]  [BUGGY]  return  l  >  0?  Long.parseLong(s):  l  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  >  0?  Long.parseLong(s):  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  >  0?  Long.parseLong(s):  l  +  1;	  return    l    >    0?    Long.parseLong(s):    l;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
699	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(l)+  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(l)+  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(long)Long.parseLong(l)+  1);	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
700	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(int)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(int)Long.parseInt(l));	  return    l    +(long)Long.parseLong(s)/(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
701	[BUG]  [BUGGY]  return  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_DAY);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  /  DateTimeConstants.MILLIS_PER_DAY);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
702	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s),  16);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s),  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s),  16);	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
703	[BUG]  [BUGGY]  return  l  +(int)Long.parseInt(s)+(int)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Long.parseInt(s)+(int)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseInt(s)+(int)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
704	[BUG]  [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Long.parseLong(s)+(long)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Long.parseLong(s)+(long)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
705	[BUG]  [BUGGY]  return  l  +(long)Long.parseInt(s)+(long)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseInt(s)+(long)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseInt(s)+(long)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(l));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
706	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  3);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  3);	  return    l    *    Math.pow(10,    l    +    3);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
707	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  3);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  3);	  return    l    *    Math.pow(10,    l    +    3);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
708	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  +  4);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  +  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  +  4);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
709	[BUG]  [BUGGY]  return  l  /(Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  /(Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  /(Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
710	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  +  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  +  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  +  2);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
711	[BUG]  [BUGGY]  return  l  *  Double.MIN_VALUE  /  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Double.MIN_VALUE  /  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Double.MIN_VALUE  /  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
712	[BUG]  [BUGGY]  return  l  *  Double.MAX_VALUE  /  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Double.MAX_VALUE  /  Long.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Double.MAX_VALUE  /  Long.MIN_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
713	[BUG]  [BUGGY]  return  Math.pow(10,  l)*(long)Math.rint(s)+(long)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l)*(long)Math.rint(s)+(long)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l)*(long)Math.rint(s)+(long)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
714	[BUG]  [BUGGY]  return  l  *(int)Math.pow(10,  l  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.pow(10,  l  *  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.pow(10,  l  *  Integer.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
715	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Integer.MAX_VALUE)+  1;	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
716	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  4);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  4);	  return    l    *    Math.pow(10,    l    +    4);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
717	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  4);	  return    l    *    Math.pow(10,    l    +    4);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
718	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l,  IN_FOR_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
719	[BUG]  [BUGGY]  Context.report(JSError.make(SimpleNumber.valueOf(l)));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(SimpleNumber.valueOf(l)));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(SimpleNumber.valueOf(l)));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
720	[BUG]  [BUGGY]  Context.report(JSError.make(GLOBAL_NUMBER_INIT_CLAUSE,  l));  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(GLOBAL_NUMBER_INIT_CLAUSE,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(GLOBAL_NUMBER_INIT_CLAUSE,  l));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
721	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l,  DEFAULT_NUMBER_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l,  DEFAULT_NUMBER_INIT_CLAUSE));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l,  DEFAULT_NUMBER_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
722	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext,  l);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  Context.getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext,  l);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
723	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  rhsContext  =  getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  rhsContext  =  getCurrentContext();  return  rhsContext.getSimpleNumber(rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    return    rhsContext.getSimpleNumber(rhsContext);    	non-compiled	[CE]  orphaned  case	117	None	replace
724	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER)||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER)||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER)||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
725	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  &&  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  &&  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  &&  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
726	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
727	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  -  1);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  -  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
728	[BUG]  [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE_INTEGER_NUMBER  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
729	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)+(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)+(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)+(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
730	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
731	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(l,  s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(l,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(l,  s);	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
732	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(null);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(null);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(null);	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
733	[BUG]  [BUGGY]  return  double  *(double)Math.rint(s)*(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  double  *(double)Math.rint(s)*(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  double  *(double)Math.rint(s)*(double)Math.rint(l));	  return    l    *(long)Math.rint(s)*(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
734	[BUG]  [BUGGY]  return  l  ==  0?  Double.NaN  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Double.NaN  :  Integer.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Double.NaN  :  Integer.MAX_VALUE;	  return    l    ==    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
735	[BUG]  [BUGGY]  return  l  ==  0?  Double.NaN  :  Long.parseLong(l);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  ==  0?  Double.NaN  :  Long.parseLong(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  ==  0?  Double.NaN  :  Long.parseLong(l);	  return    l    ==    0?    Double.NaN    :    l;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
736	[BUG]  [BUGGY]  return  l  *(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.pow(10,  l  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
737	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  Math.pow(10,  l));	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
738	[BUG]  [BUGGY]  return  l  *(int)Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.pow(10,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.pow(10,  s);	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
739	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  s  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  s  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  s  -  1);	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
740	[BUG]  [BUGGY]  return  Math.pow(10,  l  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  -  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
741	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  1);	  return    l    *    Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
742	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
743	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  /  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  /  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  /  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
744	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
745	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  -  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
746	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  /  2;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  /  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  /  2;	  return    l    *    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
747	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER  +  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER  +  1);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
748	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  1.0);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  1.0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  1.0);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
749	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  0.0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  0.0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  0.0);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
750	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  /  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  /  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  /  1);	  return    l    +(long)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
751	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)+  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Long.parseLong(s)+  1;	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
752	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)+  2;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Long.parseLong(s)+  2;	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
753	[BUG]  [BUGGY]  return  long  *(Long.parseDouble(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseDouble(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseDouble(s)).longValue();	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
754	[BUG]  [BUGGY]  return  l  *(Double.parseDouble(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Double.parseDouble(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Double.parseDouble(s)).doubleValue();	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
755	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INT_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INT_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INT_NUMBER)/(Long.parseLong(s));	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
756	[BUG]  [BUGGY]  return  l  *(int)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
757	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MIN_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  Long.MIN_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  Long.MIN_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
758	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)-  3);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)-  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)-  3);	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
759	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)-  1);	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
760	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Long.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Long.MIN_VALUE;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
761	[BUG]  [BUGGY]  return  Long.MAX_VALUE  *  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.MAX_VALUE  *  Long.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.MAX_VALUE  *  Long.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    /    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
762	[BUG]  [BUGGY]  return  l  *(long.parseLong(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.parseLong(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.parseLong(s)).doubleValue();	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
763	[BUG]  [BUGGY]  return  Long.parseLong(s)+  l  /(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  l  /(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  l  /(Long.parseLong(s)).longValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
764	[BUG]  [BUGGY]  return  Long.parseLong(s)+  1  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)+  1  *(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)+  1  *(Long.parseLong(s)).longValue();	  return    Long.parseLong(s)+    l    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
765	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Integer.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
766	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Integer.MAX_VALUE)+  1;	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
767	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
768	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  -  1);	  return    l    +(int)Math.pow(10,    l    -    1);    	non-compiled	[CE]  	105	None	replace
769	[BUG]  [BUGGY]  return  l  +  2  *  Integer.MAX_VALUE;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  2  *  Integer.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  2  *  Integer.MAX_VALUE;	  return    l    +    2;    	non-compiled	[CE]  	28	None	replace
770	[BUG]  [BUGGY]  return  l  +  2  *(Long.parseLong(s));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  2  *(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  2  *(Long.parseLong(s));	  return    l    +    2;    	non-compiled	[CE]  	28	None	replace
771	[BUG]  [BUGGY]  return  l  +  2  *  Integer.MIN_VALUE;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  2  *  Integer.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  2  *  Integer.MIN_VALUE;	  return    l    +    2;    	non-compiled	[CE]  	28	None	replace
772	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
773	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)+(Long.parseLong(s)/  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
774	[BUG]  [BUGGY]  return  l  *(Double.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Double.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Double.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
775	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
776	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
777	[BUG]  [BUGGY]  return  l  *(long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long.parseLong(s)).longValue();	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
778	[BUG]  [BUGGY]  return(l  *(Long.parseLong(s)).longValue())/  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(l  *(Long.parseLong(s)).longValue())/  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(l  *(Long.parseLong(s)).longValue())/  1;	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
779	[BUG]  [BUGGY]  return  l!=  0?  Double.NaN  :  l  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l!=  0?  Double.NaN  :  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Double.NaN  :  l  +  1;	  return    l    >    0?    Double.NaN    :    l    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
780	[BUG]  [BUGGY]  return  l  +(double)Long.parseLong(s)+(double)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Long.parseLong(s)+(double)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Long.parseLong(s)+(double)Long.parseLong(l));	  return    l    +(long)Long.parseLong(s)+(long)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
781	[BUG]  [BUGGY]  return  l  *  1L;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  1L;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  1L;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
782	[BUG]  [BUGGY]  return  l  +  2L;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  2L;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  2L;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
783	[BUG]  [BUGGY]  return  l  +  1L  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1L  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1L  +  1;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
784	[BUG]  [BUGGY]  return  l  *  1  +  Long.parseLong(s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  1  +  Long.parseLong(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  1  +  Long.parseLong(s);	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
785	[BUG]  [BUGGY]  return  l  *  1  +  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  1  +  Double.parseDouble(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  1  +  Double.parseDouble(s);	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
786	[BUG]  [BUGGY]  return  l  *  1  +(int)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  1  +(int)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  1  +(int)Math.pow(10,  l);	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
787	[BUG]  [BUGGY]  return  l  *  1  +  Integer.parseInt(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  1  +  Integer.parseInt(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  1  +  Integer.parseInt(s);	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
788	[BUG]  [BUGGY]  return  l  *(int)Math.rint(s)/(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(int)Math.rint(s)/(int)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(int)Math.rint(s)/(int)Math.rint(l));	  return    l    +(int)Math.rint(s)/(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
789	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
790	[BUG]  [BUGGY]  return  Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Math.pow(10,  l  /  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
791	[BUG]  [BUGGY]  return  l!=  0?  Double.NaN  :  Long.parseLong(l);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l!=  0?  Double.NaN  :  Long.parseLong(l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l!=  0?  Double.NaN  :  Long.parseLong(l);	  return    l!=    0?    Double.NaN    :    l;    	non-compiled	[CE]  	107	None	replace
792	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  	66	None	replace
793	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  	23	None	replace
794	[BUG]  [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
795	[BUG]  [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)*(Long.MAX_VALUE_NUMBER)/(Long.parseLong(l));	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
796	[BUG]  [BUGGY]  return  long  *(Long.parseLong(s)).intValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  long  *(Long.parseLong(s)).intValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  long  *(Long.parseLong(s)).intValue();	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
797	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).intValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2.0).intValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2.0).intValue();	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
798	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).floatValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)).floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).floatValue();	  return    l    *(Long.parseLong(s)).intValue();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
799	[BUG]  [BUGGY]  long  l  =  Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  long  l  =  Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	long  l  =  Long.parseLong(s));	  return    Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
800	[BUG]  [BUGGY]  l  =  Long.parseLong(s));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  l  =  Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	l  =  Long.parseLong(s));	  return    Long.parseLong(s));    	non-compiled	[CE]  	43	None	replace
801	[BUG]  [BUGGY]  return  Long.parseLong(l)/(Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)/(Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)/(Long.MAX_VALUE_INTEGER_NUMBER);	  return    Long.parseLong(s)*(Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  	63	None	replace
802	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  10  *  Long.MAX_VALUE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  10  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  10  *  Long.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  	120	None	replace
803	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  Long.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
804	[BUG]  [BUGGY]  return  l  *(Long.parseDouble(s)).longValue()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseDouble(s)).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseDouble(s)).longValue()  +  1;	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  	133	None	replace
805	[BUG]  [BUGGY]  return  l  *(Long.parseFloat(s)).longValue();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseFloat(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseFloat(s)).longValue();	  return    l    *(Long.parseDouble(s)).longValue();    	non-compiled	[CE]  	133	None	replace
806	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  	8	None	replace
807	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  +  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  +  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  +  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  	8	None	replace
808	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2,  0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2,  0);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2,  0);	  return    l    *(Long.parseLong(s),    0);    	non-compiled	[CE]  	131	None	replace
809	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)+  16;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)+  16;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)+  16;	  return    l    *    Long.parseLong(s)+    1;    	non-compiled	[CE]  	45	None	replace
810	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  3);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+  3);	  return    l    *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  	110	None	replace
811	[BUG]  [BUGGY]  return  l  +  Long.parseLong(s)+  2;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  Long.parseLong(s)+  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  Long.parseLong(s)+  2;	  return    l    *    Long.parseLong(s)+    2;    	non-compiled	[CE]  	47	None	replace
812	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l)/  s;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l)/  s;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l)/  s;	  return    l    *    Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
813	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)/(long)Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)/(long)Long.parseInt(s));	  return    l    +(int)Long.parseLong(s)+(int)Long.parseInt(s));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
814	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  16);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  16);	  return    l    +(int)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
815	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  s);	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
816	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  *  Math.pow(10,  s);	  return    l    +(long)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
817	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1)/  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  1)/  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1)/  2;	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
818	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)+  1),  s  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)+  1),  s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)+  1),  s  +  1);	  return    l    *(Long.parseLong(s)+    1));    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
819	[BUG]  [BUGGY]  return(l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)/  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)/  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(l  *  Long.MAX_POSITIVE_INTEGER_NUMBER)/  Math.pow(10,  l  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
820	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1,  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    *    Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
821	[BUG]  [BUGGY]  return  double  *(double)Math.rint(s)+(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  double  *(double)Math.rint(s)+(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  double  *(double)Math.rint(s)+(double)Math.rint(l));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
822	[BUG]  [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l  +  1));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.rint(s)+(long)Math.rint(l  +  1));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.rint(s)+(long)Math.rint(l  +  1));	  return    l    *(long)Math.rint(s)+(long)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
823	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  1  *  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
824	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
825	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  1  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
826	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
827	[BUG]  [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(Long.parseLong(s)/  2);	  return    Long.parseLong(l)+(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
828	[BUG]  [BUGGY]  return  l  *(Long.parseDouble(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseDouble(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseDouble(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
829	[BUG]  [BUGGY]  return  l  *(Long.parseInt(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseInt(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseInt(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
830	[BUG]  [BUGGY]  return  double  *(Long.parseLong(s)/  2.0).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  double  *(Long.parseLong(s)/  2.0).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  double  *(Long.parseLong(s)/  2.0).longValue();	  return    l    *(Long.parseLong(s)/    2.0).longValue();    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
831	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_SIZE  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_SIZE  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_SIZE  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
832	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  |  Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    |    Long.MAX_VALUE_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
833	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l  -  4);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l  -  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l  -  4);	  return    l    +(int)Math.pow(10,    l    -    4);    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
834	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)/  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
835	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2  +  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
836	[BUG]  [BUGGY]  return  l  *  2  +(int)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +(int)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +(int)Math.pow(10,  l);	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
837	[BUG]  [BUGGY]  return  l  *  2  +(int)Math.random()  *  Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +(int)Math.random()  *  Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +(int)Math.random()  *  Long.parseLong(s));	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
838	[BUG]  [BUGGY]  return  l  *  2  +(long)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  2  +(long)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  2  +(long)Math.pow(10,  l);	  return    l    *    2;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
839	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l).longValue();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l).longValue();	  return    l    *(long)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
840	[BUG]  [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
841	[BUG]  [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  1L  :  l  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  1L  :  l  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  1L  :  l  +  1;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
842	[BUG]  [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
843	[BUG]  [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  1L  :  l;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  1L  :  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  1L  :  l;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
844	[BUG]  [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  Double.NaN  :  l;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  Double.NaN  :  l;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +  1,  l  <=  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)?  Double.NaN  :  l;	  return    l    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
845	[BUG]  [BUGGY]  return  l  *  10  +  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  10  +  Double.parseDouble(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  10  +  Double.parseDouble(s);	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
846	[BUG]  [BUGGY]  return  l  *  10  +(int)Math.pow(10,  l);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  10  +(int)Math.pow(10,  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  10  +(int)Math.pow(10,  l);	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
847	[BUG]  [BUGGY]  return  l  *  10  +(Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  10  +(Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  10  +(Long.parseLong(s));	  return    l    *    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
848	[BUG]  [BUGGY]  return  l  *  Long.pow(10,  l  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.pow(10,  l  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.pow(10,  l  *  Long.MIN_VALUE);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
849	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1,  Long.MIN_VALUE);	  return    l    *    Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
850	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
851	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  ||  l  >  Long.MAX_VALUE_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  ||  l  >  Long.MAX_VALUE_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  ||  l  >  Long.MAX_VALUE_NUMBER);	  return    l    *(Long.MAX_VALUE_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
852	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
853	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2  -  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
854	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  *  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  *  s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  *  s);	  return    l    +(int)Math.pow(10,    s);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
855	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  16);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  16);	  return    l    +(long)Math.pow(10,    l    -    1);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
856	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /  2  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /  2  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  /  2  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
857	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER  ||  Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
858	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  ||  Long.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER    ||    Long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
859	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)*(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
860	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
861	[BUG]  [BUGGY]  return  l  +(int)Math.random()  -(int)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.random()  -(int)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.random()  -(int)Math.rint(l));	  return    l    +(int)Math.rint(s)-(int)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
862	[BUG]  [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)-  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(l)+(long)Long.parseLong(s)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(l)+(long)Long.parseLong(s)-  1);	  return    Long.parseLong(l)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
863	[BUG]  [BUGGY]  return  l  *(long)Math.pow(10,  l  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(long)Math.pow(10,  l  -  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(long)Math.pow(10,  l  -  2);	  return    l    +(int)Math.pow(10,    l    -    2);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
864	[BUG]  [BUGGY]  return  l  *(Long.parseInt(s)).doubleValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseInt(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseInt(s)).doubleValue();	  return    l    *(Long.parseLong(s)).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
865	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1  *  DateTimeConstants.MILLIS_PER_DAY);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1  *  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1  *  DateTimeConstants.MILLIS_PER_DAY);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
866	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.MILLIS_PER_DAY;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.MILLIS_PER_DAY;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.MILLIS_PER_DAY;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
867	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.MILLIS_PER_DAY);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.MILLIS_PER_DAY);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_DAY);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
868	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.getCurrentContextForCodeInsertion(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
869	[BUG]  [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  Context.currentTimeMillis();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
870	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s),  l.doubleValue();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s),  l.doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s),  l.doubleValue();	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  not  a  statement	101	None	replace
871	[BUG]  [BUGGY]  return(l  *  Long.parseLong(s)).doubleValue();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(l  *  Long.parseLong(s)).doubleValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(l  *  Long.parseLong(s)).doubleValue();	  return    l    *    Long.parseLong(s).doubleValue();    	non-compiled	[CE]  not  a  statement	101	None	replace
872	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  16);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX  +  16);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  not  a  statement	114	None	replace
873	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  3);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_PREFIX  +  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_PREFIX  +  3);	  return    l    *(Long.MAX_VALUE_PREFIX);    	non-compiled	[CE]  not  a  statement	114	None	replace
874	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)+  1;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)+    1;    	non-compiled	[CE]  not  a  statement	136	None	replace
875	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  Integer.MAX_VALUE);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  Integer.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  not  a  statement	86	None	replace
876	[BUG]  [BUGGY]  return  l  *(double)Long.parseLong(s)+(double)Long.parseLong(s));  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(double)Long.parseLong(s)+(double)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(double)Long.parseLong(s)+(double)Long.parseLong(s));	  return    l    *(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  not  a  statement	94	None	replace
877	[BUG]  [BUGGY]  return  l  *  Double.MAX_VALUE  /  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Double.MAX_VALUE  /  Double.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Double.MAX_VALUE  /  Double.MIN_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
878	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  /  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  /  Double.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  /  Double.MAX_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
879	[BUG]  [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.NaN;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MAX_VALUE  /  Double.NaN;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MAX_VALUE  /  Double.NaN;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
880	[BUG]  [BUGGY]  return  l  *  Long.MIN_VALUE  /  Double.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.MIN_VALUE  /  Double.MIN_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.MIN_VALUE  /  Double.MIN_VALUE;	  return    l    *    Long.MAX_VALUE    /    Double.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
881	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l,  NUMBER_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l,  NUMBER_INIT_CLAUSE));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l,  NUMBER_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
882	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l,  NUMBER_INT_VALUE));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l,  NUMBER_INT_VALUE));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l,  NUMBER_INT_VALUE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
883	[BUG]  [BUGGY]  Context.report(JSError.make(s,  l,  MISSING_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context.report(JSError.make(s,  l,  MISSING_INIT_CLAUSE));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context.report(JSError.make(s,  l,  MISSING_INIT_CLAUSE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
884	[BUG]  [BUGGY]  return  l  *(node.MAX_VALUE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(node.MAX_VALUE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(node.MAX_VALUE_INTEGER_NUMBER);	  return    l    *(long.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
885	[BUG]  [BUGGY]  return  l  *  Integer.MAX_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Integer.MAX_VALUE  -  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Integer.MAX_VALUE  -  1;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
886	[BUG]  [BUGGY]  return  l  *  Double.MAX_VALUE  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Double.MAX_VALUE  -  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Double.MAX_VALUE  -  1;	  return    l    *    Long.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
887	[BUG]  [BUGGY]  return  double  *(Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  double  *(Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  double  *(Long.parseLong(s)).longValue();	  return    long    *(Long.parseLong(s)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
888	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(long)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
889	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  l);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  l);	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
890	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l  +  1));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l  +  1));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l  +  1));	  return    Long.parseLong(s)/(Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
891	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.SECONDS_PER_MINUTE;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.SECONDS_PER_MINUTE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.SECONDS_PER_MINUTE;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
892	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1  *  DateTimeConstants.SECONDS_PER_MINUTE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1  *  DateTimeConstants.SECONDS_PER_MINUTE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1  *  DateTimeConstants.SECONDS_PER_MINUTE);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
893	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.SECONDS_PER_MINUTE);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.SECONDS_PER_MINUTE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.SECONDS_PER_MINUTE);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.SECONDS_PER_MINUTE);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
894	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
895	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  ||  l  >  Long.MAX_VALUE_INT_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER  ||  l  >  Long.MAX_VALUE_INT_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER  ||  l  >  Long.MAX_VALUE_INT_NUMBER);	  return    l    *(Long.MAX_VALUE_INT_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
896	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  1  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  1  *  Long.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  1  *  Long.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
897	[BUG]  [BUGGY]  return  l  +(long)Long.parseLong(s)-(long)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Long.parseLong(s)-(long)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Long.parseLong(s)-(long)Long.parseLong(s));	  return    l    +(long)Long.parseLong(s)+(long)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
898	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseInt(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)*(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
899	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER,  s)+  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER,  s)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER,  s)+  1;	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
900	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  10  *  Long.MAX_VALUE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  10  *  Long.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  10  *  Long.MAX_VALUE);	  return    l    +(int)Math.pow(10,    l    *    Long.MAX_VALUE);    	non-compiled	[CE]  	87	None	replace
901	[BUG]  [BUGGY]  return(l  *  Long.MAX_VALUE)+  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(l  *  Long.MAX_VALUE)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(l  *  Long.MAX_VALUE)+  1;	  return    l    *    Long.MAX_VALUE    +    2;    	non-compiled	[CE]  	56	None	replace
902	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext();  return  cc.getSimpleNumber(s);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  createCurrentContext();  return  cc.getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  createCurrentContext();  return  cc.getSimpleNumber(s);	  Context    cc    =    getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  	153	None	replace
903	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  return  cc.getSimpleNumber(s  +  1);	  Context    cc    =    getCurrentContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  	153	None	replace
904	[BUG]  [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContext();  return  cc.getSimpleNumber(s  +  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContext();  return  cc.getSimpleNumber(s  +  1);	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  	154	None	replace
905	[BUG]  [BUGGY]  Context  cc  =  createContext();  return  cc.getSimpleNumber(s);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  createContext();  return  cc.getSimpleNumber(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  createContext();  return  cc.getSimpleNumber(s);	  Context    cc    =    getContext();    return    cc.getSimpleNumber(s);    	non-compiled	[CE]  	154	None	replace
906	[BUG]  [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Number.MAX_VALUE_INTEGER_NUMBER)+  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Number.MAX_VALUE_INTEGER_NUMBER)+  1;	  return    l    *(Number.MAX_VALUE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
907	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContextForCodeInsertion(s);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
908	[BUG]  [BUGGY]  Context  cc  =  getContextForce();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getContextForce();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getContextForce();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
909	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s),  l);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s),  l);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s),  l);	  return    l    *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
910	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1)*  DateTimeConstants.MILLIS_PER_SECOND;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
911	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.MILLIS_PER_SECOND);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.MILLIS_PER_SECOND);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  -  1,  DateTimeConstants.MILLIS_PER_SECOND);	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
912	[BUG]  [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND)/  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND)/  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Math.pow(10,  l  *  DateTimeConstants.MILLIS_PER_SECOND)/  2;	  return    l    *    Math.pow(10,    l    *    DateTimeConstants.MILLIS_PER_SECOND);    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
913	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  l).longValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l),  l).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l),  l).longValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
914	[BUG]  [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l  +  1)).longValue();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  Long.parseLong(s)/(Long.parseLong(l  +  1)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  Long.parseLong(s)/(Long.parseLong(l  +  1)).longValue();	  return    Long.parseLong(s)/(Long.parseLong(l)).longValue();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
915	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)/  2  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)/  2  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)/  2  -  1);	  return    l    *(Long.parseLong(s)/    2);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
916	[BUG]  [BUGGY]  return  l  +(double)Math.pow(10,  l).longValue();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.pow(10,  l).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.pow(10,  l).longValue();	  return    l    +(double)Math.pow(10,    l);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
917	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s),  l  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s),  l  -  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s),  l  -  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
918	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  3);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-  3);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
919	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l).floatValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l).floatValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l).floatValue();	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
920	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l),  s.doubleValue());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l),  s.doubleValue());  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l),  s.doubleValue());	  return    l    +(long)Math.pow(10,    l).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
921	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER)/(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
922	[BUG]  [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MIN_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
923	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseInt(s)/  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseInt(s)/  2);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseInt(s)/  2);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
924	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseInt(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseInt(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseInt(s));	  return    long    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
925	[BUG]  [BUGGY]  return  l  *(Long.parseInt(s)).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseInt(s)).longValue()  +  1;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseInt(s)).longValue()  +  1;	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
926	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)).longValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)).longValue()  +  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)).longValue()  +  2;	  return    l    *(Long.parseLong(s)).longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
927	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  10  *  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  10  *  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  10  *  Long.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
928	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Long.MIN_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  Long.MIN_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Long.MIN_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
929	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  Math.pow(10,  l));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1  *  Math.pow(10,  l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  1  *  Math.pow(10,  l));	  return    l    +(long)Math.pow(10,    l    *    Math.pow(10,    l));    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
930	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  /  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_NUMBER  /  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_NUMBER  /  1);	  return    l    *(Long.MAX_VALUE_NUMBER    +    1);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
931	[BUG]  [BUGGY]  return  l  +(double)Math.log(s)+(double)Math.rint(l));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Math.log(s)+(double)Math.rint(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Math.log(s)+(double)Math.rint(l));	  return    l    +(double)Math.rint(s)+(double)Math.rint(l));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
932	[BUG]  [BUGGY]  return  l  +(double)Long.parseLong(s)/(double)Long.parseLong(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Long.parseLong(s)/(double)Long.parseLong(s));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Long.parseLong(s)/(double)Long.parseLong(s));	  return    l    +(int)Long.parseLong(s)/(int)Long.parseLong(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
933	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)-  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)-  4);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)-  4);	  return    l    *(Long.parseLong(s)+    4);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
934	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  Context  cc  =  getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	Context  cc  =  getCurrentContext();  if(cc!=  null)  {  return  cc.getSimpleNumber(s);  }	  Context    cc    =    Context.getCurrentContext();    if(cc!=    null)    {    return    cc.getSimpleNumber(s);    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
935	[BUG]  [BUGGY]  return  l  +(double)Long.parseLong(s)/(double)Long.parseLong(l));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(double)Long.parseLong(s)/(double)Long.parseLong(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(double)Long.parseLong(s)/(double)Long.parseLong(l));	  return    l    +(int)Long.parseLong(s)/(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
936	[BUG]  [BUGGY]  return  l  +(int)Long.parseInt(s)/(int)Long.parseInt(l));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Long.parseInt(s)/(int)Long.parseInt(l));  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Long.parseInt(s)/(int)Long.parseInt(l));	  return    l    +(int)Long.parseLong(s)/(int)Long.parseLong(l));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
937	[BUG]  [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l)-  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.rint(s)/(long)Math.rint(l)-  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.rint(s)/(long)Math.rint(l)-  1);	  return    l    +(int)Math.rint(s)+(int)Math.rint(l)-    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
938	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
939	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  10  *  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  10  *  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  10  *  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
940	[BUG]  [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1,  Integer.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(long)Math.pow(10,  l  -  1,  Integer.MAX_VALUE);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(long)Math.pow(10,  l  -  1,  Integer.MAX_VALUE);	  return    l    +(long)Math.pow(10,    l    *    Integer.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
941	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)-  16);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)-  16);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)-  16);	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
942	[BUG]  [BUGGY]  return  l  *(Long.parseLong(s)-  1)/  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.parseLong(s)-  1)/  2;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.parseLong(s)-  1)/  2;	  return    l    *(Long.parseLong(s)-    1);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
943	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)/  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)/  1);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INT_NUMBER)/(Long.parseLong(s)/  1);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
944	[BUG]  [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  3);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+  3);	  return    l    *(Long.MAX_VALUE_INTEGER_NUMBER)/(Long.parseLong(s)+    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
945	[BUG]  [BUGGY]  return(l  *  Long.parseLong(s)).longValue();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return(l  *  Long.parseLong(s)).longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return(l  *  Long.parseLong(s)).longValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
946	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s),  l.longValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s),  l.longValue();  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s),  l.longValue();	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
947	[BUG]  [BUGGY]  return  l  *  Long.parseLong(s)/  Double.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  *  Long.parseLong(s)/  Double.MAX_VALUE;  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  *  Long.parseLong(s)/  Double.MAX_VALUE;	  return    l    *    Long.parseLong(s).longValue();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
948	[BUG]  [BUGGY]  return  l  +(int)Math.pow(10,  l  -  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  double  getSimpleNumber(String  s)  {  if  (isSimpleNumber(s))  {  try  {  long  l  =  Long.parseLong(s);  if  (l  <  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)  {      [BUGGY]  return  l  +(int)Math.pow(10,  l  -  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);  [BUGGY]      }  }  catch  (NumberFormatException  e)  {  }  }  return  Double.NaN;  }  [CLASS]  CodeGenerator  Context  [METHOD]  getSimpleNumber  [RETURN_TYPE]  double  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  CodeConsumer  cc  consumer  NumberFormatException  e  String  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  long  l  char[]  HEX_CHARS  	projects/Closure52/src/com/google/javascript/jscomp/CodeGenerator.java	0.3779644730092272	753	753	1	replace	return  l  +(int)Math.pow(10,  l  -  1  *  NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);	  return    l    +(int)Math.pow(10,    l    *    NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
